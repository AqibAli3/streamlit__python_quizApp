7[
    {
        "question": "Which of the following is a valid variable name in Python?",
        "options": [
            "1_variable",
            "_variable",
            "variable-name",
            "variable name"
        ],
        "answer": "_variable"
    },
    {
        "question": "What is the result of the expression 10 + 5 * 2 in Python?",
        "options": [
            "20",
            "30",
            "15",
            "None of the above"
        ],
        "answer": "20"
    },
    {
        "question": "Which operator is used for exponentiation in Python?",
        "options": [
            "^",
            "**",
            "//",
            "%"
        ],
        "answer": "**"
    },
    {
        "question": "Which operator is used for floor division in Python?",
        "options": [
            "/",
            "//",
            "%",
            "**"
        ],
        "answer": "//"
    },
    {
        "question": "What does the operator '%' do in Python?",
        "options": [
            "Adds two numbers",
            "Performs division",
            "Returns the remainder",
            "Concatenates strings"
        ],
        "answer": "Returns the remainder"
    },
    {
        "question": "Which operator is used to concatenate two strings?",
        "options": [
            "&",
            "+",
            "*",
            "%"
        ],
        "answer": "+"
    },
    {
        "question": "What is the result of the expression 3 + 2 ** 3 in Python?",
        "options": [
            "11",
            "13",
            "16",
            "10"
        ],
        "answer": "11"
    },
    {
        "question": "Which of the following is not a valid operator in Python?",
        "options": [
            "//",
            "**",
            "++",
            "%"
        ],
        "answer": "++"
    },
    {
        "question": "What does the '-=' operator do in Python?",
        "options": [
            "Adds and assigns",
            "Subtracts and assigns",
            "Divides and assigns",
            "Compares values"
        ],
        "answer": "Subtracts and assigns"
    },
    {
        "question": "Which operator is used to test whether two variables point to the same object?",
        "options": [
            "==",
            "is",
            "in",
            "!="
        ],
        "answer": "is"
    },
    {
        "question": "Which of the following is an immutable data type in Python?",
        "options": [
            "list",
            "set",
            "tuple",
            "dictionary"
        ],
        "answer": "tuple"
    },
    {
        "question": "How is a float value denoted in Python?",
        "options": [
            "10",
            "10.0",
            "'10'",
            "10f"
        ],
        "answer": "10.0"
    },
    {
        "question": "Which data type is used for key-value pair storage in Python?",
        "options": [
            "list",
            "tuple",
            "dictionary",
            "set"
        ],
        "answer": "dictionary"
    },
    {
        "question": "Which of the following correctly represents a complex number in Python?",
        "options": [
            "3+4i",
            "3+4j",
            "complex(3,4)",
            "Both '3+4j' and complex(3,4)"
        ],
        "answer": "Both '3+4j' and complex(3,4)"
    },
    {
        "question": "What is the type of the literal True in Python?",
        "options": [
            "int",
            "boolean",
            "str",
            "NoneType"
        ],
        "answer": "boolean"
    },
    {
        "question": "Which function converts the string '123' to an integer?",
        "options": [
            "str()",
            "int()",
            "float()",
            "complex()"
        ],
        "answer": "int()"
    },
    {
        "question": "What is the output of type(3) in Python?",
        "options": [
            "int",
            "float",
            "long",
            "str"
        ],
        "answer": "int"
    },
    {
        "question": "Which data type is mutable in Python?",
        "options": [
            "tuple",
            "string",
            "list",
            "int"
        ],
        "answer": "list"
    },
    {
        "question": "Which data type is ideal for representing a sequence of characters?",
        "options": [
            "list",
            "tuple",
            "str",
            "dict"
        ],
        "answer": "str"
    },
    {
        "question": "What is the result of 7 // 2 in Python?",
        "options": [
            "3.5",
            "3",
            "4",
            "2"
        ],
        "answer": "3"
    },
    {
        "question": "Which operator has higher precedence: '*' or '+'?",
        "options": [
            "+",
            "*",
            "Both are equal",
            "Depends on the context"
        ],
        "answer": "*"
    },
    {
        "question": "What is the result of the expression 2 + 3 * 4?",
        "options": [
            "20",
            "14",
            "18",
            "12"
        ],
        "answer": "14"
    },
    {
        "question": "What is the associativity of the exponentiation operator '**'?",
        "options": [
            "Left-to-right",
            "Right-to-left",
            "None",
            "Not defined"
        ],
        "answer": "Right-to-left"
    },
    {
        "question": "Evaluate the expression: 4 + 18 / (9 - 3).",
        "options": [
            "10",
            "7",
            "13",
            "4"
        ],
        "answer": "7"
    },
    {
        "question": "When operators have the same precedence, what determines their order of evaluation?",
        "options": [
            "Parentheses",
            "Associativity",
            "Data type",
            "None of the above"
        ],
        "answer": "Associativity"
    },
    {
        "question": "What is the result of 2 ** 3 ** 2 in Python?",
        "options": [
            "64",
            "512",
            "256",
            "None of the above"
        ],
        "answer": "512"
    },
    {
        "question": "Which operator has the lowest precedence among logical operators?",
        "options": [
            "and",
            "not",
            "or",
            "=="
        ],
        "answer": "or"
    },
    {
        "question": "In the expression 3 - 2 - 1, what is the order of evaluation?",
        "options": [
            "Right-to-left",
            "Left-to-right",
            "Simultaneous",
            "Depends on context"
        ],
        "answer": "Left-to-right"
    },
    {
        "question": "Evaluate the expression: not True and False.",
        "options": [
            "True",
            "False",
            "Error",
            "None"
        ],
        "answer": "False"
    },
    {
        "question": "Which of these has the highest precedence in Python?",
        "options": [
            "+",
            "()",
            "**",
            "and"
        ],
        "answer": "()"
    },
    {
        "question": "What is the result of the bitwise expression 5 & 3?",
        "options": [
            "7",
            "1",
            "5",
            "3"
        ],
        "answer": "1"
    },
    {
        "question": "Which operator is used for bitwise OR in Python?",
        "options": [
            "&",
            "|",
            "^",
            "~"
        ],
        "answer": "|"
    },
    {
        "question": "What does the bitwise NOT operator '~' do to the number 5?",
        "options": [
            "5",
            "-5",
            "-6",
            "6"
        ],
        "answer": "-6"
    },
    {
        "question": "What is the result of 8 >> 2 in Python?",
        "options": [
            "2",
            "4",
            "8",
            "16"
        ],
        "answer": "2"
    },
    {
        "question": "Which operator is used for bitwise left shift?",
        "options": [
            "<<",
            ">>",
            "**",
            "^^"
        ],
        "answer": "<<"
    },
    {
        "question": "What is the value of (True and False) in Python?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "Evaluate the expression: (True or False) and False.",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "What is the value of (not False) or False?",
        "options": [
            "False",
            "True",
            "None",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "Which of the following has a higher precedence: arithmetic operators or bitwise operators?",
        "options": [
            "Arithmetic operators",
            "Bitwise operators",
            "Both are equal",
            "Depends on the context"
        ],
        "answer": "Arithmetic operators"
    },
    {
        "question": "What does the '^' operator do in Python when used between two integers?",
        "options": [
            "Bitwise XOR",
            "Exponentiation",
            "Bitwise OR",
            "Logical XOR"
        ],
        "answer": "Bitwise XOR"
    },
    {
        "question": "Which method is used for string formatting in Python 3?",
        "options": [
            "printf()",
            "sprintf()",
            "format()",
            "toString()"
        ],
        "answer": "format()"
    },
    {
        "question": "What is the output of '{:0>5}'.format('42')?",
        "options": [
            "42000",
            "00042",
            "42   ",
            "Error"
        ],
        "answer": "00042"
    },
    {
        "question": "Which syntax is used for f-string formatting in Python?",
        "options": [
            "f\"text\"",
            "\"text\".f",
            "formatf\"text\"",
            "strf\"text\""
        ],
        "answer": "f\"text\""
    },
    {
        "question": "What is a decorator in Python?",
        "options": [
            "A function that modifies the behavior of another function",
            "A variable",
            "A type of loop",
            "None of the above"
        ],
        "answer": "A function that modifies the behavior of another function"
    },
    {
        "question": "Which symbol is used to apply a decorator above a function definition?",
        "options": [
            "#",
            "!",
            ">",
            "@"
        ],
        "answer": "@"
    },
    {
        "question": "Which module provides the 'wraps' decorator to help preserve metadata in decorated functions?",
        "options": [
            "sys",
            "functools",
            "itertools",
            "os"
        ],
        "answer": "functools"
    },
    {
        "question": "What is the output of the f-string f\"{2+3}\"?",
        "options": [
            "2+3",
            "23",
            "5",
            "Error"
        ],
        "answer": "5"
    },
    {
        "question": "Which conversion type is used in format specifiers to convert a number to hexadecimal?",
        "options": [
            "d",
            "s",
            "x",
            "f"
        ],
        "answer": "x"
    },
    {
        "question": "What is the output of '{:.2f}'.format(3.14159)?",
        "options": [
            "3.14",
            "3.14159",
            "3.1",
            "Error"
        ],
        "answer": "3.14"
    },
    {
        "question": "Which decorator helps to preserve a function’s metadata when it is wrapped by another function?",
        "options": [
            "@staticmethod",
            "@classmethod",
            "@functools.wraps",
            "@property"
        ],
        "answer": "@functools.wraps"
    },
    {
        "question": "Which loop is most commonly used to iterate over elements of a sequence in Python?",
        "options": [
            "while",
            "for",
            "do-while",
            "foreach"
        ],
        "answer": "for"
    },
    {
        "question": "Which keyword is used to exit a loop prematurely in Python?",
        "options": [
            "exit",
            "break",
            "stop",
            "quit"
        ],
        "answer": "break"
    },
    {
        "question": "Which keyword is used to skip to the next iteration of a loop?",
        "options": [
            "continue",
            "pass",
            "skip",
            "break"
        ],
        "answer": "continue"
    },
    {
        "question": "Which loop is used to repeatedly execute a block of code while a condition is True?",
        "options": [
            "for loop",
            "while loop",
            "do-while loop",
            "if loop"
        ],
        "answer": "while loop"
    },
    {
        "question": "What is the output of the following code?\n\ni = 0\nwhile i < 3:\n    print(i)\n    i += 1",
        "options": [
            "0 1 2",
            "1 2 3",
            "0 1 2 3",
            "Error"
        ],
        "answer": "0 1 2"
    },
    {
        "question": "Which built-in function is frequently used with for loops to generate a sequence of numbers?",
        "options": [
            "iter()",
            "range()",
            "enumerate()",
            "zip()"
        ],
        "answer": "range()"
    },
    {
        "question": "How can you iterate over both index and value when looping through a list?",
        "options": [
            "zip()",
            "enumerate()",
            "iteritems()",
            "range()"
        ],
        "answer": "enumerate()"
    },
    {
        "question": "What does the expression 'for i in range(5)' do?",
        "options": [
            "Iterates 0 to 4",
            "Iterates 1 to 5",
            "Iterates 5 times starting at 1",
            "None of the above"
        ],
        "answer": "Iterates 0 to 4"
    },
    {
        "question": "Which loop construct is considered more Pythonic for iterating over sequences?",
        "options": [
            "while loop",
            "for loop",
            "do-while loop",
            "recursive loop"
        ],
        "answer": "for loop"
    },
    {
        "question": "What is the output of the following code?\n\nfor i in range(2, 10, 2):\n    print(i, end=' ')",
        "options": [
            "2 4 6 8",
            "2 4 6 8 10",
            "0 2 4 6 8",
            "Error"
        ],
        "answer": "2 4 6 8"
    },
    {
        "question": "Which method is used to convert a string to all lowercase letters?",
        "options": [
            "toLower()",
            "lower()",
            "tolowercase()",
            "convert()"
        ],
        "answer": "lower()"
    },
    {
        "question": "What does the string method strip() do?",
        "options": [
            "Removes all characters",
            "Removes whitespace from the beginning and end",
            "Converts to lowercase",
            "Splits the string"
        ],
        "answer": "Removes whitespace from the beginning and end"
    },
    {
        "question": "How do you access the first character of the string 's'?",
        "options": [
            "s[1]",
            "s[0]",
            "s.first()",
            "s.charAt(0)"
        ],
        "answer": "s[0]"
    },
    {
        "question": "Which operator is used to concatenate strings in Python?",
        "options": [
            "&",
            "+",
            "*",
            "%"
        ],
        "answer": "+"
    },
    {
        "question": "What is the output of the expression 'Hello' * 3?",
        "options": [
            "Hello 3",
            "HelloHelloHello",
            "Error",
            "3Hello"
        ],
        "answer": "HelloHelloHello"
    },
    {
        "question": "Which method returns the lowest index in the string where a substring is found?",
        "options": [
            "find()",
            "index()",
            "search()",
            "locate()"
        ],
        "answer": "find()"
    },
    {
        "question": "How do you check if the substring 'py' exists in the string 'Python'?",
        "options": [
            "'py' in 'Python'",
            "'py'.find('Python')",
            "'Python'.contains('py')",
            "None of the above"
        ],
        "answer": "'py' in 'Python'"
    },
    {
        "question": "Which string formatting style was introduced in Python 3.6?",
        "options": [
            "format()",
            "f-string",
            "printf()",
            "Template strings"
        ],
        "answer": "f-string"
    },
    {
        "question": "What is the result of 'Python'[::-1]?",
        "options": [
            "nohtyP",
            "Python",
            "Error",
            "nothyP"
        ],
        "answer": "nohtyP"
    },
    {
        "question": "Which method counts the number of occurrences of a substring in a string?",
        "options": [
            "index()",
            "count()",
            "find()",
            "match()"
        ],
        "answer": "count()"
    },
    {
        "question": "Which method is used to add an element to the end of a list?",
        "options": [
            "append()",
            "insert()",
            "add()",
            "extend()"
        ],
        "answer": "append()"
    },
    {
        "question": "Which method inserts an element at a specified position in a list?",
        "options": [
            "append()",
            "insert()",
            "add()",
            "pop()"
        ],
        "answer": "insert()"
    },
    {
        "question": "What is the output of:\n\nmy_list = [1, 2, 3]\nprint(my_list[1])?",
        "options": [
            "1",
            "2",
            "3",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "Which method removes the first occurrence of a value from a list?",
        "options": [
            "pop()",
            "remove()",
            "delete()",
            "clear()"
        ],
        "answer": "remove()"
    },
    {
        "question": "Which method removes and returns the last element in a list?",
        "options": [
            "remove()",
            "pop()",
            "delete()",
            "end()"
        ],
        "answer": "pop()"
    },
    {
        "question": "What is the result of len([1, 2, 3, 4])?",
        "options": [
            "3",
            "4",
            "5",
            "Error"
        ],
        "answer": "4"
    },
    {
        "question": "Which operator is used to concatenate two lists?",
        "options": [
            "+",
            "*",
            "append()",
            "extend()"
        ],
        "answer": "+"
    },
    {
        "question": "What is the output of [1, 2] * 3?",
        "options": [
            "[1, 2, 1, 2, 1, 2]",
            "[3, 6]",
            "[1, 2, 3]",
            "Error"
        ],
        "answer": "[1, 2, 1, 2, 1, 2]"
    },
    {
        "question": "How do you access the last element of a list named lst?",
        "options": [
            "lst[last]",
            "lst[-1]",
            "lst[len(lst)]",
            "lst[1]"
        ],
        "answer": "lst[-1]"
    },
    {
        "question": "Which method sorts a list in-place?",
        "options": [
            "sorted()",
            "sort()",
            "order()",
            "arrange()"
        ],
        "answer": "sort()"
    },
    {
        "question": "Which of the following is an example of list comprehension?",
        "options": [
            "[x*2 for x in range(5)]",
            "for x in range(5): x*2",
            "list(map(lambda x: x*2, range(5)))",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "What is the primary benefit of using list comprehensions in Python?",
        "options": [
            "Better performance",
            "More concise syntax",
            "Easier debugging",
            "None of the above"
        ],
        "answer": "More concise syntax"
    },
    {
        "question": "How can you include a condition in a list comprehension?",
        "options": [
            "[x for x in iterable if condition]",
            "[x if condition for x in iterable]",
            "filter(x, condition, iterable)",
            "None of the above"
        ],
        "answer": "[x for x in iterable if condition]"
    },
    {
        "question": "What is the output of [x for x in range(5)]?",
        "options": [
            "[1, 2, 3, 4, 5]",
            "[0, 1, 2, 3, 4]",
            "[0, 1, 2, 3]",
            "Error"
        ],
        "answer": "[0, 1, 2, 3, 4]"
    },
    {
        "question": "How can you create a list of squares for numbers 0 through 9 using list comprehension?",
        "options": [
            "[x**2 for x in range(10)]",
            "[square(x) for x in range(10)]",
            "map(x**2, range(10))",
            "None of the above"
        ],
        "answer": "[x**2 for x in range(10)]"
    },
    {
        "question": "Can list comprehensions be nested in Python?",
        "options": [
            "Yes",
            "No",
            "Only one level deep",
            "Depends on the version"
        ],
        "answer": "Yes"
    },
    {
        "question": "What is the output of [x+y for x in 'AB' for y in '12']?",
        "options": [
            "['A1', 'A2', 'B1', 'B2']",
            "['AB12']",
            "['A', 'B', '1', '2']",
            "Error"
        ],
        "answer": "['A1', 'A2', 'B1', 'B2']"
    },
    {
        "question": "How do you filter even numbers in a list comprehension for numbers 0 to 9?",
        "options": [
            "[x for x in range(10) if x % 2 == 0]",
            "[x for x in range(10) if x % 2 != 0]",
            "[x for x in range(10) if not x % 2]",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "Which keyword is used in list comprehensions to iterate over items?",
        "options": [
            "iter",
            "for",
            "foreach",
            "in"
        ],
        "answer": "for"
    },
    {
        "question": "Is it possible to create sets or dictionaries using comprehension syntax similar to lists?",
        "options": [
            "Yes",
            "No",
            "Only sets",
            "Only dictionaries"
        ],
        "answer": "Yes"
    },
    {
        "question": "What is a tuple in Python?",
        "options": [
            "A mutable ordered sequence",
            "An immutable ordered sequence",
            "A type of dictionary",
            "None of the above"
        ],
        "answer": "An immutable ordered sequence"
    },
    {
        "question": "Which symbol is used to denote a tuple?",
        "options": [
            "[]",
            "()",
            "{}",
            "<>"
        ],
        "answer": "()"
    },
    {
        "question": "What is the output of:\n\nt = (1, 2, 3)\nprint(t[1])?",
        "options": [
            "1",
            "2",
            "3",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "Can tuples in Python be modified after creation?",
        "options": [
            "Yes",
            "No",
            "Only partially",
            "Depends on the contents"
        ],
        "answer": "No"
    },
    {
        "question": "Which function converts a list to a tuple?",
        "options": [
            "list()",
            "tuple()",
            "convert()",
            "str()"
        ],
        "answer": "tuple()"
    },
    {
        "question": "How do you create a single-element tuple?",
        "options": [
            "(5)",
            "(5,)",
            "[5]",
            "{5}"
        ],
        "answer": "(5,)"
    },
    {
        "question": "What is the result of len((1, 2, 3, 4))?",
        "options": [
            "3",
            "4",
            "5",
            "Error"
        ],
        "answer": "4"
    },
    {
        "question": "Is it possible to nest tuples within tuples in Python?",
        "options": [
            "Yes",
            "No",
            "Only one level",
            "Only if elements are immutable"
        ],
        "answer": "Yes"
    },
    {
        "question": "Which method counts occurrences of a value in a tuple?",
        "options": [
            "count()",
            "index()",
            "find()",
            "search()"
        ],
        "answer": "count()"
    },
    {
        "question": "How do you obtain the index of an element in a tuple?",
        "options": [
            "find()",
            "index()",
            "locate()",
            "search()"
        ],
        "answer": "index()"
    },
    {
        "question": "What is a set in Python?",
        "options": [
            "An ordered collection of elements",
            "An unordered collection of unique elements",
            "A mutable sequence",
            "None of the above"
        ],
        "answer": "An unordered collection of unique elements"
    },
    {
        "question": "Which of the following is used to define a set?",
        "options": [
            "[]",
            "()",
            "{}",
            "<>"
        ],
        "answer": "{}"
    },
    {
        "question": "How do you create an empty set in Python?",
        "options": [
            "{}",
            "set()",
            "()",
            "None"
        ],
        "answer": "set()"
    },
    {
        "question": "Which method adds an element to a set?",
        "options": [
            "append()",
            "add()",
            "insert()",
            "update()"
        ],
        "answer": "add()"
    },
    {
        "question": "Which method removes an element from a set and raises an error if not found?",
        "options": [
            "remove()",
            "discard()",
            "pop()",
            "delete()"
        ],
        "answer": "remove()"
    },
    {
        "question": "What is the result of: {1, 2, 3} | {3, 4} ?",
        "options": [
            "{1,2,3}",
            "{3,4}",
            "{1,2,3,4}",
            "Error"
        ],
        "answer": "{1,2,3,4}"
    },
    {
        "question": "Which operator performs set intersection?",
        "options": [
            "|",
            "&",
            "^",
            "-"
        ],
        "answer": "&"
    },
    {
        "question": "Which method returns the intersection of two sets?",
        "options": [
            "intersection()",
            "and()",
            "intersect()",
            "union()"
        ],
        "answer": "intersection()"
    },
    {
        "question": "Are sets in Python ordered?",
        "options": [
            "Yes",
            "No",
            "Only in Python 2",
            "Only if sorted"
        ],
        "answer": "No"
    },
    {
        "question": "Which method removes all elements from a set?",
        "options": [
            "clear()",
            "delete()",
            "remove_all()",
            "empty()"
        ],
        "answer": "clear()"
    },
    {
        "question": "What is a dictionary in Python?",
        "options": [
            "An ordered collection of values",
            "A collection of key-value pairs",
            "A list of keys",
            "A special type of set"
        ],
        "answer": "A collection of key-value pairs"
    },
    {
        "question": "Which symbol is used to define a dictionary?",
        "options": [
            "[]",
            "()",
            "{}",
            "<>"
        ],
        "answer": "{}"
    },
    {
        "question": "How do you access the value associated with the key 'name' in dictionary d?",
        "options": [
            "d['name']",
            "d.name",
            "d.get('name')",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "How do you add a new key-value pair to a dictionary?",
        "options": [
            "d.add(key, value)",
            "d[key] = value",
            "append()",
            "insert()"
        ],
        "answer": "d[key] = value"
    },
    {
        "question": "Which method removes a key-value pair from a dictionary?",
        "options": [
            "del d[key]",
            "remove(key)",
            "pop(key)",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "Which method returns a view of all keys in the dictionary?",
        "options": [
            "keys()",
            "values()",
            "items()",
            "all()"
        ],
        "answer": "keys()"
    },
    {
        "question": "Which method returns all values from a dictionary?",
        "options": [
            "values()",
            "keys()",
            "items()",
            "dict()"
        ],
        "answer": "values()"
    },
    {
        "question": "How can you merge two dictionaries in Python 3.9 and later?",
        "options": [
            "Using the '+' operator",
            "Using the update() method",
            "Using the '|' operator",
            "Both B and C"
        ],
        "answer": "Both B and C"
    },
    {
        "question": "Which method returns key-value pairs as tuples?",
        "options": [
            "pairs()",
            "items()",
            "keys()",
            "values()"
        ],
        "answer": "items()"
    },
    {
        "question": "What is the output of {\"a\":1, \"b\":2}.get(\"c\", 3)?",
        "options": [
            "None",
            "3",
            "KeyError",
            "0"
        ],
        "answer": "3"
    },
    {
        "question": "What does the len() function do?",
        "options": [
            "Returns the type of an object",
            "Calculates the sum",
            "Returns the number of items",
            "None"
        ],
        "answer": "Returns the number of items"
    },
    {
        "question": "What is the purpose of the type() function in Python?",
        "options": [
            "Convert data type",
            "Return the type of an object",
            "Add two numbers",
            "None"
        ],
        "answer": "Return the type of an object"
    },
    {
        "question": "Which function converts a string into a list of its characters?",
        "options": [
            "list()",
            "str()",
            "split()",
            "dict()"
        ],
        "answer": "list()"
    },
    {
        "question": "What does the sum() function do?",
        "options": [
            "Subtracts numbers",
            "Returns the sum of all elements in an iterable",
            "Multiplies values",
            "None"
        ],
        "answer": "Returns the sum of all elements in an iterable"
    },
    {
        "question": "Which function returns a sorted list without changing the original?",
        "options": [
            "sorted()",
            "sort()",
            "order()",
            "arrange()"
        ],
        "answer": "sorted()"
    },
    {
        "question": "Which built-in function returns the maximum value in an iterable?",
        "options": [
            "max()",
            "min()",
            "abs()",
            "sum()"
        ],
        "answer": "max()"
    },
    {
        "question": "What does the min() function do?",
        "options": [
            "Returns the largest element",
            "Returns the smallest element",
            "Returns the total",
            "None"
        ],
        "answer": "Returns the smallest element"
    },
    {
        "question": "What is the use of the zip() function in Python?",
        "options": [
            "Compress data",
            "Aggregate elements from multiple iterables",
            "Convert values to integers",
            "None of the above"
        ],
        "answer": "Aggregate elements from multiple iterables"
    },
    {
        "question": "Which function generates a sequence of numbers?",
        "options": [
            "iterate()",
            "range()",
            "list()",
            "tuple()"
        ],
        "answer": "range()"
    },
    {
        "question": "What does the abs() function return?",
        "options": [
            "Absolute value of a number",
            "Square of a number",
            "Sign of a number",
            "None"
        ],
        "answer": "Absolute value of a number"
    },
    {
        "question": "Which keyword is used to define a function in Python?",
        "options": [
            "function",
            "def",
            "fun",
            "define"
        ],
        "answer": "def"
    },
    {
        "question": "Which keyword is used to exit a function and optionally return a value?",
        "options": [
            "exit",
            "stop",
            "return",
            "break"
        ],
        "answer": "return"
    },
    {
        "question": "Can a Python function return multiple values?",
        "options": [
            "Yes",
            "No",
            "Only with tuples",
            "Only with lists"
        ],
        "answer": "Yes"
    },
    {
        "question": "How do you define an anonymous function in Python?",
        "options": [
            "def",
            "lambda",
            "anon",
            "function"
        ],
        "answer": "lambda"
    },
    {
        "question": "What is the output of the following code?\n\ndef add(a, b=2):\n    return a + b\n\nprint(add(3))",
        "options": [
            "3",
            "5",
            "2",
            "Error"
        ],
        "answer": "5"
    },
    {
        "question": "What is the default return value of a Python function that does not explicitly return a value?",
        "options": [
            "0",
            "False",
            "None",
            "Empty string"
        ],
        "answer": "None"
    },
    {
        "question": "How is a function called in Python?",
        "options": [
            "call my_func()",
            "my_func()",
            "execute my_func",
            "run(my_func)"
        ],
        "answer": "my_func()"
    },
    {
        "question": "What does the following code output?\n\ndef func():\n    print('Hello')\n\nfunc()",
        "options": [
            "Hello",
            "'Hello'",
            "None",
            "Error"
        ],
        "answer": "Hello"
    },
    {
        "question": "Which of the following can be passed as arguments to a function?",
        "options": [
            "Numbers",
            "Strings",
            "Other functions",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "question": "What is recursion in Python?",
        "options": [
            "A function calling itself",
            "A loop construct",
            "A conditional statement",
            "None of the above"
        ],
        "answer": "A function calling itself"
    },
    {
        "question": "How are arguments passed to functions in Python?",
        "options": [
            "By value",
            "By reference",
            "By assignment of the object reference",
            "None of the above"
        ],
        "answer": "By assignment of the object reference"
    },
    {
        "question": "What is the output of the following code?\n\ndef func(a):\n    a = 10\nx = 5\nfunc(x)\nprint(x)",
        "options": [
            "10",
            "5",
            "Error",
            "None"
        ],
        "answer": "5"
    },
    {
        "question": "Which keyword allows a function to accept a variable number of positional arguments?",
        "options": [
            "*args",
            "**kwargs",
            "&args",
            "varargs"
        ],
        "answer": "*args"
    },
    {
        "question": "How do you pass a variable number of keyword arguments to a function?",
        "options": [
            "*args",
            "**kwargs",
            "kwargs",
            "None"
        ],
        "answer": "**kwargs"
    },
    {
        "question": "Which statement about mutable objects as arguments is true?",
        "options": [
            "They cannot be modified",
            "They can be changed in place",
            "They are passed by value",
            "None of the above"
        ],
        "answer": "They can be changed in place"
    },
    {
        "question": "What is a recursive function?",
        "options": [
            "A function that calls another function",
            "A function that calls itself",
            "A function with no arguments",
            "None"
        ],
        "answer": "A function that calls itself"
    },
    {
        "question": "What potential problem can arise from deep recursion?",
        "options": [
            "Infinite loop",
            "Stack overflow",
            "Memory leak",
            "Syntax error"
        ],
        "answer": "Stack overflow"
    },
    {
        "question": "What is tail recursion?",
        "options": [
            "Recursion where the recursive call is the last operation",
            "Recursion that uses tail variables",
            "Recursion without parameters",
            "None"
        ],
        "answer": "Recursion where the recursive call is the last operation"
    },
    {
        "question": "Which function is used to change the recursion limit in Python?",
        "options": [
            "sys.setrecursionlimit()",
            "recursion(limit)",
            "set_limit()",
            "change_recursion()"
        ],
        "answer": "sys.setrecursionlimit()"
    },
    {
        "question": "What is the default recursion limit in Python (commonly)?",
        "options": [
            "500",
            "1000",
            "2000",
            "Infinite"
        ],
        "answer": "1000"
    },
    {
        "question": "What does the map() function do?",
        "options": [
            "Filters elements",
            "Applies a function to all items in an iterable",
            "Reduces an iterable",
            "None of the above"
        ],
        "answer": "Applies a function to all items in an iterable"
    },
    {
        "question": "How do you use map() to apply a function 'f' over a list 'lst'?",
        "options": [
            "map(lst, f)",
            "map(f, lst)",
            "f(lst)",
            "apply(f, lst)"
        ],
        "answer": "map(f, lst)"
    },
    {
        "question": "What type does map() return in Python 3?",
        "options": [
            "A list",
            "A generator",
            "A map object (iterator)",
            "A tuple"
        ],
        "answer": "A map object (iterator)"
    },
    {
        "question": "How do you convert the output of map() into a list?",
        "options": [
            "list()",
            "tuple()",
            "convert()",
            "str()"
        ],
        "answer": "list()"
    },
    {
        "question": "Which module provides the reduce() function in Python 3?",
        "options": [
            "itertools",
            "functools",
            "operator",
            "reduce"
        ],
        "answer": "functools"
    },
    {
        "question": "What does the filter() function do?",
        "options": [
            "Applies a function to all elements",
            "Filters elements for which a function returns True",
            "Reduces the elements",
            "None"
        ],
        "answer": "Filters elements for which a function returns True"
    },
    {
        "question": "What is a module in Python?",
        "options": [
            "A file containing Python definitions and statements",
            "A built-in function",
            "A special variable",
            "An error handler"
        ],
        "answer": "A file containing Python definitions and statements"
    },
    {
        "question": "Which keyword is used to import a module in Python?",
        "options": [
            "import",
            "require",
            "include",
            "load"
        ],
        "answer": "import"
    },
    {
        "question": "How do you import a specific attribute from a module?",
        "options": [
            "from module import attribute",
            "import module.attribute",
            "require module.attribute",
            "include module:attribute"
        ],
        "answer": "from module import attribute"
    },
    {
        "question": "What is the purpose of the __init__.py file in a Python package?",
        "options": [
            "To initialize the package",
            "To store package configuration",
            "To serve as the main module",
            "To declare global variables"
        ],
        "answer": "To initialize the package"
    },
    {
        "question": "Which built-in module provides access to command-line arguments?",
        "options": [
            "sys",
            "os",
            "argparse",
            "getopt"
        ],
        "answer": "sys"
    },
    {
        "question": "How can you list all built-in modules in Python?",
        "options": [
            "Using sys.builtin_module_names",
            "Using help('modules')",
            "Using dir(__builtins__)",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "question": "Which module is used to interact with the operating system?",
        "options": [
            "os",
            "sys",
            "platform",
            "io"
        ],
        "answer": "os"
    },
    {
        "question": "What does the __name__ attribute represent in a Python module?",
        "options": [
            "The name of the module",
            "The name of the class",
            "The name of a function",
            "The package version"
        ],
        "answer": "The name of the module"
    },
    {
        "question": "If a module is imported twice in a script, what happens?",
        "options": [
            "It is reloaded each time",
            "It is executed once and then cached",
            "It raises an error",
            "Its functions are duplicated"
        ],
        "answer": "It is executed once and then cached"
    },
    {
        "question": "Which of the following modules is used for regular expressions?",
        "options": [
            "regex",
            "re",
            "pyregex",
            "search"
        ],
        "answer": "re"
    },
    {
        "question": "Which module is used for regular expressions in Python?",
        "options": [
            "re",
            "regex",
            "pyre",
            "expat"
        ],
        "answer": "re"
    },
    {
        "question": "What does the re.search() function do?",
        "options": [
            "Searches for a pattern anywhere in the string",
            "Matches the pattern only at the start of the string",
            "Returns a list of all matches",
            "Splits the string by the pattern"
        ],
        "answer": "Searches for a pattern anywhere in the string"
    },
    {
        "question": "Which character is used to indicate the beginning of a string in a regex pattern?",
        "options": [
            "^",
            "$",
            ".",
            "*"
        ],
        "answer": "^"
    },
    {
        "question": "What does the '.' metacharacter match in regular expressions?",
        "options": [
            "Any single character except newline",
            "Only alphanumeric characters",
            "The literal dot character",
            "Whitespace characters only"
        ],
        "answer": "Any single character except newline"
    },
    {
        "question": "What does the '*' quantifier do in a regex?",
        "options": [
            "Matches zero or more repetitions of the preceding element",
            "Matches one or more repetitions",
            "Matches exactly one occurrence",
            "Matches zero or one occurrence"
        ],
        "answer": "Matches zero or more repetitions of the preceding element"
    },
    {
        "question": "Which function returns a list of all non-overlapping matches of a pattern in a string?",
        "options": [
            "re.findall()",
            "re.search()",
            "re.match()",
            "re.split()"
        ],
        "answer": "re.findall()"
    },
    {
        "question": "What is a raw string in Python and why is it used in regex patterns?",
        "options": [
            "A string prefixed with r to avoid escaping backslashes",
            "A string with no quotes",
            "A string converted to bytes",
            "A string stored in a special raw format"
        ],
        "answer": "A string prefixed with r to avoid escaping backslashes"
    },
    {
        "question": "Which function is used to replace parts of a string using regex?",
        "options": [
            "re.sub()",
            "re.replace()",
            "re.change()",
            "re.modify()"
        ],
        "answer": "re.sub()"
    },
    {
        "question": "How can you compile a regular expression pattern for reuse?",
        "options": [
            "re.compile()",
            "re.build()",
            "regex.compile()",
            "compile()"
        ],
        "answer": "re.compile()"
    },
    {
        "question": "Which flag is used for case-insensitive matching in regex?",
        "options": [
            "re.IGNORECASE",
            "re.I",
            "Both A and B",
            "None of the above"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "Which function is used to open a file in Python?",
        "options": [
            "open()",
            "file()",
            "read()",
            "io.open()"
        ],
        "answer": "open()"
    },
    {
        "question": "What does the 'r' mode indicate when opening a file?",
        "options": [
            "Read mode",
            "Write mode",
            "Append mode",
            "Binary mode"
        ],
        "answer": "Read mode"
    },
    {
        "question": "Which method reads the entire content of a file into a string?",
        "options": [
            "read()",
            "readline()",
            "readlines()",
            "fetch()"
        ],
        "answer": "read()"
    },
    {
        "question": "How do you properly close a file in Python?",
        "options": [
            "Using close()",
            "Using exit()",
            "Using free()",
            "It closes automatically"
        ],
        "answer": "Using close()"
    },
    {
        "question": "What advantage does using the 'with' statement offer when handling files?",
        "options": [
            "It automatically closes the file when done",
            "It speeds up file I/O",
            "It opens the file in binary mode",
            "It allows simultaneous file access"
        ],
        "answer": "It automatically closes the file when done"
    },
    {
        "question": "Which method reads a single line from an open file?",
        "options": [
            "read()",
            "readline()",
            "readlines()",
            "line()"
        ],
        "answer": "readline()"
    },
    {
        "question": "In which mode should you open a file for binary writing?",
        "options": [
            "wb",
            "w",
            "rb",
            "r"
        ],
        "answer": "wb"
    },
    {
        "question": "What exception is raised if a file is not found when attempting to open it for reading?",
        "options": [
            "FileNotFoundError",
            "IOError",
            "OSError",
            "ValueError"
        ],
        "answer": "FileNotFoundError"
    },
    {
        "question": "Which method is used to write data to a file?",
        "options": [
            "write()",
            "append()",
            "output()",
            "print()"
        ],
        "answer": "write()"
    },
    {
        "question": "What does the 'a' mode do when opening a file?",
        "options": [
            "Appends data to the file",
            "Reads data from the file",
            "Overwrites the file",
            "Opens the file in binary mode"
        ],
        "answer": "Appends data to the file"
    },
    {
        "question": "What is the correct way to define a class in Python?",
        "options": [
            "def Class: ...",
            "class MyClass:",
            "function MyClass()",
            "Class MyClass()"
        ],
        "answer": "class MyClass:"
    },
    {
        "question": "How do you create an instance of a class named MyClass?",
        "options": [
            "MyClass()",
            "new MyClass()",
            "MyClass.new()",
            "create MyClass()"
        ],
        "answer": "MyClass()"
    },
    {
        "question": "Which method is called automatically when an object is instantiated?",
        "options": [
            "__init__",
            "__new__",
            "__create__",
            "init()"
        ],
        "answer": "__init__"
    },
    {
        "question": "What is the purpose of the 'self' parameter in instance methods?",
        "options": [
            "It refers to the instance of the class",
            "It is a keyword for static methods",
            "It references global variables",
            "It stands for 'system'"
        ],
        "answer": "It refers to the instance of the class"
    },
    {
        "question": "How do you define a class method in Python?",
        "options": [
            "By using the @classmethod decorator",
            "By using the @staticmethod decorator",
            "By using def self()",
            "By using def classmethod()"
        ],
        "answer": "By using the @classmethod decorator"
    },
    {
        "question": "What does polymorphism in Python allow?",
        "options": [
            "Different classes to define methods with the same name",
            "Multiple inheritance",
            "Encapsulation of data",
            "Static typing"
        ],
        "answer": "Different classes to define methods with the same name"
    },
    {
        "question": "Which method provides a string representation of an object for end users?",
        "options": [
            "__str__",
            "__repr__",
            "Both __str__ and __repr__",
            "toString()"
        ],
        "answer": "Both __str__ and __repr__"
    },
    {
        "question": "What is the purpose of the __del__ method in a Python class?",
        "options": [
            "It initializes an object",
            "It deletes an object",
            "It converts an object to a string",
            "It compares two objects"
        ],
        "answer": "It deletes an object"
    },
    {
        "question": "Which of the following best describes a class attribute in Python?",
        "options": [
            "An attribute that is shared across all instances of the class",
            "An attribute unique to each instance",
            "An attribute that can only be accessed within the class",
            "None of the above"
        ],
        "answer": "An attribute that is shared across all instances of the class"
    },
    {
        "question": "How do you define a static method in a Python class?",
        "options": [
            "Using the @staticmethod decorator",
            "Using the @classmethod decorator",
            "Defining the method outside of the class",
            "Using the static keyword"
        ],
        "answer": "Using the @staticmethod decorator"
    },
    {
        "question": "Which special method in a Python class is used to provide an unambiguous string representation of an object (useful for debugging)?",
        "options": [
            "__str__",
            "__repr__",
            "__format__",
            "__unicode__"
        ],
        "answer": "__repr__"
    },
    {
        "question": "How can you create a private attribute in a Python class?",
        "options": [
            "Prefix the variable name with a single underscore (_)",
            "Prefix the variable name with a double underscore (__)",
            "Use the 'private' keyword",
            "There is no way to create private attributes in Python"
        ],
        "answer": "Prefix the variable name with a double underscore (__)"
    },
    {
        "question": "What does method overriding in Python mean?",
        "options": [
            "Defining multiple methods with the same name in the same class",
            "Redefining a method in a subclass that was already defined in the parent class",
            "Combining several methods into a single method",
            "Using default parameters in a method"
        ],
        "answer": "Redefining a method in a subclass that was already defined in the parent class"
    },
    {
        "question": "Which of the following is a valid way to call the parent class’s constructor from a subclass?",
        "options": [
            "ParentClass.__init__(self)",
            "super().__init__()",
            "Both A and B",
            "Neither is valid in Python"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "Which built-in function checks whether an object is an instance of a given class or its subclass?",
        "options": [
            "isinstance()",
            "type()",
            "issubclass()",
            "check()"
        ],
        "answer": "isinstance()"
    },
    {
        "question": "How can you create a read-only property in a Python class?",
        "options": [
            "By defining a method with the @property decorator and not providing a setter",
            "By declaring the attribute as a constant",
            "By using the private keyword",
            "By overriding the __setattr__ method to ignore assignments"
        ],
        "answer": "By defining a method with the @property decorator and not providing a setter"
    },
    {
        "question": "Which keyword is used to indicate that a method belongs to the class rather than any instance?",
        "options": [
            "self",
            "cls",
            "static",
            "Both 'cls' (with @classmethod) and 'static' (with @staticmethod)"
        ],
        "answer": "Both 'cls' (with @classmethod) and 'static' (with @staticmethod)"
    },
    {
        "question": "What is multiple inheritance in Python?",
        "options": [
            "When a class inherits methods and attributes from more than one parent class",
            "When multiple classes inherit from the same base class",
            "When a class has multiple constructors",
            "A method to overload existing methods"
        ],
        "answer": "When a class inherits methods and attributes from more than one parent class"
    },
    {
        "question": "What happens when you use a space in a variable name in Python?",
        "options": [
            "It creates a SyntaxError",
            "The space is automatically removed",
            "It gets replaced by an underscore",
            "It works normally"
        ],
        "answer": "It creates a SyntaxError"
    },
    {
        "question": "Which operator is used for repeating a string a specified number of times?",
        "options": [
            "*",
            "+",
            "repeat()",
            "loop()"
        ],
        "answer": "*"
    },
    {
        "question": "What is the output of the expression 10 / 2 in Python?",
        "options": [
            "5",
            "5.0",
            "Error",
            "None"
        ],
        "answer": "5.0"
    },
    {
        "question": "Which of the following is NOT a valid operator in Python?",
        "options": [
            "++",
            "+=",
            "-",
            "/"
        ],
        "answer": "++"
    },
    {
        "question": "Which operator checks for inequality between two values in Python?",
        "options": [
            "<>",
            "!==",
            "!=",
            "not="
        ],
        "answer": "!="
    },
    {
        "question": "What does the '**=' operator do in Python?",
        "options": [
            "Raises to a power and assigns the result",
            "Throws an error",
            "Performs multiplication and assignment",
            "Performs exponentiation without assignment"
        ],
        "answer": "Raises to a power and assigns the result"
    },
    {
        "question": "Can variable names in Python start with an underscore?",
        "options": [
            "Yes",
            "No",
            "Only in special cases",
            "Depends on the Python version"
        ],
        "answer": "Yes"
    },
    {
        "question": "Which of the following is a valid assignment of multiple variables in one line?",
        "options": [
            "a, b = 1, 2",
            "a = b = 1, 2",
            "a = 1, b = 2",
            "a; b = 1,2"
        ],
        "answer": "a, b = 1, 2"
    },
    {
        "question": "What does the '/' operator do in Python?",
        "options": [
            "Performs integer division",
            "Performs floating-point division",
            "Raises a SyntaxError",
            "Concatenates numbers"
        ],
        "answer": "Performs floating-point division"
    },
    {
        "question": "Which numeric type in Python is used to represent numbers with an imaginary part?",
        "options": [
            "int",
            "float",
            "complex",
            "decimal"
        ],
        "answer": "complex"
    },
    {
        "question": "What is the type of the expression 5 / 2 in Python 3?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "float"
    },
    {
        "question": "What does the int() function do when converting a float like 3.8?",
        "options": [
            "Rounds to the nearest integer",
            "Truncates the decimal part",
            "Converts it to a float",
            "Raises an error"
        ],
        "answer": "Truncates the decimal part"
    },
    {
        "question": "Which built-in function converts a value to a floating-point number?",
        "options": [
            "int()",
            "str()",
            "float()",
            "complex()"
        ],
        "answer": "float()"
    },
    {
        "question": "What is the output of abs(-10) in Python?",
        "options": [
            "-10",
            "10",
            "0",
            "Error"
        ],
        "answer": "10"
    },
    {
        "question": "What is the output of round(3.14159, 2) in Python?",
        "options": [
            "3.14",
            "3.15",
            "3.141",
            "3.1"
        ],
        "answer": "3.14"
    },
    {
        "question": "Which function converts a value into a complex number in Python?",
        "options": [
            "complex()",
            "int()",
            "float()",
            "bool()"
        ],
        "answer": "complex()"
    },
    {
        "question": "What happens when you try to convert the string '10.5' to an int?",
        "options": [
            "It converts to 10",
            "It converts to 11",
            "It raises a ValueError",
            "It returns 10.5"
        ],
        "answer": "It raises a ValueError"
    },
    {
        "question": "What is the data type of the result of 2 + 3j * 2 in Python?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "complex"
    },
    {
        "question": "If x = 5, what does type(x) return in Python?",
        "options": [
            "'int'",
            "'integer'",
            "'number'",
            "'numeric'"
        ],
        "answer": "'int'"
    },
    {
        "question": "In the expression 3 + 4 * 2, which operation is performed first by Python?",
        "options": [
            "Addition",
            "Multiplication",
            "Both simultaneously",
            "Division"
        ],
        "answer": "Multiplication"
    },
    {
        "question": "What is the associativity of the '+' operator in Python?",
        "options": [
            "Right-to-left",
            "Left-to-right",
            "Non-associative",
            "Depends on the operands"
        ],
        "answer": "Left-to-right"
    },
    {
        "question": "Which operator in Python has right-to-left associativity?",
        "options": [
            "+ (Plus)",
            "- (Minus) ",
            "* (Asterisk)",
            "** (Exponentiation)"
        ],
        "answer": "**"
    },
    {
        "question": "Evaluate the expression: 100 / 5 * 2",
        "options": [
            "10",
            "20",
            "40",
            "50"
        ],
        "answer": "40"
    },
    {
        "question": "What is the output of (1 + 2) * 3 in Python?",
        "options": [
            "7",
            "9",
            "6",
            "Error"
        ],
        "answer": "9"
    },
    {
        "question": "Which operator has higher precedence: '*' or '<<'?",
        "options": [
            "'*' has higher precedence",
            "'<<' has higher precedence",
            "They have equal precedence",
            "It varies by Python version"
        ],
        "answer": "'*' has higher precedence"
    },
    {
        "question": "What is the associativity of the '-' operator in Python?",
        "options": [
            "Left-to-right",
            "Right-to-left",
            "Non-associative",
            "None of the above"
        ],
        "answer": "Left-to-right"
    },
    {
        "question": "What is the result of 5 - 2 - 1 in Python?",
        "options": [
            "2",
            "1",
            "3",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "Which of the following can be used to alter the default operator precedence in an expression?",
        "options": [
            "Square brackets",
            "Parentheses",
            "Curly braces",
            "Quotation marks"
        ],
        "answer": "Parentheses"
    },
    {
        "question": "Which of the following symbols is not allowed in a Python variable name?",
        "options": [
            "@",
            "#",
            "-",
            "$"
        ],
        "answer": "-"
    },
    {
        "question": "What is the effect of the '**=' operator when used like 'x **= 3'?",
        "options": [
            "Multiplies x by 3 and assigns",
            "Raises x to the power of 3 and assigns",
            "Concatenates x with 3",
            "Subtracts 3 from x and assigns"
        ],
        "answer": "Raises x to the power of 3 and assigns"
    },
    {
        "question": "If a = 5 and b = 2, what is the result of a % b?",
        "options": [
            "0",
            "1",
            "2",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "What is the output of: x = 4; print(x // 2)?",
        "options": [
            "2.0",
            "2",
            "1",
            "4"
        ],
        "answer": "2"
    },
    {
        "question": "Given x = 10, what is x after executing 'x -= 3'?",
        "options": [
            "7",
            "13",
            "30",
            "Error"
        ],
        "answer": "7"
    },
    {
        "question": "Which operator is used for string replication in Python?",
        "options": [
            "^ (Caret)",
            "* (Asterisk)",
            "+ (Plus",
            "% (Modulo)"
        ],
        "answer": "*"
    },
    {
        "question": "Which of the following is a valid variable name?",
        "options": [
            "2variable",
            "variable_2",
            "variable-2",
            "variable 2"
        ],
        "answer": "variable_2"
    },
    {
        "question": "What does the '==' operator check in Python?",
        "options": [
            "Object identity",
            "Equality of values",
            "Data type",
            "Memory address"
        ],
        "answer": "Equality of values"
    },
    {
        "question": "In the assignment x = y = 20, what value does x get?",
        "options": [
            "None",
            "0",
            "20",
            "Error"
        ],
        "answer": "20"
    },
    {
        "question": "Which operator would you use to add two numeric values and update a variable?",
        "options": [
            "+=",
            "++",
            "==",
            "--"
        ],
        "answer": "+="
    },
    {
        "question": "What does type(3.0) return in Python?",
        "options": [
            "<class 'int'>",
            "<class 'float'>",
            "<class 'complex'>",
            "<class 'str'>"
        ],
        "answer": "<class 'float'>"
    },
    {
        "question": "Which literal correctly represents a complex number in Python?",
        "options": [
            "3+4i",
            "3+4j",
            "3+4",
            "None of the above"
        ],
        "answer": "3+4j"
    },
    {
        "question": "What does type(True) output?",
        "options": [
            "<class 'bool'>",
            "<class 'int'>",
            "<class 'boolean'>",
            "<class 'str'>"
        ],
        "answer": "<class 'bool'>"
    },
    {
        "question": "Which function converts a value to an integer?",
        "options": [
            "int()",
            "str()",
            "float()",
            "bool()"
        ],
        "answer": "int()"
    },
    {
        "question": "Which of the following is a proper floating-point literal in Python?",
        "options": [
            "10",
            "10.0",
            "10j",
            "'10.0'"
        ],
        "answer": "10.0"
    },
    {
        "question": "What is the result of complex(2, -3) in Python?",
        "options": [
            "2-3j",
            "2+3j",
            "Error",
            "2-(-3)j"
        ],
        "answer": "2-3j"
    },
    {
        "question": "Which built-in function converts a value into a string?",
        "options": [
            "str()",
            "int()",
            "list()",
            "repr()"
        ],
        "answer": "str()"
    },
    {
        "question": "What is the output of float('3.14')?",
        "options": [
            "3",
            "3.14",
            "Error",
            "3.140"
        ],
        "answer": "3.14"
    },
    {
        "question": "What does round(5.678, 2) return in Python?",
        "options": [
            "5.67",
            "5.68",
            "5.7",
            "5.678"
        ],
        "answer": "5.68"
    },
    {
        "question": "What is the output type of the expression 5 // 2?",
        "options": [
            "<class 'int'>",
            "<class 'float'>",
            "<class 'complex'>",
            "None"
        ],
        "answer": "<class 'int'>"
    },
    {
        "question": "Among '+', '*' and '**', which operator is applied first in an expression?",
        "options": [
            "'+'",
            "'*'",
            "'**'",
            "They are equal"
        ],
        "answer": "'**'"
    },
    {
        "question": "What is the result of the expression 2 ** 3 ** 2?",
        "options": [
            "64",
            "512",
            "256",
            "None"
        ],
        "answer": "512"
    },
    {
        "question": "Which operator is evaluated with right-to-left associativity?",
        "options": [
            "'+'",
            "'-'",
            "'*'",
            "'**'"
        ],
        "answer": "'**'"
    },
    {
        "question": "Evaluate: 8 - 4 - 2. What is the correct result?",
        "options": [
            "2",
            "4",
            "6",
            "0"
        ],
        "answer": "2"
    },
    {
        "question": "How is the expression 1 + 2 * 3 parsed in Python?",
        "options": [
            "(1+2)*3",
            "1+(2*3)",
            "3+6",
            "None of the above"
        ],
        "answer": "1+(2*3)"
    },
    {
        "question": "What is the result of 20 // 3 * 3?",
        "options": [
            "18",
            "20",
            "21",
            "19"
        ],
        "answer": "18"
    },
    {
        "question": "Does Python follow left-to-right associativity for the '+' operator?",
        "options": [
            "Yes",
            "No"
        ],
        "answer": "Yes"
    },
    {
        "question": "Which construct can override the normal operator precedence?",
        "options": [
            "Brackets (parentheses)",
            "Commas",
            "Quotes",
            "None"
        ],
        "answer": "Brackets (parentheses)"
    },
    {
        "question": "If a = 5 and b = 10, what is the result of evaluating 5 + b / a?",
        "options": [
            "7",
            "7.0",
            "3",
            "Error"
        ],
        "answer": "7.0"
    },
    {
        "question": "How does the precedence of 'not' compare to 'and'?",
        "options": [
            "'not' has higher precedence",
            "'not' has lower precedence",
            "They are equal",
            "Depends on operands"
        ],
        "answer": "'not' has higher precedence"
    },
    {
        "question": "What is the result of 10 | 4 in Python?",
        "options": [
            "14",
            "10",
            "4",
            "6"
        ],
        "answer": "14"
    },
    {
        "question": "What does the expression 3 << 2 evaluate to?",
        "options": [
            "12",
            "6",
            "8",
            "3"
        ],
        "answer": "12"
    },
    {
        "question": "Which numeric value is considered True by default in a Boolean context?",
        "options": [
            "0",
            "False",
            "1",
            "None"
        ],
        "answer": "1"
    },
    {
        "question": "What is the boolean value of 0?",
        "options": [
            "True",
            "False",
            "0",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "What operation does the '^' operator perform on integers?",
        "options": [
            "Bitwise OR",
            "Bitwise AND",
            "Bitwise XOR",
            "Bitwise NOT"
        ],
        "answer": "Bitwise XOR"
    },
    {
        "question": "If a = 7 (binary 111) and b = 2 (binary 010), what is the result of a & b?",
        "options": [
            "2",
            "0",
            "7",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "What is the value of ~0 in Python?",
        "options": [
            "0",
            "-1",
            "1",
            "Error"
        ],
        "answer": "-1"
    },
    {
        "question": "Which of the following is a boolean operator?",
        "options": [
            "&",
            "or",
            "~",
            ">>"
        ],
        "answer": "or"
    },
    {
        "question": "What is the result of the expression: True or False and False?",
        "options": [
            "False",
            "True",
            "Error",
            "None"
        ],
        "answer": "True"
    },
    {
        "question": "How is an empty list evaluated in a boolean context?",
        "options": [
            "True",
            "False",
            "None",
            "Depends"
        ],
        "answer": "False"
    },
    {
        "question": "What is the primary purpose of a decorator in Python?",
        "options": [
            "To enhance or modify functions",
            "To format strings",
            "To compile code",
            "To define classes"
        ],
        "answer": "To enhance or modify functions"
    },
    {
        "question": "Which of the following is not a valid formatting method in Python?",
        "options": [
            "Percent (%) formatting",
            "f-string formatting",
            "Template formatting",
            "C++ style formatting"
        ],
        "answer": "C++ style formatting"
    },
    {
        "question": "What does the term f-string stand for?",
        "options": [
            "Fast string",
            "Formatted string literal",
            "Function string",
            "Fixed string"
        ],
        "answer": "Formatted string literal"
    },
    {
        "question": "Which module provides the Template class for string substitution?",
        "options": [
            "template",
            "format",
            "string",
            "re"
        ],
        "answer": "string"
    },
    {
        "question": "What is the effect of the format specifier ':.3f'?",
        "options": [
            "Rounds a float to 3 decimal places",
            "Limits a string to 3 characters",
            "Formats an integer",
            "None"
        ],
        "answer": "Rounds a float to 3 decimal places"
    },
    {
        "question": "Which decorator from functools helps preserve original function metadata?",
        "options": [
            "@cache",
            "@lru_cache",
            "@wraps",
            "@partial"
        ],
        "answer": "@wraps"
    },
    {
        "question": "What is the output of: print(f'{4 * 3}')?",
        "options": [
            "43",
            "4 * 3",
            "12",
            "Error"
        ],
        "answer": "12"
    },
    {
        "question": "How do you apply a decorator to a function?",
        "options": [
            "By placing it above the function definition with @",
            "By calling it inside the function",
            "By wrapping the function call",
            "None of these"
        ],
        "answer": "By placing it above the function definition with @"
    },
    {
        "question": "What is the purpose of the __format__() method in a class?",
        "options": [
            "To provide customized string formatting",
            "To convert an object to a string",
            "To override the print() function",
            "To compare objects"
        ],
        "answer": "To provide customized string formatting"
    },
    {
        "question": "Which of the following is not a standard format specifier in Python f-strings?",
        "options": [
            "d",
            "s",
            "x",
            "i"
        ],
        "answer": "i"
    },
    {
        "question": "Which loop is typically used for indefinite iteration in Python?",
        "options": [
            "for",
            "while",
            "do-while",
            "repeat"
        ],
        "answer": "while"
    },
    {
        "question": "What does the following code print? \n\nfor i in range(3):\n    print(i)",
        "options": [
            "0 1 2",
            "1 2 3",
            "0 1 2 3",
            "Error"
        ],
        "answer": "0 1 2"
    },
    {
        "question": "How do you prematurely exit a loop in Python?",
        "options": [
            "stop",
            "exit",
            "break",
            "terminate"
        ],
        "answer": "break"
    },
    {
        "question": "Which keyword skips the current iteration of a loop?",
        "options": [
            "skip",
            "continue",
            "pass",
            "next"
        ],
        "answer": "continue"
    },
    {
        "question": "When iterating directly over a dictionary, what is returned?",
        "options": [
            "Values",
            "Keys",
            "Key-value pairs",
            "Indices"
        ],
        "answer": "Keys"
    },
    {
        "question": "Which built-in function is used to access both index and value when iterating?",
        "options": [
            "zip()",
            "enumerate()",
            "range()",
            "index()"
        ],
        "answer": "enumerate()"
    },
    {
        "question": "What is the default starting index for range(n) in Python?",
        "options": [
            "0",
            "1",
            "n",
            "Depends on n"
        ],
        "answer": "0"
    },
    {
        "question": "How can you create an infinite loop in Python?",
        "options": [
            "while True:",
            "for i in range(inf):",
            "while 1==0:",
            "for i in ():"
        ],
        "answer": "while True:"
    },
    {
        "question": "What does the else clause in a loop do?",
        "options": [
            "Executes when the loop condition is false",
            "Executes if the loop exits normally",
            "Executes only when break is used",
            "Never executes"
        ],
        "answer": "Executes if the loop exits normally"
    },
    {
        "question": "Which keyword acts as a no-operation placeholder inside loops?",
        "options": [
            "pass",
            "skip",
            "continue",
            "break"
        ],
        "answer": "pass"
    },
    {
        "question": "How do you escape a double quote inside a double-quoted string?",
        "options": [
            "Use \\\" inside the string",
            "Use two double quotes",
            "Use a single quote",
            "No escape needed"
        ],
        "answer": "Use \\\" inside the string"
    },
    {
        "question": "Which string method capitalizes only the first character of a string?",
        "options": [
            "title()",
            "upper()",
            "capitalize()",
            "swapcase()"
        ],
        "answer": "capitalize()"
    },
    {
        "question": "What is the output of 'abc'.upper()?",
        "options": [
            "ABC",
            "abc",
            "Abc",
            "Error"
        ],
        "answer": "ABC"
    },
    {
        "question": "How can you locate the substring 'cat' in 'concatenate'?",
        "options": [
            "'concatenate'.find('cat')",
            "'concatenate'.index('cat')",
            "Both A and B",
            "None of these"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What does the split() method do with a string?",
        "options": [
            "Splits the string into a list of substrings",
            "Combines strings",
            "Reverses the string",
            "Deletes whitespace"
        ],
        "answer": "Splits the string into a list of substrings"
    },
    {
        "question": "How do you concatenate two strings 'hello' and 'world' with a space between them?",
        "options": [
            "'hello' + ' ' + 'world'",
            "'hello' * 'world'",
            "'hello' join 'world'",
            "concat('hello', 'world')"
        ],
        "answer": "'hello' + ' ' + 'world'"
    },
    {
        "question": "What is the result of len('python')?",
        "options": [
            "5",
            "6",
            "7",
            "Error"
        ],
        "answer": "6"
    },
    {
        "question": "Which slicing syntax reverses a string?",
        "options": [
            "s[::-1]",
            "s[:]",
            "s.reverse()",
            "reversed(s)"
        ],
        "answer": "s[::-1]"
    },
    {
        "question": "What does the strip() method do?",
        "options": [
            "Removes whitespace from both ends of a string",
            "Removes all whitespace",
            "Splits the string",
            "Converts to lowercase"
        ],
        "answer": "Removes whitespace from both ends of a string"
    },
    {
        "question": "Which method checks if all characters in a string are alphabetic?",
        "options": [
            "isalpha()",
            "isalnum()",
            "isdigit()",
            "islower()"
        ],
        "answer": "isalpha()"
    },
    {
        "question": "Which method appends an item to the end of a list?",
        "options": [
            "append()",
            "insert()",
            "extend()",
            "push()"
        ],
        "answer": "append()"
    },
    {
        "question": "How can you remove the element at index 2 from a list named items?",
        "options": [
            "items.pop(2)",
            "items.remove(2)",
            "del items[2]",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "What does the slice lst[1:3] return?",
        "options": [
            "Elements at index 1 and 2",
            "Elements at index 1, 2, and 3",
            "Elements from index 0 to 3",
            "Only index 1"
        ],
        "answer": "Elements at index 1 and 2"
    },
    {
        "question": "Which built-in function returns a new sorted list from an iterable?",
        "options": [
            "sorted()",
            "sort()",
            "reverse()",
            "order()"
        ],
        "answer": "sorted()"
    },
    {
        "question": "What is the result of [1, 2] + [3, 4]?",
        "options": [
            "[1, 2, 3, 4]",
            "[4, 6]",
            "Error",
            "[1,2]+[3,4]"
        ],
        "answer": "[1, 2, 3, 4]"
    },
    {
        "question": "How do you find the index of element 5 in a list named lst?",
        "options": [
            "lst.find(5)",
            "lst.index(5)",
            "lst.search(5)",
            "None"
        ],
        "answer": "lst.index(5)"
    },
    {
        "question": "Which method reverses a list in place?",
        "options": [
            "reverse()",
            "reversed()",
            "flip()",
            "inverse()"
        ],
        "answer": "reverse()"
    },
    {
        "question": "What is the length of the list [1, [2, 3], 4]?",
        "options": [
            "2",
            "3",
            "4",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "How can you create a shallow copy of a list?",
        "options": [
            "lst.copy()",
            "lst[:]",
            "list(lst)",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "question": "What is the output of [1, 2] * 3?",
        "options": [
            "[1, 2, 1, 2, 1, 2]",
            "[3, 6]",
            "Error",
            "[1,2,3]"
        ],
        "answer": "[1, 2, 1, 2, 1, 2]"
    },
    {
        "question": "How do you create a list of even numbers from 0 to 9 using list comprehension?",
        "options": [
            "[x for x in range(10) if x % 2 == 0]",
            "[x for x in range(10) if x % 2 != 0]",
            "[x%2==0 for x in range(10)]",
            "None"
        ],
        "answer": "[x for x in range(10) if x % 2 == 0]"
    },
    {
        "question": "In a list comprehension, which part specifies the output expression?",
        "options": [
            "The part before the for",
            "The for clause",
            "The if clause",
            "None"
        ],
        "answer": "The part before the for"
    },
    {
        "question": "What is the result of [x * 3 for x in [1, 2, 3]]?",
        "options": [
            "[3, 6, 9]",
            "[1, 2, 3]",
            "[1, 6, 9]",
            "Error"
        ],
        "answer": "[3, 6, 9]"
    },
    {
        "question": "Can list comprehensions be nested in Python?",
        "options": [
            "Yes",
            "No",
            "Only one level",
            "Depends on the data"
        ],
        "answer": "Yes"
    },
    {
        "question": "What does the expression [x for x in []] produce?",
        "options": [
            "[]",
            "[None]",
            "Error",
            "[0]"
        ],
        "answer": "[]"
    },
    {
        "question": "Which syntax correctly filters odd numbers using list comprehension?",
        "options": [
            "[x for x in range(10) if x % 2 != 0]",
            "[x for x in range(10) if not x % 2 == 0]",
            "[x for x in range(10) if x % 2 == 1]",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "question": "How can you flatten a list of lists using a list comprehension?",
        "options": [
            "[y for x in list_of_lists for y in x]",
            "sum(list_of_lists, [])",
            "[x for x in list_of_lists]",
            "None"
        ],
        "answer": "[y for x in list_of_lists for y in x]"
    },
    {
        "question": "What is the result of [x for x in range(5) if x > 2]?",
        "options": [
            "[3, 4]",
            "[2, 3, 4]",
            "[3, 4, 5]",
            "Error"
        ],
        "answer": "[3, 4]"
    },
    {
        "question": "How do you include an else clause in a list comprehension?",
        "options": [
            "[x if condition else y for x in iterable]",
            "for x in iterable if condition else y",
            "Not possible",
            "None"
        ],
        "answer": "[x if condition else y for x in iterable]"
    },
    {
        "question": "What is achieved by [str(x) for x in range(3)]?",
        "options": [
            "Converts numbers 0, 1, 2 to strings",
            "Creates a list of string numbers",
            "Both A and B",
            "None"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What happens when you write (5) in Python?",
        "options": [
            "It creates a tuple",
            "It is interpreted as an integer",
            "It creates a list",
            "Syntax error"
        ],
        "answer": "It is interpreted as an integer"
    },
    {
        "question": "How do you correctly define an empty tuple?",
        "options": [
            "[]",
            "()",
            "{}",
            "<>"
        ],
        "answer": "()"
    },
    {
        "question": "Can the elements of a tuple be modified after its creation?",
        "options": [
            "Yes",
            "No",
            "Only if they are mutable",
            "Only with special methods"
        ],
        "answer": "No"
    },
    {
        "question": "How do you access the last element in a tuple named tup?",
        "options": [
            "tup[-1]",
            "tup[last]",
            "tup[len(tup)]",
            "tup[1]"
        ],
        "answer": "tup[-1]"
    },
    {
        "question": "What is the value of len((1, 2, 3, 4, 5))?",
        "options": [
            "5",
            "4",
            "1",
            "Error"
        ],
        "answer": "5"
    },
    {
        "question": "Which function converts a tuple into a list?",
        "options": [
            "list()",
            "tuple()",
            "convert()",
            "str()"
        ],
        "answer": "list()"
    },
    {
        "question": "What type is an empty tuple?",
        "options": [
            "tuple",
            "list",
            "dict",
            "set"
        ],
        "answer": "tuple"
    },
    {
        "question": "What is the result of (1, 2) + (3, 4)?",
        "options": [
            "(1, 2, 3, 4)",
            "Error",
            "6",
            "None"
        ],
        "answer": "(1, 2, 3, 4)"
    },
    {
        "question": "Can tuples contain elements of different data types?",
        "options": [
            "Yes",
            "No",
            "Only numbers",
            "Only strings"
        ],
        "answer": "Yes"
    },
    {
        "question": "Which method counts the occurrences of a value in a tuple?",
        "options": [
            "count()",
            "index()",
            "find()",
            "search()"
        ],
        "answer": "count()"
    },
    {
        "question": "What is the primary characteristic of a set in Python?",
        "options": [
            "Ordered collection",
            "Immutable collection",
            "Unordered collection with unique elements",
            "Collection with duplicates"
        ],
        "answer": "Unordered collection with unique elements"
    },
    {
        "question": "How do you convert a list with duplicate items into a set?",
        "options": [
            "set(list)",
            "list(set)",
            "tuple(list)",
            "dict(list)"
        ],
        "answer": "set(list)"
    },
    {
        "question": "What is the output of len({1, 2, 2, 3})?",
        "options": [
            "3",
            "4",
            "2",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which operator is used to check if an element exists in a set?",
        "options": [
            "contains()",
            "in",
            "exists()",
            "check()"
        ],
        "answer": "in"
    },
    {
        "question": "How do you add an element '5' to a set named s?",
        "options": [
            "s.append(5)",
            "s.insert(5)",
            "s.add(5)",
            "s.update(5)"
        ],
        "answer": "s.add(5)"
    },
    {
        "question": "What does {1, 2, 3} & {2, 3, 4} return?",
        "options": [
            "{1, 4}",
            "{2, 3}",
            "{1, 2, 3, 4}",
            "Error"
        ],
        "answer": "{2, 3}"
    },
    {
        "question": "Which operator performs the union of two sets?",
        "options": [
            "|",
            "&",
            "^",
            "-"
        ],
        "answer": "|"
    },
    {
        "question": "Which method removes an element from a set without raising an error if the element is not found?",
        "options": [
            "remove()",
            "discard()",
            "pop()",
            "delete()"
        ],
        "answer": "discard()"
    },
    {
        "question": "How do you check if one set is a subset of another?",
        "options": [
            "issubset()",
            "subset()",
            "in",
            "contains()"
        ],
        "answer": "issubset()"
    },
    {
        "question": "How do you check if a key 'k' exists in a dictionary 'd'?",
        "options": [
            "'k' in d",
            "d.has_key('k')",
            "d.contains('k')",
            "key('k')"
        ],
        "answer": "'k' in d"
    },
    {
        "question": "What does the method d.items() return?",
        "options": [
            "A list of keys",
            "A list of values",
            "A view object of key-value pairs",
            "A tuple of keys and values"
        ],
        "answer": "A view object of key-value pairs"
    },
    {
        "question": "Before Python 3.6, how were dictionary keys ordered?",
        "options": [
            "Insertion order",
            "Sorted order",
            "Arbitrary order",
            "Reverse order"
        ],
        "answer": "Arbitrary order"
    },
    {
        "question": "Which method removes and returns an arbitrary (key, value) pair?",
        "options": [
            "pop()",
            "popitem()",
            "remove()",
            "delete()"
        ],
        "answer": "popitem()"
    },
    {
        "question": "How do you create a shallow copy of a dictionary?",
        "options": [
            "Using d.copy()",
            "Using dict(d)",
            "Both A and B",
            "Neither"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What type of object is returned by d.keys() in Python 3?",
        "options": [
            "List",
            "Tuple",
            "dict_keys view",
            "Set"
        ],
        "answer": "dict_keys view"
    },
    {
        "question": "Which operation merges dictionary d2 into dictionary d1?",
        "options": [
            "d1 + d2",
            "d1.merge(d2)",
            "d1.update(d2)",
            "d1.append(d2)"
        ],
        "answer": "d1.update(d2)"
    },
    {
        "question": "What is the output of {'a': 1, 'b': 2}.get('c', 3)?",
        "options": [
            "None",
            "KeyError",
            "3",
            "0"
        ],
        "answer": "3"
    },
    {
        "question": "What happens when you try to access a non-existent key using bracket notation?",
        "options": [
            "Returns None",
            "Raises a KeyError",
            "Returns an empty string",
            "Creates the key automatically"
        ],
        "answer": "Raises a KeyError"
    },
    {
        "question": "Which method sets a default value for a key if it doesn’t exist?",
        "options": [
            "setdefault()",
            "default()",
            "getdefault()",
            "assignifabsent()"
        ],
        "answer": "setdefault()"
    },
    {
        "question": "What does the sorted() function do?",
        "options": [
            "Sorts an iterable in-place",
            "Returns a new sorted list from an iterable",
            "Sorts only dictionaries",
            "Returns an iterator in sorted order"
        ],
        "answer": "Returns a new sorted list from an iterable"
    },
    {
        "question": "Which function returns the absolute value of a number?",
        "options": [
            "abs()",
            "mod()",
            "absolute()",
            "fabs()"
        ],
        "answer": "abs()"
    },
    {
        "question": "What does the divmod(a, b) function return?",
        "options": [
            "The division result",
            "A tuple containing the quotient and remainder",
            "Only the quotient",
            "Only the remainder"
        ],
        "answer": "A tuple containing the quotient and remainder"
    },
    {
        "question": "Which function returns an iterator for the given iterable?",
        "options": [
            "iter()",
            "range()",
            "enumerate()",
            "next()"
        ],
        "answer": "iter()"
    },
    {
        "question": "Which built-in function converts an integer to its hexadecimal representation?",
        "options": [
            "hex()",
            "bin()",
            "oct()",
            "format()"
        ],
        "answer": "hex()"
    },
    {
        "question": "Which function returns the Unicode character for a given code point?",
        "options": [
            "chr()",
            "ord()",
            "unicode()",
            "code()"
        ],
        "answer": "chr()"
    },
    {
        "question": "What does the id() function return?",
        "options": [
            "The type of an object",
            "A unique identifier for an object",
            "The memory size of an object",
            "The object's string representation"
        ],
        "answer": "A unique identifier for an object"
    },
    {
        "question": "Which built-in function returns the maximum element in an iterable?",
        "options": [
            "max()",
            "min()",
            "largest()",
            "upper()"
        ],
        "answer": "max()"
    },
    {
        "question": "Which function can interpret a string as a Python expression?",
        "options": [
            "eval()",
            "exec()",
            "parse()",
            "compile()"
        ],
        "answer": "eval()"
    },
    {
        "question": "Which function converts any object to its string representation?",
        "options": [
            "str()",
            "repr()",
            "format()",
            "to_string()"
        ],
        "answer": "str()"
    },
    {
        "question": "What is a nested function in Python?",
        "options": [
            "A function defined inside another function",
            "A function with multiple return values",
            "A function that calls itself",
            "A lambda function"
        ],
        "answer": "A function defined inside another function"
    },
    {
        "question": "How do you specify a default parameter value in a function definition?",
        "options": [
            "def func(a=5):",
            "def func(a==5):",
            "def func(a:5):",
            "def func(a+5):"
        ],
        "answer": "def func(a=5):"
    },
    {
        "question": "Can functions be passed as arguments to other functions in Python?",
        "options": [
            "Yes",
            "No",
            "Only if defined as lambda",
            "Only with decorators"
        ],
        "answer": "Yes"
    },
    {
        "question": "What is a higher-order function?",
        "options": [
            "A function that takes one or more functions as arguments or returns a function",
            "A function defined after the main function",
            "A function with more than two parameters",
            "A function that calls itself recursively"
        ],
        "answer": "A function that takes one or more functions as arguments or returns a function"
    },
    {
        "question": "What is the purpose of a docstring in a Python function?",
        "options": [
            "To document the purpose and usage of the function",
            "To define default parameters",
            "To execute when the function is called",
            "To format the output of the function"
        ],
        "answer": "To document the purpose and usage of the function"
    },
    {
        "question": "Which keyword is used to indicate that a function is a generator?",
        "options": [
            "yield",
            "return",
            "generate",
            "iter"
        ],
        "answer": "yield"
    },
    {
        "question": "Can a Python function return another function?",
        "options": [
            "Yes",
            "No",
            "Only in lambda",
            "Only with decorators"
        ],
        "answer": "Yes"
    },
    {
        "question": "How do you denote that a function accepts an arbitrary number of keyword arguments?",
        "options": [
            "*args",
            "**kwargs",
            "#kwargs",
            "&kwargs"
        ],
        "answer": "**kwargs"
    },
    {
        "question": "What is function introspection in Python?",
        "options": [
            "Examining a function/s attributes, such as its name and docstring, at runtime",
            "Modifying a function/s code at runtime",
            "Encrypting a function for security",
            "Automatically generating code from a function"
        ],
        "answer": "Examining a function’s attributes, such as its name and docstring, at runtime"
    },
    {
        "question": "Which built-in function can you use to list an object’s attributes, including those of a function?",
        "options": [
            "dir()",
            "help()",
            "vars()",
            "attributes()"
        ],
        "answer": "dir()"
    },
    {
        "question": "When you pass a mutable object as an argument, what can happen inside the function?",
        "options": [
            "The original object remains unchanged",
            "The object can be modified in place",
            "A copy is created automatically",
            "It always raises an error"
        ],
        "answer": "The object can be modified in place"
    },
    {
        "question": "What does 'pass-by-object-reference' mean in Python?",
        "options": [
            "A copy of the object is passed to the function",
            "A reference to the object is passed, but the reference is passed by value",
            "Only immutable objects are passed",
            "Arguments are passed as key-value pairs"
        ],
        "answer": "A reference to the object is passed, but the reference is passed by value"
    },
    {
        "question": "What is the key difference between mutable and immutable objects when passed to functions?",
        "options": [
            "Mutable objects can be altered in place; immutable objects cannot",
            "Immutable objects cause errors when passed",
            "Mutable objects are always copied before passing",
            "There is no difference"
        ],
        "answer": "Mutable objects can be altered in place; immutable objects cannot"
    },
    {
        "question": "Which keyword is used to modify a global variable inside a function?",
        "options": [
            "global",
            "nonlocal",
            "extern",
            "public"
        ],
        "answer": "global"
    },
    {
        "question": "What is a recursive function?",
        "options": [
            "A function that repeatedly calls another function",
            "A function that calls itself",
            "A function defined inside a loop",
            "A function that never returns"
        ],
        "answer": "A function that calls itself"
    },
    {
        "question": "What is the base case in recursion?",
        "options": [
            "The initial call to the recursive function",
            "A condition where the recursion terminates",
            "The recursive call itself",
            "There is no base case in recursion"
        ],
        "answer": "A condition where the recursion terminates"
    },
    {
        "question": "What risk does missing a base case in a recursive function present?",
        "options": [
            "Syntax error",
            "Stack overflow due to infinite recursion",
            "Immediate termination",
            "TypeError"
        ],
        "answer": "Stack overflow due to infinite recursion"
    },
    {
        "question": "What does sys.getrecursionlimit() return?",
        "options": [
            "The current depth of recursion",
            "The maximum allowed recursion depth",
            "The number of recursive calls made",
            "None of the above"
        ],
        "answer": "The maximum allowed recursion depth"
    },
    {
        "question": "What is tail recursion optimization?",
        "options": [
            "An optimization that reuses stack frames for recursive calls when the recursive call is the last operation",
            "A method to avoid recursion entirely",
            "An error handling technique",
            "A way to count recursive calls"
        ],
        "answer": "An optimization that reuses stack frames for recursive calls when the recursive call is the last operation"
    },
    {
        "question": "Can a function modify a global immutable variable without using the global keyword?",
        "options": [
            "Yes, by changing its value directly",
            "No, immutable globals cannot be reassigned without 'global'",
            "Yes, but only in recursion",
            "No, functions cannot access globals at all"
        ],
        "answer": "No, immutable globals cannot be reassigned without 'global'"
    },
    {
        "question": "Which built-in function applies a given function to every item of an iterable?",
        "options": [
            "filter()",
            "map()",
            "reduce()",
            "zip()"
        ],
        "answer": "map()"
    },
    {
        "question": "What does the filter() function return in Python 3?",
        "options": [
            "A list of filtered items",
            "An iterator over the filtered items",
            "A tuple of items",
            "A dictionary of items"
        ],
        "answer": "An iterator over the filtered items"
    },
    {
        "question": "What is the primary purpose of the reduce() function?",
        "options": [
            "To apply a rolling computation to sequential pairs of values in an iterable",
            "To filter elements of an iterable",
            "To concatenate elements",
            "To sort an iterable"
        ],
        "answer": "To apply a rolling computation to sequential pairs of values in an iterable"
    },
    {
        "question": "Which module must be imported to use reduce() in Python 3?",
        "options": [
            "itertools",
            "functools",
            "operator",
            "collections"
        ],
        "answer": "functools"
    },
    {
        "question": "What does the zip() function do?",
        "options": [
            "Combines elements from multiple iterables into tuples",
            "Filters elements from an iterable",
            "Reduces an iterable to a single value",
            "Maps a function over an iterable"
        ],
        "answer": "Combines elements from multiple iterables into tuples"
    },
    {
        "question": "How can you convert the result of map() into a list?",
        "options": [
            "Using the list() function",
            "Using the dict() function",
            "Using join()",
            "It is automatically a list"
        ],
        "answer": "Using the list() function"
    },
    {
        "question": "What is a common use case for lambda functions in mapping operations?",
        "options": [
            "To create full-fledged function definitions",
            "To provide short, anonymous functions for map() or filter()",
            "To optimize memory usage",
            "To replace recursion"
        ],
        "answer": "To provide short, anonymous functions for map() or filter()"
    },
    {
        "question": "How do you perform element-wise addition of two lists using map()?",
        "options": [
            "map(lambda x, y: x + y, list1, list2)",
            "map(add, list1, list2)",
            "Both A and B",
            "None of the above"
        ],
        "answer": "map(lambda x, y: x + y, list1, list2)"
    },
    {
        "question": "Which mapping function can combine multiple iterables element-wise?",
        "options": [
            "map()",
            "filter()",
            "zip()",
            "reduce()"
        ],
        "answer": "zip()"
    },
    {
        "question": "What is one advantage of using list comprehensions over map() for simple transformations?",
        "options": [
            "Better performance",
            "More concise and readable syntax",
            "They automatically filter elements",
            "They always return a list"
        ],
        "answer": "More concise and readable syntax"
    },
    {
        "question": "What file extension is used for a Python module?",
        "options": [
            ".py",
            ".pym",
            ".pyo",
            ".pyc"
        ],
        "answer": ".py"
    },
    {
        "question": "What is a Python package?",
        "options": [
            "A single Python file containing code",
            "A collection of Python modules organized in directories",
            "A compiled Python module",
            "A Python interpreter"
        ],
        "answer": "A collection of Python modules organized in directories"
    },
    {
        "question": "How can you import a module with an alias?",
        "options": [
            "import module as alias",
            "include module alias",
            "using module alias",
            "module alias = import module"
        ],
        "answer": "import module as alias"
    },
    {
        "question": "What does the statement 'from module import *' do?",
        "options": [
            "Imports only the functions",
            "Imports all public names from the module",
            "Creates a new module",
            "Imports sub-modules only"
        ],
        "answer": "Imports all public names from the module"
    },
    {
        "question": "Which built-in attribute holds the name of the current module?",
        "options": [
            "__name__",
            "__file__",
            "__doc__",
            "__package__"
        ],
        "answer": "__name__"
    },
    {
        "question": "How can you view the list of directories where Python searches for modules?",
        "options": [
            "By printing sys.path",
            "By using os.listdir()",
            "By printing __path__",
            "By calling module.find()"
        ],
        "answer": "By printing sys.path"
    },
    {
        "question": "What is the role of the __init__.py file in a package?",
        "options": [
            "It initializes the package and can execute package initialization code",
            "It defines the main module",
            "It lists all modules in the package",
            "It compiles the package"
        ],
        "answer": "It initializes the package and can execute package initialization code"
    },
    {
        "question": "Which module can be used for programmatically importing modules?",
        "options": [
            "importlib",
            "os",
            "sys",
            "types"
        ],
        "answer": "importlib"
    },
    {
        "question": "What does help(module) do in Python?",
        "options": [
            "Runs the module",
            "Displays the documentation for the module",
            "Compiles the module",
            "Imports the module"
        ],
        "answer": "Displays the documentation for the module"
    },
    {
        "question": "How can you reload an already imported module?",
        "options": [
            "Using importlib.reload(module)",
            "Using module.reload()",
            "Using reload(module)",
            "It cannot be reloaded"
        ],
        "answer": "Using importlib.reload(module)"
    },
    {
        "question": "Which function compiles a regular expression pattern for reuse?",
        "options": [
            "re.compile()",
            "re.build()",
            "re.create()",
            "regex()"
        ],
        "answer": "re.compile()"
    },
    {
        "question": "What does the '^' symbol denote in a regex pattern?",
        "options": [
            "End of the string",
            "Start of the string",
            "Any single character",
            "Zero or more occurrences"
        ],
        "answer": "Start of the string"
    },
    {
        "question": "What does the '$' symbol match in regular expressions?",
        "options": [
            "The beginning of the string",
            "The end of the string",
            "A literal dollar sign",
            "Any whitespace character"
        ],
        "answer": "The end of the string"
    },
    {
        "question": "Which function returns an iterator yielding match objects over all non-overlapping matches?",
        "options": [
            "re.finditer()",
            "re.findall()",
            "re.search()",
            "re.match()"
        ],
        "answer": "re.finditer()"
    },
    {
        "question": "What is the purpose of the re.sub() function?",
        "options": [
            "To split a string by a regex pattern",
            "To find all matches of a pattern",
            "To replace parts of a string that match a regex pattern",
            "To compile a regex pattern"
        ],
        "answer": "To replace parts of a string that match a regex pattern"
    },
    {
        "question": "What does the character class [0-9] match?",
        "options": [
            "Any letter from a to z",
            "Any digit between 0 and 9",
            "Only the number 0",
            "Any alphanumeric character"
        ],
        "answer": "Any digit between 0 and 9"
    },
    {
        "question": "What does the '?' quantifier do in a regex pattern?",
        "options": [
            "Matches one or more occurrences",
            "Matches zero or one occurrence of the preceding element",
            "Matches zero or more occurrences",
            "Matches exactly one occurrence"
        ],
        "answer": "Matches zero or one occurrence of the preceding element"
    },
    {
        "question": "Which flag makes regex matching case-insensitive?",
        "options": [
            "re.IGNORECASE",
            "re.I",
            "Both A and B",
            "None"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "How do you escape a metacharacter in a regex pattern?",
        "options": [
            "By placing a backslash (\\) before it",
            "By placing it inside square brackets",
            "By doubling the character",
            "By placing it at the end of the pattern"
        ],
        "answer": "By placing a backslash (\\) before it"
    },
    {
        "question": "What does the '\\b' escape sequence represent in regex?",
        "options": [
            "A backspace character",
            "A word boundary",
            "A literal 'b'",
            "A binary digit"
        ],
        "answer": "A word boundary"
    },
    {
        "question": "Which file mode allows you to both read and write to a file?",
        "options": [
            "r+",
            "w+",
            "a+",
            "All of the above"
        ],
        "answer": "r+"
    },
    {
        "question": "What is the default mode when using open() if no mode is specified?",
        "options": [
            "r",
            "w",
            "a",
            "rb"
        ],
        "answer": "r"
    },
    {
        "question": "Which method reads all lines of a file and returns them as a list?",
        "options": [
            "read()",
            "readline()",
            "readlines()",
            "fetchlines()"
        ],
        "answer": "readlines()"
    },
    {
        "question": "What advantage does using the 'with' statement provide when handling files?",
        "options": [
            "It automatically closes the file after its block is executed",
            "It increases file read speed",
            "It supports binary mode reading",
            "It allows concurrent file access"
        ],
        "answer": "It automatically closes the file after its block is executed"
    },
    {
        "question": "What happens when you open a file in write mode ('w') that already exists?",
        "options": [
            "It appends to the file",
            "It overwrites the file",
            "It raises an error",
            "It creates a new file with a different name"
        ],
        "answer": "It overwrites the file"
    },
    {
        "question": "Which mode is used to open a file for binary writing?",
        "options": [
            "wb",
            "rb",
            "wt",
            "r+b"
        ],
        "answer": "wb"
    },
    {
        "question": "Which method writes a string to an open file?",
        "options": [
            "write()",
            "writeline()",
            "append()",
            "insert()"
        ],
        "answer": "write()"
    },
    {
        "question": "What does the close() method do for an open file?",
        "options": [
            "Flushes the buffer and closes the file",
            "Deletes the file",
            "Opens the file in read mode",
            "None of the above"
        ],
        "answer": "Flushes the buffer and closes the file"
    },
    {
        "question": "Can you open and read a binary file using open()?",
        "options": [
            "Yes, using 'rb' mode",
            "No, binary files require a special function",
            "Only on Windows",
            "Only using the io module"
        ],
        "answer": "Yes, using 'rb' mode"
    },
    {
        "question": "Which exception is raised when an attempt is made to open a non-existent file?",
        "options": [
            "IOError",
            "FileNotFoundError",
            "OSError",
            "ValueError"
        ],
        "answer": "FileNotFoundError"
    },
    {
        "question": "What is inheritance?",
        "options": [
            "A mechanism where a new class inherits attributes and methods from an existing class",
            "A method to hide class variables",
            "A method to combine two classes into one",
            "None of the above"
        ],
        "answer": "A mechanism where a new class inherits attributes and methods from an existing class"
    },
    {
        "question": "Which method is automatically invoked when a new object is instantiated?",
        "options": [
            "__new__()",
            "__init__()",
            "__call__()",
            "__create__()"
        ],
        "answer": "__init__()"
    },
    {
        "question": "How do you create an instance of a class named MyClass?",
        "options": [
            "MyClass()",
            "new MyClass()",
            "MyClass.new()",
            "create MyClass()"
        ],
        "answer": "MyClass()"
    },
    {
        "question": "What is method overriding?",
        "options": [
            "Defining multiple methods with the same name in the same class",
            "Providing a new implementation for an inherited method in a subclass",
            "Using decorators on methods",
            "None of the above"
        ],
        "answer": "Providing a new implementation for an inherited method in a subclass"
    },
    {
        "question": "Which special method is called when an object is about to be destroyed?",
        "options": [
            "__init__()",
            "__del__()",
            "__exit__()",
            "__dispose__()"
        ],
        "answer": "__del__()"
    },
    {
        "question": "How is the current instance of a class referenced inside an instance method?",
        "options": [
            "this",
            "cls",
            "self",
            "instance"
        ],
        "answer": "self"
    },
    {
        "question": "What is the purpose of a class method?",
        "options": [
            "To operate on class attributes and methods using the 'cls' parameter",
            "To operate only on object instances",
            "To override the __init__ method",
            "To define private variables"
        ],
        "answer": "To operate on class attributes and methods using the 'cls' parameter"
    },
    {
        "question": "How do you specify that a class 'Child' inherits from a class 'Parent'?",
        "options": [
            "class Child inherits Parent:",
            "class Child(Parent):",
            "def Child(Parent):",
            "class Child: Parent"
        ],
        "answer": "class Child(Parent):"
    },
    {
        "question": "Which of the following is a valid variable name?",
        "options": [
            "_var",
            "2var",
            "var-name",
            "var.name"
        ],
        "answer": "_var"
    },
    {
        "question": "What is the result of 10 + 5 * 2?",
        "options": [
            "20",
            "30",
            "15",
            "None"
        ],
        "answer": "20"
    },
    {
        "question": "Which operator is used for exponentiation?",
        "options": [
            "^",
            "**",
            "//",
            "%"
        ],
        "answer": "**"
    },
    {
        "question": "What does the // operator do?",
        "options": [
            "Floor division",
            "Modulo",
            "Exponentiation",
            "Concatenation"
        ],
        "answer": "Floor division"
    },
    {
        "question": "Which operator checks for inequality?",
        "options": [
            "!=",
            "==",
            "<>",
            "!=="
        ],
        "answer": "!="
    },
    {
        "question": "What is the output of 10 % 3?",
        "options": [
            "1",
            "3",
            "0",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "Which operator is used for string concatenation?",
        "options": [
            "&",
            "+",
            "*",
            "%"
        ],
        "answer": "+"
    },
    {
        "question": "What does the += operator do?",
        "options": [
            "Adds and assigns",
            "Subtracts and assigns",
            "Multiplies and assigns",
            "Divides and assigns"
        ],
        "answer": "Adds and assigns"
    },
    {
        "question": "Which operator is used to compare two values?",
        "options": [
            "==",
            "=",
            "!=",
            "<"
        ],
        "answer": "=="
    },
    {
        "question": "What is the result of 5 ** 2?",
        "options": [
            "10",
            "25",
            "5",
            "Error"
        ],
        "answer": "25"
    },
    {
        "question": "Which operator is used for floor division?",
        "options": [
            "//",
            "/",
            "%",
            "**"
        ],
        "answer": "//"
    },
    {
        "question": "What is the result of 15 // 4?",
        "options": [
            "3",
            "3.75",
            "4",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which operator is used for modulo?",
        "options": [
            "%",
            "//",
            "/",
            "**"
        ],
        "answer": "%"
    },
    {
        "question": "What is the result of 2 ** 3?",
        "options": [
            "6",
            "8",
            "9",
            "Error"
        ],
        "answer": "8"
    },
    {
        "question": "Which operator is used for assignment?",
        "options": [
            "=",
            "==",
            "!=",
            "<"
        ],
        "answer": "="
    },
    {
        "question": "What does the -= operator do?",
        "options": [
            "Subtracts and assigns",
            "Adds and assigns",
            "Multiplies and assigns",
            "Divides and assigns"
        ],
        "answer": "Subtracts and assigns"
    },
    {
        "question": "Which operator is used for multiplication?",
        "options": [
            "*",
            "+",
            "-",
            "/"
        ],
        "answer": "*"
    },
    {
        "question": "What is the result of 10 / 2?",
        "options": [
            "5",
            "5.0",
            "Error",
            "None"
        ],
        "answer": "5.0"
    },
    {
        "question": "Which operator is used for addition?",
        "options": [
            "+",
            "-",
            "*",
            "/"
        ],
        "answer": "+"
    },
    {
        "question": "What is the result of 10 - 3?",
        "options": [
            "7",
            "13",
            "30",
            "Error"
        ],
        "answer": "7"
    },
    {
        "question": "What is the type of 3.14?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "float"
    },
    {
        "question": "Which data type represents whole numbers?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "int"
    },
    {
        "question": "What is the result of type(1j)?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "complex"
    },
    {
        "question": "Which function converts a string to an integer?",
        "options": [
            "int()",
            "str()",
            "float()",
            "complex()"
        ],
        "answer": "int()"
    },
    {
        "question": "What is the result of float('3.14')?",
        "options": [
            "3",
            "3.14",
            "Error",
            "None"
        ],
        "answer": "3.14"
    },
    {
        "question": "Which data type represents text?",
        "options": [
            "str",
            "int",
            "float",
            "complex"
        ],
        "answer": "str"
    },
    {
        "question": "What is the result of abs(-10)?",
        "options": [
            "10",
            "-10",
            "0",
            "Error"
        ],
        "answer": "10"
    },
    {
        "question": "Which data type represents numbers with a decimal point?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "float"
    },
    {
        "question": "What is the result of round(3.14159, 2)?",
        "options": [
            "3.14",
            "3.15",
            "3.141",
            "3.1"
        ],
        "answer": "3.14"
    },
    {
        "question": "Which data type represents numbers with an imaginary part?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "complex"
    },
    {
        "question": "What is the result of type(None)?",
        "options": [
            "NoneType",
            "bool",
            "str",
            "int"
        ],
        "answer": "NoneType"
    },
    {
        "question": "Which function converts a value to a floating-point number?",
        "options": [
            "float()",
            "int()",
            "str()",
            "complex()"
        ],
        "answer": "float()"
    },
    {
        "question": "What is the result of complex(2, -3)?",
        "options": [
            "2-3j",
            "2+3j",
            "Error",
            "None"
        ],
        "answer": "2-3j"
    },
    {
        "question": "Which data type represents True or False?",
        "options": [
            "bool",
            "int",
            "str",
            "NoneType"
        ],
        "answer": "bool"
    },
    {
        "question": "What is the result of type(True)?",
        "options": [
            "bool",
            "int",
            "str",
            "NoneType"
        ],
        "answer": "bool"
    },
    {
        "question": "Which function converts a value to a string?",
        "options": [
            "str()",
            "int()",
            "float()",
            "complex()"
        ],
        "answer": "str()"
    },
    {
        "question": "What is the result of len('Python')?",
        "options": [
            "6",
            "7",
            "5",
            "Error"
        ],
        "answer": "6"
    },
    {
        "question": "Which data type represents sequences of characters?",
        "options": [
            "str",
            "list",
            "tuple",
            "dict"
        ],
        "answer": "str"
    },
    {
        "question": "What is the result of 7 // 2?",
        "options": [
            "3",
            "3.5",
            "4",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which function converts a value to a complex number?",
        "options": [
            "complex()",
            "int()",
            "float()",
            "bool()"
        ],
        "answer": "complex()"
    },
    {
        "question": "Which operator has the highest precedence in Python?",
        "options": [
            "+",
            "**",
            "*",
            "/"
        ],
        "answer": "**"
    },
    {
        "question": "What is the associativity of the '+' operator?",
        "options": [
            "Left-to-right",
            "Right-to-left",
            "None",
            "Both"
        ],
        "answer": "Left-to-right"
    },
    {
        "question": "What is the result of 2 + 3 * 4?",
        "options": [
            "20",
            "14",
            "24",
            "9"
        ],
        "answer": "14"
    },
    {
        "question": "Which operator has the lowest precedence?",
        "options": [
            "and",
            "or",
            "not",
            "=="
        ],
        "answer": "or"
    },
    {
        "question": "What is the result of not (True and False)?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "Which operator is evaluated first in the expression 3 + 4 * 2?",
        "options": [
            "+",
            "*",
            "/",
            "-"
        ],
        "answer": "*"
    },
    {
        "question": "What is the associativity of the '**' operator?",
        "options": [
            "Left-to-right",
            "Right-to-left",
            "None",
            "Both"
        ],
        "answer": "Right-to-left"
    },
    {
        "question": "What is the result of 10 / 2 + 3?",
        "options": [
            "8",
            "5",
            "13",
            "None"
        ],
        "answer": "8"
    },
    {
        "question": "Which operator has higher precedence: '*' or '+'?",
        "options": [
            "*(staric)",
            "+(plus)",
            "Both are equal",
            "None"
        ],
        "answer": "*"
    },
    {
        "question": "What is the result of 5 - 2 - 1?",
        "options": [
            "2",
            "1",
            "3",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "Which operator is evaluated last in the expression 2 ** 3 + 4?",
        "options": [
            "**",
            "+",
            "*",
            "/"
        ],
        "answer": "+"
    },
    {
        "question": "What is the result of (3 + 4) * 2?",
        "options": [
            "14",
            "7",
            "8",
            "None"
        ],
        "answer": "14"
    },
    {
        "question": "Which operator has higher precedence: 'and' or 'or'?",
        "options": [
            "and",
            "or",
            "Both are equal",
            "None"
        ],
        "answer": "and"
    },
    {
        "question": "What is the result of True or False and False?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "What is the result of 10 % 3 + 2?",
        "options": [
            "3",
            "5",
            "2",
            "None"
        ],
        "answer": "5"
    },
    {
        "question": "Which operator is evaluated first in the expression 3 ** 2 ** 2?",
        "options": [
            "**",
            "*",
            "+",
            "/"
        ],
        "answer": "**"
    },
    {
        "question": "What is the result of 4 + 18 / (9 - 3)?",
        "options": [
            "7",
            "10",
            "13",
            "None"
        ],
        "answer": "7"
    },
    {
        "question": "Which operator has higher precedence: 'not' or 'and'?",
        "options": [
            "not",
            "and",
            "Both are equal",
            "None"
        ],
        "answer": "not"
    },
    {
        "question": "What is the result of 2 ** 3 ** 2?",
        "options": [
            "64",
            "512",
            "256",
            "None"
        ],
        "answer": "512"
    },
    {
        "question": "What is the result of (2 + 3) * (4 - 1)?",
        "options": [
            "15",
            "20",
            "12",
            "None"
        ],
        "answer": "15"
    },
    {
        "question": "What is the result of 5 & 3?",
        "options": [
            "1",
            "7",
            "5",
            "3"
        ],
        "answer": "1"
    },
    {
        "question": "Which operator is used for bitwise OR?",
        "options": [
            "|",
            "&",
            "^",
            "~"
        ],
        "answer": "|"
    },
    {
        "question": "What is the result of ~5?",
        "options": [
            "-6",
            "5",
            "-5",
            "6"
        ],
        "answer": "-6"
    },
    {
        "question": "What is the result of True and False?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "Which operator is used for bitwise XOR?",
        "options": [
            "^",
            "|",
            "&",
            "~"
        ],
        "answer": "^"
    },
    {
        "question": "What is the result of 8 >> 2?",
        "options": [
            "2",
            "4",
            "8",
            "16"
        ],
        "answer": "2"
    },
    {
        "question": "Which operator is used for bitwise left shift?",
        "options": [
            "<<",
            ">>",
            "**",
            "^^"
        ],
        "answer": "<<"
    },
    {
        "question": "What is the value of not False?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "What is the result of True or False?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "What is the result of 5 | 3?",
        "options": [
            "7",
            "5",
            "3",
            "Error"
        ],
        "answer": "7"
    },
    {
        "question": "What is the result of 6 & 2?",
        "options": [
            "2",
            "6",
            "0",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "Which operator is used for bitwise NOT?",
        "options": [
            "~",
            "&",
            "|",
            "^"
        ],
        "answer": "~"
    },
    {
        "question": "What is the result of 4 ^ 2?",
        "options": [
            "6",
            "2",
            "4",
            "Error"
        ],
        "answer": "6"
    },
    {
        "question": "What is the result of 10 | 4?",
        "options": [
            "14",
            "10",
            "4",
            "Error"
        ],
        "answer": "14"
    },
    {
        "question": "What is the result of 3 << 2?",
        "options": [
            "12",
            "6",
            "8",
            "Error"
        ],
        "answer": "12"
    },
    {
        "question": "What is the result of True and not False?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "What is the result of False or True?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "What is the result of 7 & 3?",
        "options": [
            "3",
            "7",
            "1",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "What is the result of 5 ^ 2?",
        "options": [
            "7",
            "3",
            "5",
            "Error"
        ],
        "answer": "7"
    },
    {
        "question": "What is the result of not (True or False)?",
        "options": [
            "False",
            "True",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "What does the f-string syntax allow in Python?",
        "options": [
            "String formatting",
            "Looping",
            "Error handling",
            "None"
        ],
        "answer": "String formatting"
    },
    {
        "question": "Which method is used for string formatting before Python 3.6?",
        "options": [
            "format()",
            "f-string",
            "printf()",
            "concat()"
        ],
        "answer": "format()"
    },
    {
        "question": "What does the ':<10' modifier do in formatting?",
        "options": [
            "Left aligns the text",
            "Right aligns the text",
            "Centers the text",
            "None"
        ],
        "answer": "Left aligns the text"
    },
    {
        "question": "Which decorator is used to define a static method?",
        "options": [
            "@staticmethod",
            "@classmethod",
            "@property",
            "@wraps"
        ],
        "answer": "@staticmethod"
    },
    {
        "question": "What is the purpose of the @property decorator?",
        "options": [
            "To define a getter method",
            "To define a setter method",
            "To define a static method",
            "None"
        ],
        "answer": "To define a getter method"
    },
    {
        "question": "What does the ':^10' modifier do in formatting?",
        "options": [
            "Centers the text",
            "Left aligns the text",
            "Right aligns the text",
            "None"
        ],
        "answer": "Centers the text"
    },
    {
        "question": "Which module provides the Template class for string substitution?",
        "options": [
            "string",
            "re",
            "os",
            "sys"
        ],
        "answer": "string"
    },
    {
        "question": "What is the output of f'{5 * 2}'?",
        "options": [
            "10",
            "5 * 2",
            "Error",
            "None"
        ],
        "answer": "10"
    },
    {
        "question": "Which decorator is used to preserve metadata of a function?",
        "options": [
            "@wraps",
            "@staticmethod",
            "@classmethod",
            "@property"
        ],
        "answer": "@wraps"
    },
    {
        "question": "What does the ':>10' modifier do in formatting?",
        "options": [
            "Right aligns the text",
            "Left aligns the text",
            "Centers the text",
            "None"
        ],
        "answer": "Right aligns the text"
    },
    {
        "question": "What is the purpose of the __format__() method?",
        "options": [
            "To customize string formatting",
            "To convert an object to a string",
            "To compare objects",
            "None"
        ],
        "answer": "To customize string formatting"
    },
    {
        "question": "Which decorator is used to define a class method?",
        "options": [
            "@classmethod",
            "@staticmethod",
            "@property",
            "@wraps"
        ],
        "answer": "@classmethod"
    },
    {
        "question": "What does the ':,.2f' modifier do in formatting?",
        "options": [
            "Formats a number with commas and 2 decimals",
            "Formats a string",
            "Centers the text",
            "None"
        ],
        "answer": "Formats a number with commas and 2 decimals"
    },
    {
        "question": "What is the output of f'{10 / 3:.2f}'?",
        "options": [
            "3.33",
            "3.3",
            "Error",
            "None"
        ],
        "answer": "3.33"
    },
    {
        "question": "Which decorator is used to define a getter method?",
        "options": [
            "@property",
            "@staticmethod",
            "@classmethod",
            "@wraps"
        ],
        "answer": "@property"
    },
    {
        "question": "What does the ':10.2f' modifier do in formatting?",
        "options": [
            "Formats a number with 2 decimals and 10 spaces",
            "Formats a string",
            "Centers the text",
            "None"
        ],
        "answer": "Formats a number with 2 decimals and 10 spaces"
    },
    {
        "question": "What is the purpose of the @wraps decorator?",
        "options": [
            "To preserve metadata of a function",
            "To define a static method",
            "To define a class method",
            "None"
        ],
        "answer": "To preserve metadata of a function"
    },
    {
        "question": "What does the ':,.0f' modifier do in formatting?",
        "options": [
            "Formats a number with commas and no decimals",
            "Formats a string",
            "Centers the text",
            "None"
        ],
        "answer": "Formats a number with commas and no decimals"
    },
    {
        "question": "What is the output of f'{20 * 3}'?",
        "options": [
            "60",
            "20 * 3",
            "Error",
            "None"
        ],
        "answer": "60"
    },
    {
        "question": "Which decorator is used to define a setter method?",
        "options": [
            "@property",
            "@staticmethod",
            "@classmethod",
            "@wraps"
        ],
        "answer": "@property"
    },
    {
        "question": "Which loop is used for indefinite iteration?",
        "options": [
            "while",
            "for",
            "do-while",
            "repeat"
        ],
        "answer": "while"
    },
    {
        "question": "What is the output of for i in range(3): print(i)?",
        "options": [
            "0 1 2",
            "1 2 3",
            "Error",
            "None"
        ],
        "answer": "0 1 2"
    },
    {
        "question": "Which keyword exits a loop prematurely?",
        "options": [
            "break",
            "continue",
            "pass",
            "exit"
        ],
        "answer": "break"
    },
    {
        "question": "Which keyword skips the current iteration of a loop?",
        "options": [
            "continue",
            "break",
            "pass",
            "skip"
        ],
        "answer": "continue"
    },
    {
        "question": "What does the else clause in a loop do?",
        "options": [
            "Executes if the loop exits normally",
            "Executes when the loop condition is false",
            "Executes only when break is used",
            "None"
        ],
        "answer": "Executes if the loop exits normally"
    },
    {
        "question": "What is the default starting index for range(n)?",
        "options": [
            "0",
            "1",
            "n",
            "None"
        ],
        "answer": "0"
    },
    {
        "question": "Which built-in function is used to access both index and value in a loop?",
        "options": [
            "enumerate()",
            "zip()",
            "range()",
            "None"
        ],
        "answer": "enumerate()"
    },
    {
        "question": "How can you create an infinite loop?",
        "options": [
            "while True:",
            "for i in range(inf):",
            "while 1==0:",
            "None"
        ],
        "answer": "while True:"
    },
    {
        "question": "What is the output of for i in range(2, 10, 2): print(i)?",
        "options": [
            "2 4 6 8",
            "2 4 6 8 10",
            "Error",
            "None"
        ],
        "answer": "2 4 6 8"
    },
    {
        "question": "Which keyword acts as a no-operation placeholder inside loops?",
        "options": [
            "pass",
            "continue",
            "break",
            "skip"
        ],
        "answer": "pass"
    },
    {
        "question": "What is the output of while i < 3: print(i); i += 1?",
        "options": [
            "0 1 2",
            "1 2 3",
            "Error",
            "None"
        ],
        "answer": "0 1 2"
    },
    {
        "question": "Which loop is used for definite iteration?",
        "options": [
            "for",
            "while",
            "do-while",
            "repeat"
        ],
        "answer": "for"
    },
    {
        "question": "What does the range(5) function generate?",
        "options": [
            "0 to 4",
            "1 to 5",
            "5 numbers starting at 1",
            "None"
        ],
        "answer": "0 to 4"
    },
    {
        "question": "Which keyword is used to terminate a loop?",
        "options": [
            "break",
            "continue",
            "pass",
            "exit"
        ],
        "answer": "break"
    },
    {
        "question": "What is the output of for i in range(3): print(i * 2)?",
        "options": [
            "0 2 4",
            "1 2 3",
            "Error",
            "None"
        ],
        "answer": "0 2 4"
    },
    {
        "question": "Which loop construct is considered more Pythonic for iterating over sequences?",
        "options": [
            "for",
            "while",
            "do-while",
            "None"
        ],
        "answer": "for"
    },
    {
        "question": "What is the output of for i in range(5, 0, -1): print(i)?",
        "options": [
            "5 4 3 2 1",
            "1 2 3 4 5",
            "Error",
            "None"
        ],
        "answer": "5 4 3 2 1"
    },
    {
        "question": "Which function generates a sequence of numbers?",
        "options": [
            "range()",
            "enumerate()",
            "zip()",
            "None"
        ],
        "answer": "range()"
    },
    {
        "question": "What is the output of while i < 5: print(i); i += 2?",
        "options": [
            "0 2 4",
            "1 3 5",
            "Error",
            "None"
        ],
        "answer": "0 2 4"
    },
    {
        "question": "Which loop is used to iterate over elements of a sequence?",
        "options": [
            "for",
            "while",
            "do-while",
            "None"
        ],
        "answer": "for"
    },
    {
        "question": "Which method converts all characters in a string to lowercase?",
        "options": [
            "lower()",
            "upper()",
            "capitalize()",
            "title()"
        ],
        "answer": "lower()"
    },
    {
        "question": "What is the output of 'Python'.upper()?",
        "options": [
            "PYTHON",
            "python",
            "Python",
            "Error"
        ],
        "answer": "PYTHON"
    },
    {
        "question": "Which method removes whitespace from the beginning and end of a string?",
        "options": [
            "strip()",
            "trim()",
            "remove()",
            "cut()"
        ],
        "answer": "strip()"
    },
    {
        "question": "How do you access the first character of a string 's'?",
        "options": [
            "s[0]",
            "s[1]",
            "s.first()",
            "s.charAt(0)"
        ],
        "answer": "s[0]"
    },
    {
        "question": "What is the result of 'Hello' + 'World'?",
        "options": [
            "HelloWorld",
            "Hello World",
            "Error",
            "None"
        ],
        "answer": "HelloWorld"
    },
    {
        "question": "Which method checks if all characters in a string are alphabetic?",
        "options": [
            "isalpha()",
            "isalnum()",
            "isdigit()",
            "isupper()"
        ],
        "answer": "isalpha()"
    },
    {
        "question": "What is the output of 'Python'[::-1]?",
        "options": [
            "nohtyP",
            "Python",
            "Error",
            "None"
        ],
        "answer": "nohtyP"
    },
    {
        "question": "Which method splits a string into a list?",
        "options": [
            "split()",
            "join()",
            "partition()",
            "divide()"
        ],
        "answer": "split()"
    },
    {
        "question": "What does the find() method return if the substring is not found?",
        "options": [
            "-1",
            "None",
            "Error",
            "0"
        ],
        "answer": "-1"
    },
    {
        "question": "Which method replaces occurrences of a substring with another substring?",
        "options": [
            "replace()",
            "sub()",
            "swap()",
            "change()"
        ],
        "answer": "replace()"
    },
    {
        "question": "What is the output of len('Python')?",
        "options": [
            "6",
            "7",
            "5",
            "Error"
        ],
        "answer": "6"
    },
    {
        "question": "Which method checks if a string starts with a specific substring?",
        "options": [
            "startswith()",
            "endswith()",
            "contains()",
            "find()"
        ],
        "answer": "startswith()"
    },
    {
        "question": "What is the result of ' '.join(['Hello', 'World'])?",
        "options": [
            "Hello World",
            "HelloWorld",
            "Error",
            "None"
        ],
        "answer": "Hello World"
    },
    {
        "question": "Which method checks if all characters in a string are digits?",
        "options": [
            "isdigit()",
            "isalpha()",
            "isalnum()",
            "isnumeric()"
        ],
        "answer": "isdigit()"
    },
    {
        "question": "What is the output of 'Python'.find('y')?",
        "options": [
            "1",
            "2",
            "-1",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "Which method converts the first character of each word to uppercase?",
        "options": [
            "title()",
            "capitalize()",
            "upper()",
            "swapcase()"
        ],
        "answer": "title()"
    },
    {
        "question": "What is the result of 'Python'.replace('P', 'J')?",
        "options": [
            "Jython",
            "Python",
            "Error",
            "None"
        ],
        "answer": "Jython"
    },
    {
        "question": "Which method checks if a string ends with a specific substring?",
        "options": [
            "endswith()",
            "startswith()",
            "contains()",
            "find()"
        ],
        "answer": "endswith()"
    },
    {
        "question": "What is the output of 'Python'.islower()?",
        "options": [
            "False",
            "True",
            "Error",
            "None"
        ],
        "answer": "False"
    },
    {
        "question": "Which method converts all characters in a string to uppercase?",
        "options": [
            "upper()",
            "lower()",
            "capitalize()",
            "title()"
        ],
        "answer": "upper()"
    },
    {
        "question": "Which method adds an element to the end of a list?",
        "options": [
            "append()",
            "insert()",
            "extend()",
            "add()"
        ],
        "answer": "append()"
    },
    {
        "question": "What is the result of [1, 2, 3] + [4, 5]?",
        "options": [
            "[1, 2, 3, 4, 5]",
            "[5, 7, 8]",
            "Error",
            "None"
        ],
        "answer": "[1, 2, 3, 4, 5]"
    },
    {
        "question": "Which method removes the first occurrence of a value from a list?",
        "options": [
            "remove()",
            "pop()",
            "delete()",
            "clear()"
        ],
        "answer": "remove()"
    },
    {
        "question": "What is the output of len([1, 2, 3, 4])?",
        "options": [
            "4",
            "3",
            "5",
            "Error"
        ],
        "answer": "4"
    },
    {
        "question": "Which method sorts a list in place?",
        "options": [
            "sort()",
            "sorted()",
            "order()",
            "arrange()"
        ],
        "answer": "sort()"
    },
    {
        "question": "What is the result of [1, 2] * 3?",
        "options": [
            "[1, 2, 1, 2, 1, 2]",
            "[3, 6]",
            "Error",
            "None"
        ],
        "answer": "[1, 2, 1, 2, 1, 2]"
    },
    {
        "question": "Which method reverses a list in place?",
        "options": [
            "reverse()",
            "reversed()",
            "flip()",
            "invert()"
        ],
        "answer": "reverse()"
    },
    {
        "question": "What is the output of [1, 2, 3].pop()?",
        "options": [
            "3",
            "1",
            "2",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which method extends a list by appending elements from another iterable?",
        "options": [
            "extend()",
            "append()",
            "insert()",
            "add()"
        ],
        "answer": "extend()"
    },
    {
        "question": "What is the result of [1, 2, 3].index(2)?",
        "options": [
            "1",
            "2",
            "0",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "Which method removes all elements from a list?",
        "options": [
            "clear()",
            "delete()",
            "remove()",
            "pop()"
        ],
        "answer": "clear()"
    },
    {
        "question": "What is the output of [1, 2, 3].count(2)?",
        "options": [
            "1",
            "2",
            "0",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "Which method inserts an element at a specified position in a list?",
        "options": [
            "insert()",
            "append()",
            "extend()",
            "add()"
        ],
        "answer": "insert()"
    },
    {
        "question": "What is the result of [1, 2, 3].remove(2)?",
        "options": [
            "[1, 3]",
            "[1, 2, 3]",
            "Error",
            "None"
        ],
        "answer": "[1, 3]"
    },
    {
        "question": "Which method returns a shallow copy of a list?",
        "options": [
            "copy()",
            "clone()",
            "duplicate()",
            "replicate()"
        ],
        "answer": "copy()"
    },
    {
        "question": "What is the output of [1, 2, 3][1]?",
        "options": [
            "2",
            "1",
            "3",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "Which method returns the smallest element in a list?",
        "options": [
            "min()",
            "max()",
            "smallest()",
            "least()"
        ],
        "answer": "min()"
    },
    {
        "question": "What is the result of [1, 2, 3].reverse()?",
        "options": [
            "[3, 2, 1]",
            "[1, 2, 3]",
            "Error",
            "None"
        ],
        "answer": "[3, 2, 1]"
    },
    {
        "question": "Which method returns the largest element in a list?",
        "options": [
            "max()",
            "min()",
            "largest()",
            "greatest()"
        ],
        "answer": "max()"
    },
    {
        "question": "What is the output of [1, 2, 3][0:2]?",
        "options": [
            "[1, 2]",
            "[2, 3]",
            "[1, 2, 3]",
            "Error"
        ],
        "answer": "[1, 2]"
    },
    {
        "question": "Which character is illegal as the first character in a Python variable name?",
        "options": [
            "A letter",
            "An underscore",
            "A digit",
            "A Unicode letter"
        ],
        "answer": "A digit"
    },
    {
        "question": "What does the '+=' operator do in Python?",
        "options": [
            "Subtracts and assigns",
            "Concatenates strings",
            "Adds and assigns",
            "Multiplies and assigns"
        ],
        "answer": "Adds and assigns"
    },
    {
        "question": "Which operator is used for exponentiation in Python?",
        "options": [
            "^",
            "**",
            "//",
            "%"
        ],
        "answer": "**"
    },
    {
        "question": "What is the output of: x = 3; x *= 4; print(x)?",
        "options": [
            "7",
            "12",
            "3",
            "12.0"
        ],
        "answer": "12"
    },
    {
        "question": "Which symbol is used to check equality in Python?",
        "options": [
            "=",
            "==",
            "===",
            "!="
        ],
        "answer": "=="
    },
    {
        "question": "What is the type of the literal 3.0 in Python?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "float"
    },
    {
        "question": "Which function converts a string to a float?",
        "options": [
            "int()",
            "str()",
            "float()",
            "complex()"
        ],
        "answer": "float()"
    },
    {
        "question": "What is the output of type(1+2j)?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "complex"
    },
    {
        "question": "Which data type is used to store text in Python?",
        "options": [
            "int",
            "float",
            "str",
            "bool"
        ],
        "answer": "str"
    },
    {
        "question": "What does the bool() function return when given an empty string?",
        "options": [
            "True",
            "False",
            "Empty string",
            "None"
        ],
        "answer": "False"
    },
    {
        "question": "In the expression 4 + 2 * 3, which operation is performed first?",
        "options": [
            "4 + 2",
            "2 * 3",
            "4 + 2 * 3",
            "None"
        ],
        "answer": "2 * 3"
    },
    {
        "question": "How is the expression 2 ** 3 ** 2 evaluated?",
        "options": [
            "(2 ** 3) ** 2",
            "2 ** (3 ** 2)",
            "2 ** 3 * 2",
            "Error"
        ],
        "answer": "2 ** (3 ** 2)"
    },
    {
        "question": "Which operator among +, -, and * is left-associative?",
        "options": [
            "+",
            "-",
            "*",
            "All"
        ],
        "answer": "All"
    },
    {
        "question": "What is the result of 8 / 4 * 2 in Python?",
        "options": [
            "1",
            "4",
            "8",
            "2"
        ],
        "answer": "4"
    },
    {
        "question": "Which operator's associativity is right-to-left in Python?",
        "options": [
            "+",
            "**",
            "*",
            "//"
        ],
        "answer": "**"
    },
    {
        "question": "What is the result of 5 & 1 in Python?",
        "options": [
            "1",
            "5",
            "0",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "Which operator performs bitwise OR?",
        "options": [
            "|",
            "&",
            "^",
            "~"
        ],
        "answer": "|"
    },
    {
        "question": "What does the ~ operator do to an integer?",
        "options": [
            "Inverts its bits",
            "Returns its absolute value",
            "Negates it",
            "None"
        ],
        "answer": "Inverts its bits"
    },
    {
        "question": "What is the boolean value of an empty list?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "What does the '^' operator do when applied to two integers?",
        "options": [
            "Performs exponentiation",
            "Performs bitwise XOR",
            "Performs bitwise OR",
            "Performs addition"
        ],
        "answer": "Performs bitwise XOR"
    },
    {
        "question": "What does the f-string prefix in Python denote?",
        "options": [
            "Formatted string literal",
            "Function string",
            "Final string",
            "Fuzzy string"
        ],
        "answer": "Formatted string literal"
    },
    {
        "question": "Which formatting method uses curly braces in Python 3?",
        "options": [
            "f-string",
            "percent formatting",
            "format()",
            "Template strings"
        ],
        "answer": "Both f-string and format()"
    },
    {
        "question": "What is the output of f\"Hello, { 'World'.upper() }\"?",
        "options": [
            "Hello, WORLD",
            "Hello, world",
            "Hello, 'WORLD'",
            "Error"
        ],
        "answer": "Hello, WORLD"
    },
    {
        "question": "Which decorator is used to define a class method?",
        "options": [
            "@classmethod",
            "@staticmethod",
            "@property",
            "@wraps"
        ],
        "answer": "@classmethod"
    },
    {
        "question": "What does the formatter '{:>8}' do?",
        "options": [
            "Right-aligns text in width 8",
            "Left-aligns text",
            "Centers text",
            "None"
        ],
        "answer": "Right-aligns text in width 8"
    },
    {
        "question": "What does the format specifier ':.2f' do?",
        "options": [
            "Formats a number to 2 decimal places",
            "Formats a string",
            "Aligns text",
            "None"
        ],
        "answer": "Formats a number to 2 decimal places"
    },
    {
        "question": "What is the purpose of the @wraps decorator from functools?",
        "options": [
            "Preserve metadata of the original function",
            "Cache function results",
            "Convert function to string",
            "None"
        ],
        "answer": "Preserve metadata of the original function"
    },
    {
        "question": "Which loop is preferred for iterating over a sequence in Python?",
        "options": [
            "while",
            "for",
            "do-while",
            "repeat"
        ],
        "answer": "for"
    },
    {
        "question": "What keyword is used to exit a loop in Python prematurely?",
        "options": [
            "exit",
            "quit",
            "break",
            "return"
        ],
        "answer": "break"
    },
    {
        "question": "Which keyword skips the current iteration of a loop?",
        "options": [
            "skip",
            "continue",
            "pass",
            "break"
        ],
        "answer": "continue"
    },
    {
        "question": "What does the range(5) function generate?",
        "options": [
            "0 to 4",
            "1 to 5",
            "0 to 5",
            "None"
        ],
        "answer": "0 to 4"
    },
    {
        "question": "In a while loop, how is the continuation condition specified?",
        "options": [
            "After the while keyword",
            "Inside the parentheses",
            "Using an if statement",
            "None"
        ],
        "answer": "Inside the parentheses"
    },
    {
        "question": "Which method converts a string to uppercase?",
        "options": [
            "upper()",
            "lower()",
            "capitalize()",
            "swapcase()"
        ],
        "answer": "upper()"
    },
    {
        "question": "What is the output of 'abc'.capitalize()?",
        "options": [
            "Abc",
            "ABC",
            "abc",
            "aBC"
        ],
        "answer": "Abc"
    },
    {
        "question": "Which method checks if a string starts with a specified substring?",
        "options": [
            "startswith()",
            "endswith()",
            "contains()",
            "find()"
        ],
        "answer": "startswith()"
    },
    {
        "question": "What does the split() method do?",
        "options": [
            "Splits a string into a list",
            "Joins a list into a string",
            "Replaces characters",
            "None"
        ],
        "answer": "Splits a string into a list"
    },
    {
        "question": "What is the output of 'hello'*3 in Python?",
        "options": [
            "hellohellohello",
            "hello 3",
            "Error",
            "None"
        ],
        "answer": "hellohellohello"
    },
    {
        "question": "Which method converts a string to lowercase?",
        "options": [
            "lower()",
            "upper()",
            "capitalize()",
            "title()"
        ],
        "answer": "lower()"
    },
    {
        "question": "How do you access the first character of string s?",
        "options": [
            "s[0]",
            "s[1]",
            "s.first()",
            "s.charAt(0)"
        ],
        "answer": "s[0]"
    },
    {
        "question": "What is the result of 'Hello' + 'World'?",
        "options": [
            "HelloWorld",
            "Hello World",
            "Error",
            "None"
        ],
        "answer": "HelloWorld"
    },
    {
        "question": "Which method checks if all characters in a string are alphabetic?",
        "options": [
            "isalpha()",
            "isalnum()",
            "isdigit()",
            "islower()"
        ],
        "answer": "isalpha()"
    },
    {
        "question": "What is the output of 'Python'[::-1]?",
        "options": [
            "nohtyP",
            "Python",
            "Error",
            "None"
        ],
        "answer": "nohtyP"
    },
    {
        "question": "Which method splits a string into a list of substrings?",
        "options": [
            "split()",
            "join()",
            "partition()",
            "slice()"
        ],
        "answer": "split()"
    },
    {
        "question": "What does the find() method return if substring is not found?",
        "options": [
            "-1",
            "0",
            "None",
            "Error"
        ],
        "answer": "-1"
    },
    {
        "question": "Which method replaces occurrences of a substring in a string?",
        "options": [
            "replace()",
            "sub()",
            "swap()",
            "change()"
        ],
        "answer": "replace()"
    },
    {
        "question": "What is the output of [1, 2, 3] + [4, 5]?",
        "options": [
            "[1, 2, 3, 4, 5]",
            "[5, 7, 8]",
            "Error",
            "None"
        ],
        "answer": "[1, 2, 3, 4, 5]"
    },
    {
        "question": "How do you add an element to the end of a list?",
        "options": [
            "append()",
            "insert()",
            "extend()",
            "add()"
        ],
        "answer": "append()"
    },
    {
        "question": "Which method removes an element by value from a list?",
        "options": [
            "remove()",
            "pop()",
            "delete()",
            "discard()"
        ],
        "answer": "remove()"
    },
    {
        "question": "What is the output of len([10,20,30])?",
        "options": [
            "3",
            "2",
            "0",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "What does [1,2,3].index(2) return?",
        "options": [
            "1",
            "2",
            "0",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "Which method sorts a list in place?",
        "options": [
            "sort()",
            "sorted()",
            "order()",
            "arrange()"
        ],
        "answer": "sort()"
    },
    {
        "question": "What is the output of [1,2] * 3?",
        "options": [
            "[1,2,1,2,1,2]",
            "[3,6]",
            "Error",
            "None"
        ],
        "answer": "[1,2,1,2,1,2]"
    },
    {
        "question": "How do you reverse a list in place?",
        "options": [
            "reverse()",
            "reversed()",
            "flip()",
            "invert()"
        ],
        "answer": "reverse()"
    },
    {
        "question": "What does the pop() method do?",
        "options": [
            "Removes and returns the last element",
            "Removes an element by value",
            "Returns the length",
            "None"
        ],
        "answer": "Removes and returns the last element"
    },
    {
        "question": "Which method returns a shallow copy of a list?",
        "options": [
            "copy()",
            "clone()",
            "duplicate()",
            "replicate()"
        ],
        "answer": "copy()"
    },
    {
        "question": "What does [x*2 for x in range(3)] produce?",
        "options": [
            "[0, 2, 4]",
            "[2, 4, 6]",
            "[0, 1, 2]",
            "Error"
        ],
        "answer": "[0, 2, 4]"
    },
    {
        "question": "Can list comprehensions include an if condition?",
        "options": [
            "Yes",
            "No",
            "Only for filtering",
            "Depends"
        ],
        "answer": "Yes"
    },
    {
        "question": "What is the output of [x for x in range(5) if x % 2 == 0]?",
        "options": [
            "[0,2,4]",
            "[1,3]",
            "[0,1,2,3,4]",
            "Error"
        ],
        "answer": "[0,2,4]"
    },
    {
        "question": "How do you create a list of squares from 0 to 4 using comprehension?",
        "options": [
            "[x**2 for x in range(5)]",
            "[x*x for x in range(5)]",
            "Both A and B",
            "None"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What is the output of [str(x) for x in range(3)]?",
        "options": [
            "['0','1','2']",
            "['1','2','3']",
            "['x']",
            "Error"
        ],
        "answer": "['0','1','2']"
    },
    {
        "question": "Which data structure is immutable in Python?",
        "options": [
            "tuple",
            "list",
            "dict",
            "set"
        ],
        "answer": "tuple"
    },
    {
        "question": "How do you define a single-element tuple?",
        "options": [
            "(5,)",
            "(5)",
            "[5]",
            "{5}"
        ],
        "answer": "(5,)"
    },
    {
        "question": "What is the result of (1,2) + (3,4)?",
        "options": [
            "(1,2,3,4)",
            "Error",
            "[1,2,3,4]",
            "None"
        ],
        "answer": "(1,2,3,4)"
    },
    {
        "question": "Which function converts a list to a tuple?",
        "options": [
            "tuple()",
            "list()",
            "convert()",
            "type()"
        ],
        "answer": "tuple()"
    },
    {
        "question": "What is the output of len((10,20,30))?",
        "options": [
            "3",
            "10",
            "30",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which collection type does not allow duplicate elements?",
        "options": [
            "set",
            "list",
            "tuple",
            "dict"
        ],
        "answer": "set"
    },
    {
        "question": "How do you create an empty set in Python?",
        "options": [
            "set()",
            "{}",
            "[]",
            "None"
        ],
        "answer": "set()"
    },
    {
        "question": "What is the result of {1,2,3} | {3,4,5}?",
        "options": [
            "{1,2,3,4,5}",
            "{3,4}",
            "Error",
            "None"
        ],
        "answer": "{1,2,3,4,5}"
    },
    {
        "question": "Which operator performs the intersection of two sets?",
        "options": [
            "&",
            "|",
            "^",
            "-"
        ],
        "answer": "&"
    },
    {
        "question": "How do you add an element to a set?",
        "options": [
            "add()",
            "append()",
            "insert()",
            "extend()"
        ],
        "answer": "add()"
    },
    {
        "question": "Which data structure stores key-value pairs in Python?",
        "options": [
            "dictionary",
            "list",
            "tuple",
            "set"
        ],
        "answer": "dictionary"
    },
    {
        "question": "How do you access the value for key 'a' in a dictionary d?",
        "options": [
            "d['a']",
            "d.a",
            "d.get('a')",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "What is the output of len({'x':1, 'y':2, 'z':3})?",
        "options": [
            "3",
            "6",
            "None",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which method returns a view of dictionary keys?",
        "options": [
            "keys()",
            "values()",
            "items()",
            "get()"
        ],
        "answer": "keys()"
    },
    {
        "question": "How do you remove a key 'b' from a dictionary d?",
        "options": [
            "d.pop('b')",
            "del d['b']",
            "Both A and B",
            "d.remove('b')"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "Which function returns the length of an object?",
        "options": [
            "len()",
            "size()",
            "count()",
            "range()"
        ],
        "answer": "len()"
    },
    {
        "question": "What does the sorted() function return?",
        "options": [
            "A new sorted list",
            "The same list sorted in place",
            "An iterator",
            "None"
        ],
        "answer": "A new sorted list"
    },
    {
        "question": "Which function returns the maximum element in an iterable?",
        "options": [
            "max()",
            "min()",
            "sum()",
            "abs()"
        ],
        "answer": "max()"
    },
    {
        "question": "What does the divmod(a, b) function return?",
        "options": [
            "Tuple of quotient and remainder",
            "Only quotient",
            "Only remainder",
            "Error"
        ],
        "answer": "Tuple of quotient and remainder"
    },
    {
        "question": "Which function converts an object to its string representation?",
        "options": [
            "str()",
            "repr()",
            "toString()",
            "Both str() and repr()"
        ],
        "answer": "Both str() and repr()"
    },
    {
        "question": "Which keyword is used to define a function in Python?",
        "options": [
            "def",
            "func",
            "function",
            "lambda"
        ],
        "answer": "def"
    },
    {
        "question": "Can a Python function return multiple values?",
        "options": [
            "Yes",
            "No",
            "Only tuples",
            "Only lists"
        ],
        "answer": "Yes"
    },
    {
        "question": "What does the lambda keyword create?",
        "options": [
            "An anonymous function",
            "A variable",
            "A class",
            "A loop"
        ],
        "answer": "An anonymous function"
    },
    {
        "question": "Which built-in function returns a list of an object's attributes?",
        "options": [
            "dir()",
            "help()",
            "vars()",
            "attributes()"
        ],
        "answer": "dir()"
    },
    {
        "question": "What is the output of a function with no return statement?",
        "options": [
            "None",
            "0",
            "Empty string",
            "Error"
        ],
        "answer": "None"
    },
    {
        "question": "How are arguments passed to functions in Python?",
        "options": [
            "By value",
            "By reference",
            "By assignment of object reference",
            "None"
        ],
        "answer": "By assignment of object reference"
    },
    {
        "question": "What happens when a mutable object is passed to a function?",
        "options": [
            "It cannot be modified",
            "It is modified in place",
            "It is automatically copied",
            "Error"
        ],
        "answer": "It is modified in place"
    },
    {
        "question": "Which keyword is used to define a recursive function?",
        "options": [
            "def",
            "rec",
            "lambda",
            "There is no special keyword"
        ],
        "answer": "There is no special keyword"
    },
    {
        "question": "What is the primary risk of excessive recursion in Python?",
        "options": [
            "Stack overflow",
            "Memory leak",
            "Infinite loop",
            "Syntax error"
        ],
        "answer": "Stack overflow"
    },
    {
        "question": "How do you access a global variable inside a function for modification?",
        "options": [
            "global",
            "nonlocal",
            "extern",
            "declare"
        ],
        "answer": "global"
    },
    {
        "question": "Which function applies a function to every item in an iterable?",
        "options": [
            "map()",
            "filter()",
            "reduce()",
            "zip()"
        ],
        "answer": "map()"
    },
    {
        "question": "What does the filter() function return in Python 3?",
        "options": [
            "An iterator",
            "A list",
            "A tuple",
            "A generator"
        ],
        "answer": "An iterator"
    },
    {
        "question": "Which function reduces an iterable to a single value?",
        "options": [
            "reduce()",
            "map()",
            "filter()",
            "sum()"
        ],
        "answer": "reduce()"
    },
    {
        "question": "Which module must you import to use reduce() in Python 3?",
        "options": [
            "functools",
            "itertools",
            "operator",
            "collections"
        ],
        "answer": "functools"
    },
    {
        "question": "What does the zip() function do?",
        "options": [
            "Combines elements from iterables into tuples",
            "Flattens nested lists",
            "Filters items",
            "None"
        ],
        "answer": "Combines elements from iterables into tuples"
    },
    {
        "question": "Which file extension is used for Python modules?",
        "options": [
            ".py",
            ".pym",
            ".pyc",
            ".pyo"
        ],
        "answer": ".py"
    },
    {
        "question": "How do you import a module named 'math'?",
        "options": [
            "import math",
            "include math",
            "require math",
            "using math"
        ],
        "answer": "import math"
    },
    {
        "question": "What is the purpose of the __init__.py file in a package?",
        "options": [
            "It initializes the package",
            "It compiles the package",
            "It stores configuration",
            "None"
        ],
        "answer": "It initializes the package"
    },
    {
        "question": "Which keyword allows you to import a specific attribute from a module?",
        "options": [
            "from",
            "import",
            "as",
            "with"
        ],
        "answer": "from"
    },
    {
        "question": "What is the output of print(__name__) in a module?",
        "options": [
            "The module's name",
            "Main",
            "Error",
            "None"
        ],
        "answer": "The module's name"
    },
    {
        "question": "Which module is used for regular expressions in Python?",
        "options": [
            "re",
            "regex",
            "pyre",
            "regexp"
        ],
        "answer": "re"
    },
    {
        "question": "What does re.match() do?",
        "options": [
            "Matches the pattern at the beginning of the string",
            "Matches anywhere in the string",
            "Returns all matches",
            "Splits the string"
        ],
        "answer": "Matches the pattern at the beginning of the string"
    },
    {
        "question": "Which metacharacter matches any single character except a newline?",
        "options": [
            ".",
            "*",
            "?",
            "+"
        ],
        "answer": "."
    },
    {
        "question": "What does re.findall() return?",
        "options": [
            "A list of all matches",
            "A single match",
            "An iterator",
            "None"
        ],
        "answer": "A list of all matches"
    },
    {
        "question": "Which flag makes regex matching case-insensitive?",
        "options": [
            "re.IGNORECASE",
            "re.I",
            "Both A and B",
            "None"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "Which function is used to open a file in Python?",
        "options": [
            "open()",
            "file()",
            "io.open()",
            "read()"
        ],
        "answer": "open()"
    },
    {
        "question": "What does the 'r' mode indicate when opening a file?",
        "options": [
            "read",
            "write",
            "append",
            "binary"
        ],
        "answer": "read"
    },
    {
        "question": "Which method reads the entire contents of a file as a string?",
        "options": [
            "read()",
            "readline()",
            "readlines()",
            "fetch()"
        ],
        "answer": "read()"
    },
    {
        "question": "What advantage does using the 'with' statement offer in file handling?",
        "options": [
            "Automatically closes the file",
            "Speeds up file reading",
            "Prevents duplicates",
            "None"
        ],
        "answer": "Automatically closes the file"
    },
    {
        "question": "What happens if you open a file in write mode that already exists?",
        "options": [
            "Overwrite the file",
            "Append to the file",
            "Raise an error",
            "Nothing"
        ],
        "answer": "Overwrite the file"
    },
    {
        "question": "Which keyword is used to define a class in Python?",
        "options": [
            "class",
            "def",
            "struct",
            "function"
        ],
        "answer": "class"
    },
    {
        "question": "How do you instantiate a class named MyClass?",
        "options": [
            "MyClass()",
            "new MyClass()",
            "MyClass.new()",
            "create MyClass()"
        ],
        "answer": "MyClass()"
    },
    {
        "question": "What is the purpose of the __init__() method in a class?",
        "options": [
            "Initialize a new object",
            "Delete an object",
            "Return object representation",
            "None"
        ],
        "answer": "Initialize a new object"
    },
    {
        "question": "Which method is called when an object is destroyed?",
        "options": [
            "__del__()",
            "__init__()",
            "__exit__()",
            "__destroy__()"
        ],
        "answer": "__del__()"
    },
    {
        "question": "Which of the following is an invalid Python variable name because it starts with a digit?",
        "options": [
            "_temp",
            "temp2",
            "2value",
            "value"
        ],
        "answer": "2value"
    },
    {
        "question": "What operator is used to increment a variable by a value in one statement?",
        "options": [
            "++",
            "+=",
            "add()",
            "incr()"
        ],
        "answer": "+="
    },
    {
        "question": "Which keyword among the following cannot be used as a variable name?",
        "options": [
            "delta",
            "for",
            "var",
            "count"
        ],
        "answer": "for"
    },
    {
        "question": "Which operator concatenates strings in Python?",
        "options": [
            "*",
            "+",
            "&",
            "&&"
        ],
        "answer": "+"
    },
    {
        "question": "How can you assign the same value to multiple variables in a single line?",
        "options": [
            "a, b, c = 10",
            "a = b = c = 10",
            "a = 10, b = 10, c = 10",
            "a = 10; b = 10; c = 10"
        ],
        "answer": "a = b = c = 10"
    },
    {
        "question": "What is the type of the literal 3.0 in Python?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "float"
    },
    {
        "question": "Which function converts a numeric string to an integer?",
        "options": [
            "str()",
            "int()",
            "float()",
            "complex()"
        ],
        "answer": "int()"
    },
    {
        "question": "How does Python handle arbitrarily large integers?",
        "options": [
            "They overflow",
            "They are automatically converted to float",
            "They have unlimited precision",
            "They are capped at 2^32"
        ],
        "answer": "They have unlimited precision"
    },
    {
        "question": "Which of these is not a built-in numeric type in Python?",
        "options": [
            "int",
            "float",
            "decimal",
            "complex"
        ],
        "answer": "decimal"
    },
    {
        "question": "What does complex(0, 1) return?",
        "options": [
            "1",
            "1j",
            "0+1",
            "Error"
        ],
        "answer": "1j"
    },
    {
        "question": "How is the expression 3 + 4 * 2 evaluated in Python?",
        "options": [
            "(3 + 4) * 2",
            "3 + (4 * 2)",
            "3 + 4 + 2",
            "4 * (3 + 2)"
        ],
        "answer": "3 + (4 * 2)"
    },
    {
        "question": "Which operator has higher precedence: '**' or '*'?",
        "options": [
            "**",
            "*",
            "They are equal",
            "Depends on context"
        ],
        "answer": "**"
    },
    {
        "question": "What is the default associativity of the subtraction operator?",
        "options": [
            "Left-to-right",
            "Right-to-left",
            "Non-associative",
            "Depends on the operands"
        ],
        "answer": "Left-to-right"
    },
    {
        "question": "How is the expression 16 // 4 / 2 evaluated?",
        "options": [
            "(16 // 4) / 2",
            "16 // (4 / 2)",
            "16 // 4 // 2",
            "Error"
        ],
        "answer": "(16 // 4) / 2"
    },
    {
        "question": "Which of the following is evaluated last in an arithmetic expression?",
        "options": [
            "Multiplication",
            "Exponentiation",
            "Addition",
            "Logical operators"
        ],
        "answer": "Logical operators"
    },
    {
        "question": "What is the result of 9 | 4 in Python?",
        "options": [
            "13",
            "9",
            "4",
            "Error"
        ],
        "answer": "13"
    },
    {
        "question": "What is the result of 10 ^ 3 using bitwise XOR?",
        "options": [
            "9",
            "13",
            "11",
            "Error"
        ],
        "answer": "9"
    },
    {
        "question": "Which operator performs a right shift on an integer?",
        "options": [
            ">>",
            "<<",
            ">>>",
            "^^"
        ],
        "answer": ">>"
    },
    {
        "question": "What is the boolean value of an empty tuple?",
        "options": [
            "True",
            "False",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "What is the result of applying 'not' to True?",
        "options": [
            "True",
            "False",
            "Error",
            "0"
        ],
        "answer": "False"
    },
    {
        "question": "Which format specifier converts an integer to hexadecimal?",
        "options": [
            "x",
            "d",
            "f",
            "o"
        ],
        "answer": "x"
    },
    {
        "question": "What does the specifier ':.3f' do in a formatted string?",
        "options": [
            "Rounds a float to 3 decimal places",
            "Pads a string to 3 characters",
            "Truncates a float to 3 decimals",
            "None"
        ],
        "answer": "Rounds a float to 3 decimal places"
    },
    {
        "question": "Which decorator converts a method into a static method?",
        "options": [
            "@staticmethod",
            "@classmethod",
            "@property",
            "@functools"
        ],
        "answer": "@staticmethod"
    },
    {
        "question": "What is the main advantage of f-strings in Python?",
        "options": [
            "Faster string formatting",
            "Less memory usage",
            "Concise syntax",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "How do you embed an expression in an f-string?",
        "options": [
            "Using curly braces",
            "Using parentheses",
            "Using square brackets",
            "Using angle brackets"
        ],
        "answer": "Using curly braces"
    },
    {
        "question": "Which loop type is best when the number of iterations is predetermined?",
        "options": [
            "for loop",
            "while loop",
            "do-while loop",
            "recursive loop"
        ],
        "answer": "for loop"
    },
    {
        "question": "What is the output of for i in range(3,6): print(i)?",
        "options": [
            "3 4 5",
            "1 2 3",
            "3 4 5 6",
            "Error"
        ],
        "answer": "3 4 5"
    },
    {
        "question": "Which keyword exits a loop immediately?",
        "options": [
            "break",
            "continue",
            "exit",
            "stop"
        ],
        "answer": "break"
    },
    {
        "question": "Which built-in function generates a sequence of numbers?",
        "options": [
            "range()",
            "enumerate()",
            "zip()",
            "list()"
        ],
        "answer": "range()"
    },
    {
        "question": "What happens in a while loop if the condition is initially False?",
        "options": [
            "The loop executes once",
            "The loop never executes",
            "Raises an error",
            "Executes indefinitely"
        ],
        "answer": "The loop never executes"
    },
    {
        "question": "Which method capitalizes only the first letter of a string?",
        "options": [
            "capitalize()",
            "title()",
            "upper()",
            "swapcase()"
        ],
        "answer": "capitalize()"
    },
    {
        "question": "How do you check if a string ends with '.py'?",
        "options": [
            "endswith('.py')",
            "startswith('.py')",
            "contains('.py')",
            "matches('.py')"
        ],
        "answer": "endswith('.py')"
    },
    {
        "question": "What is the output of 'Python'.replace('P', 'J')?",
        "options": [
            "Jython",
            "Python",
            "jyton",
            "Error"
        ],
        "answer": "Jython"
    },
    {
        "question": "Which method returns the count of a specified substring?",
        "options": [
            "count()",
            "find()",
            "index()",
            "match()"
        ],
        "answer": "count()"
    },
    {
        "question": "How do you center the text 'hello' in a field of 10 characters?",
        "options": [
            "'hello'.center(10)",
            "center('hello',10)",
            "format('hello', '^10')",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "Which operator concatenates two lists?",
        "options": [
            "+",
            "*",
            "append()",
            "extend()"
        ],
        "answer": "+"
    },
    {
        "question": "What is the element at index 1 in the list [5, 6, 7]?",
        "options": [
            "5",
            "6",
            "7",
            "Error"
        ],
        "answer": "6"
    },
    {
        "question": "Which method removes an element by index and returns it?",
        "options": [
            "pop()",
            "remove()",
            "del",
            "clear()"
        ],
        "answer": "pop()"
    },
    {
        "question": "How can you create a list containing numbers from 0 to 4?",
        "options": [
            "list(range(5))",
            "[0,1,2,3,4]",
            "Both A and B",
            "None"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "Which method returns a list in reverse order without modifying the original?",
        "options": [
            "reversed()",
            "reverse()",
            "invert()",
            "flip()"
        ],
        "answer": "reversed()"
    },
    {
        "question": "Which syntax correctly creates a list of squares for numbers 0 to 4?",
        "options": [
            "[x**2 for x in range(5)]",
            "for x in range(5): x**2",
            "list(map(lambda x: x**2, range(5)))",
            "Both A and C"
        ],
        "answer": "Both A and C"
    },
    {
        "question": "What is the output of [x for x in range(5) if x % 2 != 0]?",
        "options": [
            "[1, 3]",
            "[0, 2, 4]",
            "[1, 2, 3]",
            "Error"
        ],
        "answer": "[1, 3]"
    },
    {
        "question": "Can list comprehensions include nested loops?",
        "options": [
            "Yes",
            "No",
            "Only one level",
            "Depends"
        ],
        "answer": "Yes"
    },
    {
        "question": "What does the following list comprehension produce: [str(x) for x in range(3)]?",
        "options": [
            "['0','1','2']",
            "['1','2','3']",
            "['x']",
            "Error"
        ],
        "answer": "['0','1','2']"
    },
    {
        "question": "Which part of a list comprehension indicates the iteration clause?",
        "options": [
            "for x in iterable",
            "if condition",
            "x**2",
            "None"
        ],
        "answer": "for x in iterable"
    },
    {
        "question": "Which of the following creates a tuple containing 3 elements?",
        "options": [
            "(1, 2, 3)",
            "[1, 2, 3]",
            "{1, 2, 3}",
            "1, 2, 3"
        ],
        "answer": "(1, 2, 3)"
    },
    {
        "question": "Are tuples mutable or immutable?",
        "options": [
            "Mutable",
            "Immutable",
            "Depends",
            "None"
        ],
        "answer": "Immutable"
    },
    {
        "question": "What is the output of len((100, 200, 300))?",
        "options": [
            "3",
            "100",
            "200",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "How do you access the third element in a tuple t?",
        "options": [
            "t[2]",
            "t[3]",
            "t.get(3)",
            "t(2)"
        ],
        "answer": "t[2]"
    },
    {
        "question": "Can a tuple contain elements of different data types?",
        "options": [
            "Yes",
            "No",
            "Only if specified",
            "Error"
        ],
        "answer": "Yes"
    },
    {
        "question": "Which collection type automatically removes duplicate values?",
        "options": [
            "set",
            "list",
            "tuple",
            "dictionary"
        ],
        "answer": "set"
    },
    {
        "question": "How do you create a set with the elements 1, 2, and 3?",
        "options": [
            "{1, 2, 3}",
            "[1, 2, 3]",
            "(1, 2, 3)",
            "set(1,2,3)"
        ],
        "answer": "{1, 2, 3}"
    },
    {
        "question": "What is the output of len({1, 2, 2, 3})?",
        "options": [
            "3",
            "4",
            "2",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which method returns the intersection of two sets?",
        "options": [
            "intersection()",
            "union()",
            "difference()",
            "symmetric_difference()"
        ],
        "answer": "intersection()"
    },
    {
        "question": "What does set() return when given an empty list?",
        "options": [
            "Empty set",
            "Empty list",
            "None",
            "Error"
        ],
        "answer": "Empty set"
    },
    {
        "question": "Which method returns a view of a dictionary's keys?",
        "options": [
            "keys()",
            "values()",
            "items()",
            "get()"
        ],
        "answer": "keys()"
    },
    {
        "question": "How do you update a dictionary with key 'name' and value 'Alice'?",
        "options": [
            "d['name'] = 'Alice'",
            "d.update({'name':'Alice'})",
            "Both A and B",
            "d.add('name','Alice')"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What is the output of len({'a': 1, 'b': 2, 'c': 3})?",
        "options": [
            "3",
            "1",
            "6",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "Which method removes a key 'x' from a dictionary d?",
        "options": [
            "d.pop('x')",
            "del d['x']",
            "Both A and B",
            "d.remove('x')"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "How do you access the value for key 'z' with a default of 0?",
        "options": [
            "d.get('z', 0)",
            "d['z']",
            "d.fetch('z', 0)",
            "None"
        ],
        "answer": "d.get('z', 0)"
    },
    {
        "question": "Which function returns the smallest element in an iterable?",
        "options": [
            "min()",
            "max()",
            "sum()",
            "len()"
        ],
        "answer": "min()"
    },
    {
        "question": "What does isinstance(obj, Class) check?",
        "options": [
            "If obj is an instance of Class",
            "If obj is a subclass of Class",
            "If obj equals Class",
            "None"
        ],
        "answer": "If obj is an instance of Class"
    },
    {
        "question": "Which function returns an iterator for an iterable?",
        "options": [
            "iter()",
            "list()",
            "next()",
            "zip()"
        ],
        "answer": "iter()"
    },
    {
        "question": "What is the output of hex(255)?",
        "options": [
            "'0xff'",
            "'ff'",
            "'255'",
            "Error"
        ],
        "answer": "'0xff'"
    },
    {
        "question": "Which function converts a value to a string?",
        "options": [
            "str()",
            "int()",
            "repr()",
            "format()"
        ],
        "answer": "str()"
    },
    {
        "question": "How do you define a function in Python?",
        "options": [
            "Using the def keyword",
            "Using the function keyword",
            "Using lambda",
            "Using func"
        ],
        "answer": "Using the def keyword"
    },
    {
        "question": "What is the purpose of the return statement in a function?",
        "options": [
            "To exit the function and return a value",
            "To print a value",
            "To assign a global variable",
            "None"
        ],
        "answer": "To exit the function and return a value"
    },
    {
        "question": "Can a Python function have default parameters?",
        "options": [
            "Yes",
            "No",
            "Only numeric types",
            "Only mutable types"
        ],
        "answer": "Yes"
    },
    {
        "question": "What concept allows a function to call itself?",
        "options": [
            "Recursion",
            "Iteration",
            "Higher-order function",
            "Closure"
        ],
        "answer": "Recursion"
    },
    {
        "question": "What does a lambda function create?",
        "options": [
            "An anonymous function",
            "A class",
            "A variable",
            "A module"
        ],
        "answer": "An anonymous function"
    },
    {
        "question": "How are objects passed to functions in Python?",
        "options": [
            "By assignment of the reference",
            "By value",
            "By copying",
            "By pointer"
        ],
        "answer": "By assignment of the reference"
    },
    {
        "question": "What happens when you modify a mutable object inside a function?",
        "options": [
            "The change affects the original object",
            "A copy is modified",
            "An error is raised",
            "Nothing happens"
        ],
        "answer": "The change affects the original object"
    },
    {
        "question": "Which keyword declares a global variable inside a function?",
        "options": [
            "global",
            "nonlocal",
            "extern",
            "def"
        ],
        "answer": "global"
    },
    {
        "question": "What stops recursion in a recursive function?",
        "options": [
            "A base case",
            "A loop",
            "A break statement",
            "An exception"
        ],
        "answer": "A base case"
    },
    {
        "question": "What is the typical risk of deep recursion?",
        "options": [
            "Stack overflow",
            "Memory leak",
            "Infinite loop",
            "Syntax error"
        ],
        "answer": "Stack overflow"
    },
    {
        "question": "Which function applies a function to every element of an iterable?",
        "options": [
            "map()",
            "filter()",
            "reduce()",
            "zip()"
        ],
        "answer": "map()"
    },
    {
        "question": "What does filter() return in Python 3?",
        "options": [
            "An iterator",
            "A list",
            "A tuple",
            "A dict"
        ],
        "answer": "An iterator"
    },
    {
        "question": "What is the purpose of reduce()?",
        "options": [
            "To aggregate values in an iterable",
            "To filter values",
            "To map values",
            "To zip iterables"
        ],
        "answer": "To aggregate values in an iterable"
    },
    {
        "question": "Which function combines elements from two iterables element-wise?",
        "options": [
            "zip()",
            "map()",
            "filter()",
            "reduce()"
        ],
        "answer": "zip()"
    },
    {
        "question": "How do you convert the result of a map() to a list?",
        "options": [
            "list()",
            "tuple()",
            "set()",
            "dict()"
        ],
        "answer": "list()"
    },
    {
        "question": "What is a Python module?",
        "options": [
            "A file containing Python code",
            "A package",
            "A class",
            "A function"
        ],
        "answer": "A file containing Python code"
    },
    {
        "question": "How do you import the module 'random'?",
        "options": [
            "import random",
            "from random import *",
            "Both A and B",
            "None"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "Which command imports a specific function 'sqrt' from the math module?",
        "options": [
            "from math import sqrt",
            "import math.sqrt",
            "using math.sqrt",
            "require math.sqrt"
        ],
        "answer": "from math import sqrt"
    },
    {
        "question": "What file extension is used for Python modules?",
        "options": [
            ".py",
            ".pym",
            ".pyc",
            ".pyo"
        ],
        "answer": ".py"
    },
    {
        "question": "Which variable holds the name of the current module?",
        "options": [
            "__name__",
            "__file__",
            "__module__",
            "__init__"
        ],
        "answer": "__name__"
    },
    {
        "question": "What does re.compile() do in Python?",
        "options": [
            "Compiles a regex pattern",
            "Executes regex search",
            "Splits a string by regex",
            "None"
        ],
        "answer": "Compiles a regex pattern"
    },
    {
        "question": "Which regex metacharacter matches the end of a string?",
        "options": [
            "$",
            "^",
            ".",
            "*"
        ],
        "answer": "$"
    },
    {
        "question": "What does the '+' quantifier do in regex?",
        "options": [
            "Matches one or more occurrences",
            "Matches zero or more",
            "Matches exactly one",
            "Matches zero or one"
        ],
        "answer": "Matches one or more occurrences"
    },
    {
        "question": "Which function returns all non-overlapping matches of a pattern?",
        "options": [
            "re.findall()",
            "re.match()",
            "re.search()",
            "re.split()"
        ],
        "answer": "re.findall()"
    },
    {
        "question": "What does '\\w' match in regex?",
        "options": [
            "Word characters",
            "Non-word characters",
            "Whitespace",
            "Digits"
        ],
        "answer": "Word characters"
    },
    {
        "question": "Which function is used to open a file in Python?",
        "options": [
            "open()",
            "file()",
            "io.open()",
            "read()"
        ],
        "answer": "open()"
    },
    {
        "question": "What mode is used to open a file for writing?",
        "options": [
            "'w'",
            "'r'",
            "'a'",
            "'rb'"
        ],
        "answer": "'w'"
    },
    {
        "question": "Which method reads the entire content of a file as a single string?",
        "options": [
            "read()",
            "readline()",
            "readlines()",
            "fetch()"
        ],
        "answer": "read()"
    },
    {
        "question": "What advantage does using 'with' provide in file operations?",
        "options": [
            "Automatic file closing",
            "Faster file access",
            "Data encryption",
            "None"
        ],
        "answer": "Automatic file closing"
    },
    {
        "question": "Which mode opens a file for binary reading?",
        "options": [
            "'rb'",
            "'r'",
            "'wb'",
            "'ab'"
        ],
        "answer": "'rb'"
    },
    {
        "question": "Which keyword is used to define a class in Python?",
        "options": [
            "class",
            "def",
            "struct",
            "fun"
        ],
        "answer": "class"
    },
    {
        "question": "What method initializes a class instance?",
        "options": [
            "__init__()",
            "__new__()",
            "__start__()",
            "init()"
        ],
        "answer": "__init__()"
    },
    {
        "question": "How do you create an instance of a class named Person?",
        "options": [
            "Person()",
            "new Person()",
            "Person.new()",
            "create Person()"
        ],
        "answer": "Person()"
    },
    {
        "question": "What does the __del__() method do in a class?",
        "options": [
            "Cleans up before an object is destroyed",
            "Initializes an object",
            "Returns a string representation",
            "None"
        ],
        "answer": "Cleans up before an object is destroyed"
    },
    {
        "question": "Which OOP concept allows a subclass to replace a method of its superclass?",
        "options": [
            "Method overriding",
            "Method overloading",
            "Encapsulation",
            "Abstraction"
        ],
        "answer": "Method overriding"
    },
    {
        "question": "Which of the following is an invalid Python variable name because it starts with a digit?",
        "options": [
            "_temp",
            "temp2",
            "2value",
            "value"
        ],
        "answer": "2value"
    },
    {
        "question": "What operator is used to increment a variable by a value in one statement?",
        "options": [
            "++",
            "+=",
            "add()",
            "incr()"
        ],
        "answer": "+="
    },
    {
        "question": "Which keyword among the following cannot be used as a variable name?",
        "options": [
            "delta",
            "for",
            "var",
            "count"
        ],
        "answer": "for"
    },
    {
        "question": "Which operator concatenates strings in Python?",
        "options": [
            "*",
            "+",
            "&",
            "&&"
        ],
        "answer": "+"
    },
    {
        "question": "How can you assign the same value 100 to variables a and b in Python?",
        "options": [
            "a, b = 10",
            "a = b = 100",
            "a = 100, b = 100",
            "a = 100; b = 100"
        ],
        "answer": "a = b = 100"
    },
    {
        "question": "What is the type of the literal 3.0 in Python?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "float"
    },
    {
        "question": "Which function converts a string to an integer?",
        "options": [
            "int()",
            "str()",
            "float()",
            "bool()"
        ],
        "answer": "int()"
    },
    {
        "question": "What is the result of type(10)?",
        "options": [
            "<class 'int'>",
            "<class 'float'>",
            "<class 'str'>",
            "<class 'list'>"
        ],
        "answer": "<class 'int'>"
    },
    {
        "question": "How do you represent a complex number with real part 2 and imaginary part 3?",
        "options": [
            "2+3i",
            "2+3j",
            "complex(2,3)",
            "Both 2+3j and complex(2,3)"
        ],
        "answer": "Both 2+3j and complex(2,3)"
    },
    {
        "question": "What is the output of abs(-50)?",
        "options": [
            "50",
            "-50",
            "0",
            "Error"
        ],
        "answer": "50"
    },
    {
        "question": "What is the result of round(3.14159, 3)?",
        "options": [
            "3.141",
            "3.14",
            "3.142",
            "3.1416"
        ],
        "answer": "3.142"
    },
    {
        "question": "Which operator performs true division in Python?",
        "options": [
            "/",
            "//",
            "%",
            "**"
        ],
        "answer": "/"
    },
    {
        "question": "What does the modulo operator (%) return for 17 % 5?",
        "options": [
            "2",
            "3",
            "4",
            "1"
        ],
        "answer": "2"
    },
    {
        "question": "Which of these is a valid logical operator in Python?",
        "options": [
            "and",
            "&&",
            "||",
            "notand"
        ],
        "answer": "and"
    },
    {
        "question": "What is the output of not False?",
        "options": [
            "True",
            "False",
            "0",
            "Error"
        ],
        "answer": "True"
    },
    {
        "question": "Which of these is a valid string literal in Python?",
        "options": [
            "'Hello'",
            "\"World\"",
            "'''Triple'''",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "question": "What does the len() function return for a string?",
        "options": [
            "The number of characters",
            "The first character",
            "A slice of the string",
            "None"
        ],
        "answer": "The number of characters"
    },
    {
        "question": "Which method converts a string to uppercase?",
        "options": [
            "upper()",
            "lower()",
            "capitalize()",
            "swapcase()"
        ],
        "answer": "upper()"
    },
    {
        "question": "What is the output of 'Data'.lower()?",
        "options": [
            "data",
            "DATA",
            "Data",
            "dATA"
        ],
        "answer": "data"
    },
    {
        "question": "How do you access the third character in the string s = 'Python'?",
        "options": [
            "s[2]",
            "s[3]",
            "s[1]",
            "s[0]"
        ],
        "answer": "s[2]"
    },
    {
        "question": "Which operator is used to repeat a string a specified number of times?",
        "options": [
            "*",
            "+",
            "%",
            "//"
        ],
        "answer": "*"
    },
    {
        "question": "What is the result of 'Hi' * 3?",
        "options": [
            "HiHiHi",
            "Hi 3",
            "Error",
            "3Hi"
        ],
        "answer": "HiHiHi"
    },
    {
        "question": "How do you check if a substring is in a string 'Hello World'?",
        "options": [
            "'World' in 'Hello World'",
            "'World'.find('Hello World')",
            "'World' contains 'Hello World'",
            "None of these"
        ],
        "answer": "'World' in 'Hello World'"
    },
    {
        "question": "Which method is used to split a string into a list?",
        "options": [
            "split()",
            "join()",
            "partition()",
            "divide()"
        ],
        "answer": "split()"
    },
    {
        "question": "What does the join() method do in Python?",
        "options": [
            "Concatenates elements of a list into a string",
            "Splits a string into a list",
            "Reverses a list",
            "None of these"
        ],
        "answer": "Concatenates elements of a list into a string"
    },
    {
        "question": "Which of these is a valid list literal in Python?",
        "options": [
            "[1, 2, 3]",
            "(1, 2, 3)",
            "{1, 2, 3}",
            "1,2,3"
        ],
        "answer": "[1, 2, 3]"
    },
    {
        "question": "What is the output of len([10, 20, 30, 40])?",
        "options": [
            "4",
            "40",
            "0",
            "Error"
        ],
        "answer": "4"
    },
    {
        "question": "How do you access the last element of a list lst in Python?",
        "options": [
            "lst[-1]",
            "lst[len(lst)]",
            "lst[last]",
            "lst[1]"
        ],
        "answer": "lst[-1]"
    },
    {
        "question": "Which method adds an element to the end of a list?",
        "options": [
            "append()",
            "insert()",
            "extend()",
            "add()"
        ],
        "answer": "append()"
    },
    {
        "question": "What does the pop() method do for a list?",
        "options": [
            "Removes and returns the last element",
            "Removes a specific element by value",
            "Returns the length",
            "None"
        ],
        "answer": "Removes and returns the last element"
    },
    {
        "question": "What is the result of [1, 2] * 4?",
        "options": [
            "[1, 2, 1, 2, 1, 2, 1, 2]",
            "[4, 4]",
            "Error",
            "None"
        ],
        "answer": "[1, 2, 1, 2, 1, 2, 1, 2]"
    },
    {
        "question": "Which function returns a shallow copy of a list?",
        "options": [
            "copy()",
            "duplicate()",
            "clone()",
            "None"
        ],
        "answer": "copy()"
    },
    {
        "question": "Which syntax can be used to iterate over a list with both index and value?",
        "options": [
            "enumerate()",
            "zip()",
            "range()",
            "iter()"
        ],
        "answer": "enumerate()"
    },
    {
        "question": "What does the sorted() function do?",
        "options": [
            "Returns a new sorted list",
            "Sorts the list in place",
            "Only works on strings",
            "None"
        ],
        "answer": "Returns a new sorted list"
    },
    {
        "question": "How do you create a dictionary with keys 'a' and 'b' and values 1 and 2 respectively?",
        "options": [
            "{'a': 1, 'b': 2}",
            "['a'=1, 'b'=2]",
            "(a:1, b:2)",
            "dict('a':1, 'b':2)"
        ],
        "answer": "{'a': 1, 'b': 2}"
    },
    {
        "question": "How do you access the value associated with key 'name' in dictionary d?",
        "options": [
            "d['name']",
            "d.get('name')",
            "Both A and B",
            "d.name"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What does the keys() method of a dictionary return in Python 3?",
        "options": [
            "A view of keys",
            "A list of keys",
            "A tuple of keys",
            "None"
        ],
        "answer": "A view of keys"
    },
    {
        "question": "How do you remove a key 'age' from a dictionary d?",
        "options": [
            "d.pop('age')",
            "del d['age']",
            "Both A and B",
            "d.remove('age')"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What is the output of len({'x':1, 'y':2})?",
        "options": [
            "2",
            "10",
            "20",
            "Error"
        ],
        "answer": "2"
    },
    {
        "question": "Which built-in function returns the numeric sum of an iterable?",
        "options": [
            "sum()",
            "add()",
            "total()",
            "aggregate()"
        ],
        "answer": "sum()"
    },
    {
        "question": "How do you define a function in Python?",
        "options": [
            "Using def",
            "Using function",
            "Using fun",
            "Using lambda"
        ],
        "answer": "Using def"
    },
    {
        "question": "What does the return statement do in a function?",
        "options": [
            "Exits the function and returns a value",
            "Prints a value",
            "Assigns a global variable",
            "None"
        ],
        "answer": "Exits the function and returns a value"
    },
    {
        "question": "Can a Python function return multiple values?",
        "options": [
            "Yes",
            "No",
            "Only tuples",
            "Only lists"
        ],
        "answer": "Yes"
    },
    {
        "question": "What is a lambda function in Python?",
        "options": [
            "An anonymous function",
            "A named function",
            "A class method",
            "A generator"
        ],
        "answer": "An anonymous function"
    },
    {
        "question": "Which keyword is used to pass an arbitrary number of keyword arguments to a function?",
        "options": [
            "**kwargs",
            "*args",
            "kwargs",
            "**args"
        ],
        "answer": "**kwargs"
    },
    {
        "question": "What is recursion in programming?",
        "options": [
            "A function calling itself",
            "A loop",
            "A conditional",
            "None"
        ],
        "answer": "A function calling itself"
    },
    {
        "question": "What is the risk of infinite recursion in Python?",
        "options": [
            "Stack overflow",
            "Memory leak",
            "Both",
            "None"
        ],
        "answer": "Stack overflow"
    },
    {
        "question": "Which keyword allows a function to modify a global variable?",
        "options": [
            "global",
            "nonlocal",
            "extern",
            "def"
        ],
        "answer": "global"
    },
    {
        "question": "What does the map() function do?",
        "options": [
            "Applies a function to every item in an iterable",
            "Filters an iterable",
            "Reduces an iterable",
            "None"
        ],
        "answer": "Applies a function to every item in an iterable"
    },
    {
        "question": "What does the filter() function do?",
        "options": [
            "Returns items that meet a condition",
            "Maps items to a function",
            "Reduces the items",
            "None"
        ],
        "answer": "Returns items that meet a condition"
    },
    {
        "question": "Which module must be imported to use reduce() in Python 3?",
        "options": [
            "functools",
            "itertools",
            "operator",
            "collections"
        ],
        "answer": "functools"
    },
    {
        "question": "What does the zip() function do?",
        "options": [
            "Combines elements from multiple iterables into tuples",
            "Zips files",
            "Unzips files",
            "None"
        ],
        "answer": "Combines elements from multiple iterables into tuples"
    },
    {
        "question": "How do you convert the result of map() into a list?",
        "options": [
            "list()",
            "tuple()",
            "set()",
            "dict()"
        ],
        "answer": "list()"
    },
    {
        "question": "What file extension is used for Python modules?",
        "options": [
            ".py",
            ".pym",
            ".pyc",
            ".pyo"
        ],
        "answer": ".py"
    },
    {
        "question": "How do you import a module named 'math'?",
        "options": [
            "import math",
            "include math",
            "using math",
            "require math"
        ],
        "answer": "import math"
    },
    {
        "question": "What is the purpose of the __init__.py file in a package?",
        "options": [
            "It initializes the package",
            "It compiles the package",
            "It stores configuration",
            "None"
        ],
        "answer": "It initializes the package"
    },
    {
        "question": "Which keyword allows you to import a specific attribute from a module?",
        "options": [
            "from",
            "import",
            "as",
            "with"
        ],
        "answer": "from"
    },
    {
        "question": "What does re.compile() do in regex operations?",
        "options": [
            "Compiles a regex pattern for reuse",
            "Finds all matches",
            "Splits a string",
            "None"
        ],
        "answer": "Compiles a regex pattern for reuse"
    },
    {
        "question": "Which metacharacter in regex matches the end of a string?",
        "options": [
            "$",
            "^",
            ".",
            "*"
        ],
        "answer": "$"
    },
    {
        "question": "What does the '+' quantifier in regex indicate?",
        "options": [
            "One or more occurrences",
            "Zero or more occurrences",
            "One occurrence",
            "Zero or one occurrence"
        ],
        "answer": "One or more occurrences"
    },
    {
        "question": "Which function returns a list of all non-overlapping matches in a string?",
        "options": [
            "re.findall()",
            "re.match()",
            "re.search()",
            "re.split()"
        ],
        "answer": "re.findall()"
    },
    {
        "question": "How do you open a file for reading in Python?",
        "options": [
            "'r'",
            "'w'",
            "'a'",
            "'rb'"
        ],
        "answer": "'r'"
    },
    {
        "question": "Which mode opens a file for appending?",
        "options": [
            "'a'",
            "'r'",
            "'w'",
            "'x'"
        ],
        "answer": "'a'"
    },
    {
        "question": "What advantage does the 'with' statement provide in file handling?",
        "options": [
            "Automatically closes the file",
            "Speeds up file access",
            "Enables concurrent access",
            "None"
        ],
        "answer": "Automatically closes the file"
    },
    {
        "question": "What happens when you open an existing file in 'w' mode?",
        "options": [
            "It overwrites the file",
            "It appends to the file",
            "It raises an error",
            "Nothing happens"
        ],
        "answer": "It overwrites the file"
    },
    {
        "question": "Which keyword is used to define a class in Python?",
        "options": [
            "class",
            "def",
            "struct",
            "fun"
        ],
        "answer": "class"
    },
    {
        "question": "What special method is called to initialize a class instance?",
        "options": [
            "__init__",
            "__start__",
            "__new__",
            "__begin__"
        ],
        "answer": "__init__"
    },
    {
        "question": "How do you instantiate a class named 'Car'?",
        "options": [
            "Car()",
            "new Car()",
            "Car.new()",
            "create Car()"
        ],
        "answer": "Car()"
    },
    {
        "question": "Which function checks whether an object is an instance of a specific class?",
        "options": [
            "isinstance()",
            "issubclass()",
            "type()",
            "checktype()"
        ],
        "answer": "isinstance()"
    },
    {
        "question": "What does the __str__() method do in a class?",
        "options": [
            "Returns a human-readable string representation",
            "Initializes the object",
            "Destroys the object",
            "None"
        ],
        "answer": "Returns a human-readable string representation"
    },
    {
        "question": "What is the concept of polymorphism in OOP?",
        "options": [
            "Different classes can be used interchangeably",
            "A class can have multiple constructors",
            "A method can call itself",
            "None"
        ],
        "answer": "Different classes can be used interchangeably"
    },
    {
        "question": "Which built-in function returns the unique id of an object?",
        "options": [
            "id()",
            "type()",
            "hash()",
            "repr()"
        ],
        "answer": "id()"
    },
    {
        "question": "Can functions in Python be nested?",
        "options": [
            "Yes",
            "No",
            "Only lambdas",
            "Only inside classes"
        ],
        "answer": "Yes"
    },
    {
        "question": "What is a higher-order function?",
        "options": [
            "A function that takes or returns another function",
            "A function that operates only on numbers",
            "A recursive function",
            "None"
        ],
        "answer": "A function that takes or returns another function"
    },
    {
        "question": "What attribute does an object use to store its writable attributes?",
        "options": [
            "__dict__",
            "__name__",
            "__class__",
            "__module__"
        ],
        "answer": "__dict__"
    },
    {
        "question": "Which function returns an object's string representation for debugging?",
        "options": [
            "repr()",
            "str()",
            "reprstr()",
            "tostring()"
        ],
        "answer": "repr()"
    },
    {
        "question": "How do you denote a raw string literal in Python?",
        "options": [
            "Prefix with r",
            "Prefix with R",
            "Both A and B",
            "None"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What happens when you call iter() on a list?",
        "options": [
            "Returns an iterator",
            "Returns the list",
            "Returns a copy of the list",
            "Raises an error"
        ],
        "answer": "Returns an iterator"
    },
    {
        "question": "Which keyword is used to handle exceptions in Python?",
        "options": [
            "try",
            "catch",
            "except",
            "finally"
        ],
        "answer": "except"
    },
    {
        "question": "What is the purpose of the finally block in exception handling?",
        "options": [
            "Executes regardless of exceptions",
            "Handles exceptions",
            "Prevents exceptions",
            "None"
        ],
        "answer": "Executes regardless of exceptions"
    },
    {
        "question": "How do you manually raise an exception in Python?",
        "options": [
            "raise Exception",
            "throw Exception",
            "error Exception",
            "None"
        ],
        "answer": "raise Exception"
    },
    {
        "question": "Which of the following is not a standard exception in Python?",
        "options": [
            "IOError",
            "MemoryError",
            "IndexError",
            "ArrayError"
        ],
        "answer": "ArrayError"
    },
    {
        "question": "What is the output of bool('False')?",
        "options": [
            "True",
            "False",
            "Error",
            "None"
        ],
        "answer": "True"
    },
    {
        "question": "Which built-in function returns the maximum element from an iterable?",
        "options": [
            "max()",
            "min()",
            "sum()",
            "abs()"
        ],
        "answer": "max()"
    },
    {
        "question": "What does the any() function do?",
        "options": [
            "Returns True if any element is True",
            "Returns True if all elements are True",
            "Returns the first True element",
            "None"
        ],
        "answer": "Returns True if any element is True"
    },
    {
        "question": "Which function lists an object's attributes?",
        "options": [
            "dir()",
            "help()",
            "vars()",
            "attributes()"
        ],
        "answer": "dir()"
    },
    {
        "question": "What is the output of bool(0)?",
        "options": [
            "False",
            "True",
            "0",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "What is the result of 3 * 'ab'?",
        "options": [
            "ababab",
            "ab3",
            "Error",
            "None"
        ],
        "answer": "ababab"
    },
    {
        "question": "Which function returns the type of an object?",
        "options": [
            "type()",
            "id()",
            "str()",
            "repr()"
        ],
        "answer": "type()"
    },
    {
        "question": "Which symbol is used to assign a value to a variable in Python?",
        "options": [
            "=",
            "==",
            "=>",
            "->"
        ],
        "answer": "="
    },
    {
        "question": "Which of the following is a valid Python variable name?",
        "options": [
            "my_var",
            "2ndVar",
            "my-var",
            "my var"
        ],
        "answer": "my_var"
    },
    {
        "question": "What operator returns the remainder of division in Python?",
        "options": [
            "//",
            "%",
            "**",
            "/"
        ],
        "answer": "%"
    },
    {
        "question": "How do you express floor division in Python?",
        "options": [
            "//",
            "/",
            "%",
            "**"
        ],
        "answer": "//"
    },
    {
        "question": "Which operator updates a variable by subtracting 5 in one operation?",
        "options": [
            "x -= 5",
            "x =- 5",
            "x = x - 5",
            "Subtract(x, 5)"
        ],
        "answer": "x -= 5"
    },
    {
        "question": "Which operator is used for exponentiation in Python?",
        "options": [
            "**",
            "^",
            "exp",
            "pow"
        ],
        "answer": "**"
    },
    {
        "question": "What is the output of 15 % 4?",
        "options": [
            "3",
            "4",
            "2",
            "1"
        ],
        "answer": "3"
    },
    {
        "question": "Which operator is used for assignment in Python?",
        "options": [
            "=",
            "==",
            "===",
            "!="
        ],
        "answer": "="
    },
    {
        "question": "What does the walrus operator ':=' do in Python?",
        "options": [
            "Assignment expression",
            "Comparison",
            "Multiplication",
            "Exponentiation"
        ],
        "answer": "Assignment expression"
    },
    {
        "question": "What is the shorthand operator for multiplying a variable by a value?",
        "options": [
            "*=",
            "*",
            "mul=",
            "x*="
        ],
        "answer": "*="
    },
    {
        "question": "Which function converts a string to an integer?",
        "options": [
            "int()",
            "str()",
            "float()",
            "complex()"
        ],
        "answer": "int()"
    },
    {
        "question": "What is the type of the complex literal 3+4j?",
        "options": [
            "complex",
            "float",
            "int",
            "str"
        ],
        "answer": "complex"
    },
    {
        "question": "How can you represent a complex number with real part 2 and imaginary part 3?",
        "options": [
            "2+3i",
            "2+3j",
            "complex(2, 3)",
            "Both 2+3j and complex(2, 3)"
        ],
        "answer": "Both 2+3j and complex(2, 3)"
    },
    {
        "question": "What does the abs() function return for -100?",
        "options": [
            "100",
            "-100",
            "0",
            "Error"
        ],
        "answer": "100"
    },
    {
        "question": "What is the result of round(3.14159, 2)?",
        "options": [
            "3.14",
            "3.15",
            "3.141",
            "3.1"
        ],
        "answer": "3.14"
    },
    {
        "question": "Which data type is used to store text in Python?",
        "options": [
            "str",
            "int",
            "bool",
            "float"
        ],
        "answer": "str"
    },
    {
        "question": "How do you check the length of the string 'Python'?",
        "options": [
            "len('Python')",
            "'Python'.length",
            "'Python'.count()",
            "length('Python')"
        ],
        "answer": "len('Python')"
    },
    {
        "question": "Which function converts any object to its string representation?",
        "options": [
            "str()",
            "repr()",
            "format()",
            "toString()"
        ],
        "answer": "str()"
    },
    {
        "question": "What is the output type of 7 // 2?",
        "options": [
            "int",
            "float",
            "complex",
            "str"
        ],
        "answer": "int"
    },
    {
        "question": "Which function converts a value to a float?",
        "options": [
            "float()",
            "int()",
            "str()",
            "complex()"
        ],
        "answer": "float()"
    },
    {
        "question": "What is the result of 3 ** 3?",
        "options": [
            "27",
            "9",
            "6",
            "Error"
        ],
        "answer": "27"
    },
    {
        "question": "Which operator performs addition in Python?",
        "options": [
            "+",
            "-",
            "*",
            "/"
        ],
        "answer": "+"
    },
    {
        "question": "What will the expression 2 + 3 * 4 evaluate to?",
        "options": [
            "14",
            "20",
            "12",
            "Error"
        ],
        "answer": "14"
    },
    {
        "question": "Which operator is used to compare two values for equality?",
        "options": [
            "==",
            "=",
            "equals",
            "!="
        ],
        "answer": "=="
    },
    {
        "question": "What is the result of 10 // 3 in Python?",
        "options": [
            "3",
            "3.33",
            "4",
            "Error"
        ],
        "answer": "3"
    },
    {
        "question": "What is the output of 2 ** 3 ** 2?",
        "options": [
            "512",
            "64",
            "256",
            "None"
        ],
        "answer": "512"
    },
    {
        "question": "Which operator checks if two variables refer to the same object?",
        "options": [
            "is",
            "==",
            "eq",
            "matches"
        ],
        "answer": "is"
    },
    {
        "question": "What is the result of True and False?",
        "options": [
            "False",
            "True",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "What does the not operator do to a boolean value?",
        "options": [
            "Inverts it",
            "Returns the same value",
            "Converts it to int",
            "Compares it"
        ],
        "answer": "Inverts it"
    },
    {
        "question": "What is the output of 5 | 1 using bitwise OR?",
        "options": [
            "5",
            "1",
            "7",
            "Error"
        ],
        "answer": "5"
    },
    {
        "question": "Which operator performs bitwise XOR?",
        "options": [
            "^",
            "|",
            "&",
            "~"
        ],
        "answer": "^"
    },
    {
        "question": "What is the output of ~0 in Python?",
        "options": [
            "-1",
            "0",
            "1",
            "Error"
        ],
        "answer": "-1"
    },
    {
        "question": "What is the boolean value of an empty string?",
        "options": [
            "False",
            "True",
            "None",
            "Error"
        ],
        "answer": "False"
    },
    {
        "question": "Which operator is used to check if an element exists in a list?",
        "options": [
            "in",
            "contains",
            "has",
            "exists"
        ],
        "answer": "in"
    },
    {
        "question": "What does the walrus operator (:=) allow you to do?",
        "options": [
            "Assign values within an expression",
            "Compare two values",
            "Multiply values",
            "Raise exceptions"
        ],
        "answer": "Assign values within an expression"
    },
    {
        "question": "Which method converts a string to all uppercase letters?",
        "options": [
            "upper()",
            "lower()",
            "capitalize()",
            "swapcase()"
        ],
        "answer": "upper()"
    },
    {
        "question": "What is the output of 'OpenAI'.lower()?",
        "options": [
            "openai",
            "OPENAI",
            "OpenAI",
            "Error"
        ],
        "answer": "openai"
    },
    {
        "question": "How do you access the first character of the string 'Hello'?",
        "options": [
            "'Hello'[0]",
            "'Hello'[1]",
            "'Hello'.first()",
            "'Hello'.charAt(0)"
        ],
        "answer": "'Hello'[0]"
    },
    {
        "question": "Which method checks if all characters in a string are alphabetic?",
        "options": [
            "isalpha()",
            "isdigit()",
            "isalnum()",
            "isupper()"
        ],
        "answer": "isalpha()"
    },
    {
        "question": "What does the join() method do?",
        "options": [
            "Joins a list of strings into one string",
            "Splits a string into a list",
            "Replaces substrings",
            "Formats a string"
        ],
        "answer": "Joins a list of strings into one string"
    },
    {
        "question": "What is the output of 'Python'[::-1]?",
        "options": [
            "nohtyP",
            "Python",
            "Error",
            "None"
        ],
        "answer": "nohtyP"
    },
    {
        "question": "Which operator concatenates two lists?",
        "options": [
            "+",
            "*",
            "append()",
            "extend()"
        ],
        "answer": "+"
    },
    {
        "question": "What is the output of [1, 2, 3][0]?",
        "options": [
            "1",
            "2",
            "3",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "Which method removes and returns the last element from a list?",
        "options": [
            "pop()",
            "remove()",
            "del",
            "clear()"
        ],
        "answer": "pop()"
    },
    {
        "question": "How do you create a shallow copy of a list called items?",
        "options": [
            "items.copy()",
            "items[:]",
            "list(items)",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "question": "Which function returns True if any element of an iterable is true?",
        "options": [
            "any()",
            "all()",
            "sum()",
            "min()"
        ],
        "answer": "any()"
    },
    {
        "question": "Which function returns True if all elements of an iterable are true?",
        "options": [
            "all()",
            "any()",
            "min()",
            "max()"
        ],
        "answer": "all()"
    },
    {
        "question": "What is the output of min([3, 1, 4])?",
        "options": [
            "1",
            "3",
            "4",
            "Error"
        ],
        "answer": "1"
    },
    {
        "question": "What does sorted([3, 1, 2]) return?",
        "options": [
            "[1, 2, 3]",
            "[3, 2, 1]",
            "[1, 3, 2]",
            "Error"
        ],
        "answer": "[1, 2, 3]"
    },
    {
        "question": "Which syntax creates a generator expression?",
        "options": [
            "(x for x in iterable)",
            "[x for x in iterable]",
            "{x for x in iterable}",
            "<x for x in iterable>"
        ],
        "answer": "(x for x in iterable)"
    },
    {
        "question": "Which collection type is immutable?",
        "options": [
            "tuple",
            "list",
            "set",
            "dict"
        ],
        "answer": "tuple"
    },
    {
        "question": "How do you create a tuple with one element 42?",
        "options": [
            "(42,)",
            "(42)",
            "[42]",
            "{42}"
        ],
        "answer": "(42,)"
    },
    {
        "question": "Can tuples contain mixed data types?",
        "options": [
            "Yes",
            "No",
            "Only numbers",
            "Only strings"
        ],
        "answer": "Yes"
    },
    {
        "question": "What does the tuple() function do when passed a list?",
        "options": [
            "Converts the list to a tuple",
            "Makes a copy of the list",
            "Sorts the list",
            "Raises an error"
        ],
        "answer": "Converts the list to a tuple"
    },
    {
        "question": "Which collection type does not allow duplicate elements?",
        "options": [
            "set",
            "list",
            "tuple",
            "dict"
        ],
        "answer": "set"
    },
    {
        "question": "How do you create an empty set?",
        "options": [
            "set()",
            "{}",
            "[]",
            "None"
        ],
        "answer": "set()"
    },
    {
        "question": "What is the output of {1, 2, 2, 3}?",
        "options": [
            "{1, 2, 3}",
            "{1, 2, 2, 3}",
            "Error",
            "None"
        ],
        "answer": "{1, 2, 3}"
    },
    {
        "question": "Which operator returns the union of two sets?",
        "options": [
            "|",
            "&",
            "^",
            "-"
        ],
        "answer": "|"
    },
    {
        "question": "How do you check if an element 5 is in set s?",
        "options": [
            "5 in s",
            "s.contains(5)",
            "s[5]",
            "None"
        ],
        "answer": "5 in s"
    },
    {
        "question": "Which collection type stores key-value pairs?",
        "options": [
            "dictionary",
            "list",
            "tuple",
            "set"
        ],
        "answer": "dictionary"
    },
    {
        "question": "How do you access the value for key 'key' in dictionary d?",
        "options": [
            "d['key']",
            "d.get('key')",
            "Both A and B",
            "d.key"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "What does d.keys() return in Python 3?",
        "options": [
            "A view of keys",
            "A list of keys",
            "A tuple of keys",
            "None"
        ],
        "answer": "A view of keys"
    },
    {
        "question": "How do you remove a key 'k' from dictionary d?",
        "options": [
            "del d['k']",
            "d.pop('k')",
            "Both A and B",
            "d.remove('k')"
        ],
        "answer": "Both A and B"
    },
    {
        "question": "Which function returns the sum of the items in an iterable?",
        "options": [
            "sum()",
            "add()",
            "total()",
            "aggregate()"
        ],
        "answer": "sum()"
    },
    {
        "question": "Which keyword is used to define a function in Python?",
        "options": [
            "def",
            "func",
            "function",
            "lambda"
        ],
        "answer": "def"
    },
    {
        "question": "What does a lambda function create?",
        "options": [
            "An anonymous function",
            "A variable",
            "A class",
            "A module"
        ],
        "answer": "An anonymous function"
    },
    {
        "question": "Can a function in Python return multiple values?",
        "options": [
            "Yes",
            "No",
            "Only as a tuple",
            "Only as a list"
        ],
        "answer": "Yes"
    },
    {
        "question": "What does the return statement do in a function?",
        "options": [
            "Exits the function and returns a value",
            "Prints a value",
            "Terminates the program",
            "None"
        ],
        "answer": "Exits the function and returns a value"
    },
    {
        "question": "What is recursion in programming?",
        "options": [
            "A function calling itself",
            "A loop inside a function",
            "An iterative process",
            "None"
        ],
        "answer": "A function calling itself"
    },
    {
        "question": "Which function applies a function to every item in an iterable?",
        "options": [
            "map()",
            "filter()",
            "reduce()",
            "zip()"
        ],
        "answer": "map()"
    },
    {
        "question": "What does the filter() function do?",
        "options": [
            "Returns items meeting a condition",
            "Applies a function",
            "Reduces an iterable",
            "Zips iterables together"
        ],
        "answer": "Returns items meeting a condition"
    },
    {
        "question": "Which function from functools applies a function cumulatively to the items of an iterable?",
        "options": [
            "reduce()",
            "map()",
            "filter()",
            "zip()"
        ],
        "answer": "reduce()"
    },
    {
        "question": "Which function combines elements from multiple iterables element-wise?",
        "options": [
            "zip()",
            "map()",
            "filter()",
            "reduce()"
        ],
        "answer": "zip()"
    },
    {
        "question": "How do you convert the result of map() to a list?",
        "options": [
            "list()",
            "tuple()",
            "set()",
            "dict()"
        ],
        "answer": "list()"
    },
    {
        "question": "What file extension is used for Python source code?",
        "options": [
            ".py",
            ".pym",
            ".pyc",
            ".pyo"
        ],
        "answer": ".py"
    },
    {
        "question": "How do you import a module named 'os'?",
        "options": [
            "import os",
            "include os",
            "require os",
            "using os"
        ],
        "answer": "import os"
    },
    {
        "question": "What is the purpose of the __init__.py file in a package?",
        "options": [
            "Initializes the package",
            "Defines global variables",
            "Compiles the code",
            "None"
        ],
        "answer": "Initializes the package"
    },
    {
        "question": "Which keyword lets you import specific attributes from a module?",
        "options": [
            "from",
            "import",
            "using",
            "include"
        ],
        "answer": "from"
    },
    {
        "question": "What does re.search() do?",
        "options": [
            "Searches a string for a regex pattern",
            "Matches a pattern only at the beginning",
            "Splits a string at a regex pattern",
            "None"
        ],
        "answer": "Searches a string for a regex pattern"
    },
    {
        "question": "Which regex function returns an iterator yielding match objects?",
        "options": [
            "re.finditer()",
            "re.findall()",
            "re.match()",
            "re.split()"
        ],
        "answer": "re.finditer()"
    },
    {
        "question": "What is the purpose of the re.sub() function?",
        "options": [
            "Replaces occurrences of a pattern",
            "Finds all matches",
            "Splits a string",
            "None"
        ],
        "answer": "Replaces occurrences of a pattern"
    },
    {
        "question": "Which file mode opens a file for reading in text mode?",
        "options": [
            "'r'",
            "'w'",
            "'a'",
            "'rb'"
        ],
        "answer": "'r'"
    },
    {
        "question": "What does the file mode 'wb' do?",
        "options": [
            "Opens a file for writing in binary mode",
            "Opens a file for reading in binary mode",
            "Appends to a file in text mode",
            "None"
        ],
        "answer": "Opens a file for writing in binary mode"
    },
    {
        "question": "What advantage does the 'with' statement provide in file handling?",
        "options": [
            "Automatic file closure",
            "Faster file access",
            "Increased security",
            "None"
        ],
        "answer": "Automatic file closure"
    },
    {
        "question": "How do you open a file for appending?",
        "options": [
            "'a'",
            "'r'",
            "'w'",
            "'x'"
        ],
        "answer": "'a'"
    },
    {
        "question": "Which keyword is used to define a class in Python?",
        "options": [
            "class",
            "def",
            "struct",
            "object"
        ],
        "answer": "class"
    },
    {
        "question": "What is the purpose of the __init__() method?",
        "options": [
            "Initialize a new object",
            "Destroy an object",
            "Return object info",
            "None"
        ],
        "answer": "Initialize a new object"
    },
    {
        "question": "How do you create an instance of a class named 'Dog'?",
        "options": [
            "Dog()",
            "new Dog()",
            "Dog.new()",
            "create Dog()"
        ],
        "answer": "Dog()"
    },
    {
        "question": "Which function checks if an object is an instance of a certain class?",
        "options": [
            "isinstance()",
            "issubclass()",
            "type()",
            "check()"
        ],
        "answer": "isinstance()"
    },
    {
        "question": "What does the __str__() method do?",
        "options": [
            "Returns a string representation of the object",
            "Initializes the object",
            "Deletes the object",
            "None"
        ],
        "answer": "Returns a string representation of the object"
    },
    {
        "question": "What is polymorphism in Python?",
        "options": [
            "Different classes can implement methods of the same name",
            "A class has multiple constructors",
            "A function calls itself recursively",
            "None"
        ],
        "answer": "Different classes can implement methods of the same name"
    },
    {
        "question": "Which built-in function returns a unique identifier for an object?",
        "options": [
            "id()",
            "type()",
            "hash()",
            "repr()"
        ],
        "answer": "id()"
    },
    {
        "question": "Can functions in Python be nested within other functions?",
        "options": [
            "Yes",
            "No",
            "Only lambdas",
            "Only methods"
        ],
        "answer": "Yes"
    },
    {
        "question": "What is a higher-order function?",
        "options": [
            "A function that takes or returns another function",
            "A function with more than three parameters",
            "A recursive function",
            "None"
        ],
        "answer": "A function that takes or returns another function"
    },
    {
        "question": "Which function returns an object's attributes as a dictionary?",
        "options": [
            "vars()",
            "dir()",
            "locals()",
            "globals()"
        ],
        "answer": "vars()"
    },
    {
        "question": "Which function returns the string representation of an object suitable for debugging?",
        "options": [
            "repr()",
            "str()",
            "format()",
            "print()"
        ],
        "answer": "repr()"
    },
    {
        "question": "How do you denote a raw string in Python?",
        "options": [
            "Prefix with r or R",
            "Suffix with r",
            "Enclose in <>",
            "None"
        ],
        "answer": "Prefix with r or R"
    },
    {
        "question": "What happens when you call iter() on a list?",
        "options": [
            "Returns an iterator",
            "Returns a copy of the list",
            "Returns the list itself",
            "Raises an error"
        ],
        "answer": "Returns an iterator"
    },
    {
        "question": "Which keyword is used for exception handling in Python?",
        "options": [
            "try/except",
            "catch",
            "handle",
            "error"
        ],
        "answer": "try/except"
    },
    {
        "question": "What is the purpose of a finally block in exception handling?",
        "options": [
            "Executes code regardless of an exception",
            "Catches exceptions",
            "Reraises exceptions",
            "None"
        ],
        "answer": "Executes code regardless of an exception"
    },
    {
        "question": "How do you raise an exception manually in Python?",
        "options": [
            "raise Exception",
            "throw Exception",
            "error Exception",
            "None"
        ],
        "answer": "raise Exception"
    },
    {
        "question": "Which exception is raised when attempting to access a non-existent key in a dictionary?",
        "options": [
            "KeyError",
            "IndexError",
            "ValueError",
            "LookupError"
        ],
        "answer": "KeyError"
    },
    {
        "question": "What is the result of bool('False')?",
        "options": [
            "True",
            "False",
            "Error",
            "None"
        ],
        "answer": "True"
    },
    {
        "question": "Which built-in function returns the maximum value from an iterable?",
        "options": [
            "max()",
            "min()",
            "sum()",
            "abs()"
        ],
        "answer": "max()"
    },
    {
        "question": "Which function converts an object to its string representation?",
        "options": [
            "str()",
            "int()",
            "repr()",
            "format()"
        ],
        "answer": "str()"
    },
  {
    "question": "What is the correct file extension for Python files?",
    "options": ["A. .pyth", "B. .pt", "C. .py", "D. .pyt"],
    "answer": "C"
  },
  {
    "question": "Which of the following is used to print something in Python?",
    "options": ["A. echo()", "B. printf()", "C. print()", "D. out()"],
    "answer": "C"
  },
  {
    "question": "Which version introduced type hinting in Python?",
    "options": ["A. 2.7", "B. 3.5", "C. 3.0", "D. 3.9"],
    "answer": "B"
  },
  {
    "question": "What symbol is used to start a comment in Python?",
    "options": ["A. //", "B. <!--", "C. #", "D. --"],
    "answer": "C"
  },
  {
    "question": "Which of the following is not a Python keyword?",
    "options": ["A. def", "B. return", "C. func", "D. import"],
    "answer": "C"
  },
  {
    "question": "Which function is used to get the data type of a variable?",
    "options": ["A. typeof()", "B. gettype()", "C. type()", "D. datatype()"],
    "answer": "C"
  },
  {
    "question": "Which of the following is a valid variable name in Python?",
    "options": ["A. 1num", "B. num_1", "C. num-1", "D. num 1"],
    "answer": "B"
  },
  {
    "question": "What is the output of: print(2 + 3)?",
    "options": ["A. 23", "B. 2+3", "C. 5", "D. Error"],
    "answer": "C"
  },
  {
    "question": "Which function is used to take input from the user?",
    "options": ["A. input()", "B. get()", "C. read()", "D. fetch()"],
    "answer": "A"
  },
  {
    "question": "What will be the output of: print('Hello' + 'World')?",
    "options": ["A. Hello World", "B. HelloWorld", "C. Hello+World", "D. Error"],
    "answer": "B"
  },
  {
    "question": "How do you create a variable in Python?",
    "options": ["A. var x = 10", "B. let x = 10", "C. x = 10", "D. int x = 10"],
    "answer": "C"
  },
  {
    "question": "What is the output of: print(type('Hello'))?",
    "options": ["A. str", "B. <class 'string'>", "C. <class 'str'>", "D. string"],
    "answer": "C"
  },
  {
    "question": "Which of the following will NOT cause an error?",
    "options": ["A. x = '5' + 3", "B. y = 10 / 0", "C. print(name)", "D. print('Hello')"],
    "answer": "D"
  },
  {
    "question": "Python is a ______ typed language.",
    "options": ["A. weakly", "B. statically", "C. strongly", "D. partially"],
    "answer": "C"
  },
  {
    "question": "Which of the following is a built-in data type?",
    "options": ["A. char", "B. string", "C. int", "D. num"],
    "answer": "C"
  },
  {
    "question": "What is the output of: print(3 * '7')?",
    "options": ["A. 777", "B. 21", "C. '777'", "D. Error"],
    "answer": "C"
  },
  {
    "question": "What is the correct way to define a function in Python?",
    "options": ["A. function myFunc():", "B. def myFunc():", "C. define myFunc():", "D. fun myFunc():"],
    "answer": "B"
  },
  {
    "question": "What is the output of: print('5' + '5')?",
    "options": ["A. 55", "B. 10", "C. 5+5", "D. Error"],
    "answer": "A"
  },
  {
    "question": "What is the correct way to add a comment on a single line in Python?",
    "options": ["A. -- comment", "B. // comment", "C. /* comment */", "D. # comment"],
    "answer": "D"
  },
  {
    "question": "What is the keyword used to define a function?",
    "options": ["A. func", "B. function", "C. def", "D. define"],
    "answer": "C"
  },
  {
    "question": "Which of these is not a Python data type?",
    "options": ["A. list", "B. float", "C. string", "D. real"],
    "answer": "D"
  },
  {
    "question": "Python files are saved with the extension:",
    "options": ["A. .p", "B. .py", "C. .python", "D. .pt"],
    "answer": "B"
  },
  {
    "question": "Which is the correct way to start the interactive Python shell?",
    "options": ["A. run python", "B. python", "C. start python", "D. open python"],
    "answer": "B"
  },
  {
    "question": "What does the print() function do?",
    "options": ["A. Reads input", "B. Displays output", "C. Stops program", "D. Writes to file"],
    "answer": "B"
  },
  {
    "question": "Which of the following statements is true about Python?",
    "options": ["A. Python is compiled", "B. Python is low-level", "C. Python is interpreted", "D. Python is only for web"],
    "answer": "C"
  },
    
{
  "question": "Which keyword is used to define a block of code in Python?",
  "options": ["A. function", "B. define", "C. def", "D. block"],
  "answer": "C"
},
{
  "question": "What is the output of: print(10 // 3)?",
  "options": ["A. 3.33", "B. 3", "C. 4", "D. 3.0"],
  "answer": "B"
},
{
  "question": "What will print(type(10.5)) return?",
  "options": ["A. int", "B. float", "C. decimal", "D. number"],
  "answer": "B"
},
{
  "question": "Which of the following is used to define a constant in Python?",
  "options": ["A. const PI = 3.14", "B. PI = 3.14", "C. define PI 3.14", "D. let PI = 3.14"],
  "answer": "B"
},
{
  "question": "What does the input() function return?",
  "options": ["A. int", "B. float", "C. string", "D. boolean"],
  "answer": "C"
},
{
  "question": "Which of the following will raise a syntax error?",
  "options": ["A. print('Hello')", "B. if 5 > 2 print('Yes')", "C. x = 5", "D. def func(): pass"],
  "answer": "B"
},
{
  "question": "What will be the output of: print(bool(0))?",
  "options": ["A. True", "B. False", "C. 0", "D. Error"],
  "answer": "B"
},
{
  "question": "What does dynamic typing mean in Python?",
  "options": ["A. You must declare variable types", "B. Variables change type automatically", "C. Code runs faster", "D. Variables cannot be changed"],
  "answer": "B"
},
{
  "question": "Which operator is used for exponentiation in Python?",
  "options": ["A. ^", "B. **", "C. exp", "D. ^^"],
  "answer": "B"
},
{
  "question": "How do you write a multi-line comment in Python?",
  "options": ["A. /* comment */", "B. # comment", "C. ''' comment '''", "D. // comment"],
  "answer": "C"
},
{
  "question": "Which of these is a floating-point number?",
  "options": ["A. 10", "B. '10'", "C. 10.0", "D. True"],
  "answer": "C"
},
{
  "question": "What does the '//' operator do in Python?",
  "options": ["A. Modulus", "B. Division", "C. Floor division", "D. Exponentiation"],
  "answer": "C"
},
{
  "question": "What is the result of: print(3 == 3.0)?",
  "options": ["A. False", "B. True", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which of the following is not valid Python syntax?",
  "options": ["A. print('Hi')", "B. x = 5", "C. if x == 5:", "D. let x = 5"],
  "answer": "D"
},
{
  "question": "Which keyword is used to exit a function early?",
  "options": ["A. exit", "B. break", "C. stop", "D. return"],
  "answer": "D"
},
{
  "question": "Which of the following lines assigns a string to a variable?",
  "options": ["A. name = 123", "B. name = 'John'", "C. name = True", "D. name = 10.5"],
  "answer": "B"
},
{
  "question": "Which method can you use to check the data type of a variable?",
  "options": ["A. typeof()", "B. checktype()", "C. type()", "D. datatype()"],
  "answer": "C"
},
{
  "question": "How do you convert a string '123' to an integer?",
  "options": ["A. str(123)", "B. int('123')", "C. float('123')", "D. string(123)"],
  "answer": "B"
},
{
  "question": "Which one is a boolean value in Python?",
  "options": ["A. TRUE", "B. Yes", "C. False", "D. 'False'"],
  "answer": "C"
},
{
  "question": "What does the % operator return?",
  "options": ["A. Quotient", "B. Product", "C. Exponent", "D. Remainder"],
  "answer": "D"
},
{
  "question": "What is the result of: print(5 != 3)?",
  "options": ["A. False", "B. True", "C. Error", "D. 0"],
  "answer": "B"
},
{
  "question": "Which of these is used for single-line comments in Python?",
  "options": ["A. <!--", "B. //", "C. #", "D. /*"],
  "answer": "C"
},
{
  "question": "Which statement is used to create a function in Python?",
  "options": ["A. def", "B. function", "C. create", "D. method"],
  "answer": "A"
},
{
  "question": "Which symbol is used for assignment in Python?",
  "options": ["A. =", "B. ==", "C. := ", "D. :="],
  "answer": "A"
},
{
  "question": "What is the default data type of input() function?",
  "options": ["A. int", "B. float", "C. str", "D. bool"],
  "answer": "C"
},
{
  "question": "What is the output of: print(2 ** 3)?",
  "options": ["A. 6", "B. 8", "C. 9", "D. 5"],
  "answer": "B"
},
{
  "question": "Which function converts a number to a string?",
  "options": ["A. str()", "B. int()", "C. toString()", "D. float()"],
  "answer": "A"
},
{
  "question": "How do you declare a variable that stores a boolean value?",
  "options": ["A. isTrue = 'True'", "B. isTrue = True", "C. isTrue = true", "D. bool isTrue = True"],
  "answer": "B"
},
{
  "question": "What will be the output of: print('3' * 2)?",
  "options": ["A. 6", "B. 33", "C. 3 * 2", "D. Error"],
  "answer": "B"
},
{
  "question": "Which keyword is used for conditional branching?",
  "options": ["A. case", "B. when", "C. if", "D. option"],
  "answer": "C"
},
{
  "question": "Which of the following is not a valid Python identifier?",
  "options": ["A. _value", "B. 2value", "C. value2", "D. value_2"],
  "answer": "B"
},
{
  "question": "Which function is used to get input from the user in Python?",
  "options": ["A. read()", "B. get()", "C. input()", "D. scan()"],
  "answer": "C"
},
{
  "question": "What is the result of: print(4 % 2)?",
  "options": ["A. 2", "B. 1", "C. 0", "D. 4"],
  "answer": "C"
},
{
  "question": "What is the result of: print(True and False)?",
  "options": ["A. True", "B. False", "C. 0", "D. 1"],
  "answer": "B"
},
{
  "question": "Which keyword is used to start a loop in Python?",
  "options": ["A. for", "B. loop", "C. iterate", "D. repeat"],
  "answer": "A"
},
{
  "question": "What is the correct syntax to assign a value to a variable?",
  "options": ["A. x == 10", "B. let x = 10", "C. x := 10", "D. x = 10"],
  "answer": "D"
},
{
  "question": "What type of language is Python?",
  "options": ["A. Compiled", "B. Assembled", "C. Interpreted", "D. Machine"],
  "answer": "C"
},
{
  "question": "Which is used to create an empty string in Python?",
  "options": ["A. ''", "B. null", "C. None", "D. 0"],
  "answer": "A"
},
{
  "question": "Which of the following lines of code will print 'Hello World'?",
  "options": ["A. echo('Hello World')", "B. print('Hello World')", "C. echo Hello World", "D. print Hello World"],
  "answer": "B"
},
{
  "question": "How would you check if two values are equal in Python?",
  "options": ["A. =", "B. !=", "C. ==", "D. ><"],
  "answer": "C"
},
{
  "question": "What will be the output of: print(len('Python'))?",
  "options": ["A. 5", "B. 6", "C. 7", "D. Error"],
  "answer": "B"
},
{
  "question": "Which function is used to get the length of a string?",
  "options": ["A. size()", "B. count()", "C. length()", "D. len()"],
  "answer": "D"
},
{
  "question": "What is the output of: print(10 > 5)?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which of these is not a comparison operator?",
  "options": ["A. ==", "B. !=", "C. >=", "D. ="],
  "answer": "D"
},
{
  "question": "Which of these will raise a syntax error?",
  "options": ["A. x = 5", "B. print('x')", "C. if x > 2 print('x')", "D. y = 'Hello'"],
  "answer": "C"
},
{
  "question": "What is the result of: print(not True)?",
  "options": ["A. False", "B. True", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following is a valid string in Python?",
  "options": ["A. 'Hello", "B. Hello'", "C. 'Hello'", "D. Hello"],
  "answer": "C"
},
{
  "question": "What is the result of: print(9 / 2)?",
  "options": ["A. 4.0", "B. 4", "C. 4.5", "D. 5"],
  "answer": "C"
},
{
  "question": "Which of these symbols is used to check if a value is not equal?",
  "options": ["A. =!", "B. !=", "C. ><", "D. <>"],
  "answer": "B"
},
{
  "question": "What will the expression 2 + 3 * 4 evaluate to?",
  "options": ["A. 20", "B. 14", "C. 24", "D. 18"],
  "answer": "B"
},
{
  "question": "Which function is used to display output on the screen?",
  "options": ["A. write()", "B. echo()", "C. print()", "D. show()"],
  "answer": "C"
},
{
  "question": "What does indentation indicate in Python?",
  "options": ["A. It is optional", "B. It separates lines", "C. It defines code blocks", "D. It comments code"],
  "answer": "C"
},
{
  "question": "Which of the following is a valid variable name in Python?",
  "options": ["A. 123value", "B. value_1", "C. value-1", "D. value!"],
  "answer": "B"
},
{
  "question": "Which character is used for line continuation in Python?",
  "options": ["A. /", "B. \\", "C. _", "D. -"],
  "answer": "B"
},
{
  "question": "What is the data type of: print(type(True))?",
  "options": ["A. str", "B. int", "C. bool", "D. float"],
  "answer": "C"
},
{
  "question": "How would you comment a single line in Python?",
  "options": ["A. // comment", "B. /* comment */", "C. <!-- comment -->", "D. # comment"],
  "answer": "D"
},
{
  "question": "What will be the result of: print(7 % 3)?",
  "options": ["A. 1", "B. 2", "C. 3", "D. 0"],
  "answer": "B"
},
{
  "question": "What type of value does the input() function always return?",
  "options": ["A. int", "B. str", "C. float", "D. bool"],
  "answer": "B"
},
{
  "question": "Which keyword is used to check a condition in Python?",
  "options": ["A. when", "B. match", "C. if", "D. for"],
  "answer": "C"
},
{
  "question": "Which keyword is used to declare a function?",
  "options": ["A. define", "B. def", "C. func", "D. lambda"],
  "answer": "B"
},
{
  "question": "What is the result of: print(2 + 2 * 2)?",
  "options": ["A. 8", "B. 6", "C. 4", "D. 12"],
  "answer": "B"
},
{
  "question": "Which function would you use to convert a float to an integer?",
  "options": ["A. str()", "B. float()", "C. int()", "D. round()"],
  "answer": "C"
},
{
  "question": "What is the result of: print('Python' + '101')?",
  "options": ["A. Python 101", "B. Python101", "C. Error", "D. 202"],
  "answer": "B"
},
{
  "question": "Which statement is used to terminate a loop early?",
  "options": ["A. stop", "B. exit", "C. break", "D. end"],
  "answer": "C"
},
{
  "question": "Which of the following is a correct way to write a string?",
  "options": ["A. 'Python", "B. Python'", "C. 'Python'", "D. Python"],
  "answer": "C"
},
{
  "question": "Which of these is a keyword in Python?",
  "options": ["A. var", "B. let", "C. return", "D. define"],
  "answer": "C"
},
{
  "question": "What will be the output of: print(3 * 'A')?",
  "options": ["A. AAA", "B. 3A", "C. Error", "D. A3"],
  "answer": "A"
},
{
  "question": "Which data type represents whole numbers?",
  "options": ["A. float", "B. int", "C. str", "D. bool"],
  "answer": "B"
},
{
  "question": "What is the correct way to check if two variables are equal?",
  "options": ["A. a = b", "B. a == b", "C. a := b", "D. a equals b"],
  "answer": "B"
},
{
  "question": "What will be the output of: print('2' + '2')?",
  "options": ["A. 4", "B. 22", "C. Error", "D. 2 2"],
  "answer": "B"
},
{
  "question": "Which character is used to indicate a block of code in Python?",
  "options": ["A. {", "B. begin", "C. :", "D. ;"],
  "answer": "C"
},
{
  "question": "What will be the result of: print(3 > 5)?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which of the following is not a core data type in Python?",
  "options": ["A. int", "B. float", "C. string", "D. real"],
  "answer": "D"
},
{
  "question": "What is the result of: print(type(3.0))?",
  "options": ["A. int", "B. float", "C. str", "D. double"],
  "answer": "B"
},
{
  "question": "Which of these is used to check multiple conditions?",
  "options": ["A. while", "B. if", "C. elif", "D. switch"],
  "answer": "C"
},
{
  "question": "Which of the following is an example of an integer in Python?",
  "options": ["A. '42'", "B. 42.0", "C. 42", "D. 'int'"],
  "answer": "C"
},
{
  "question": "Which data type is used to represent text?",
  "options": ["A. str", "B. int", "C. bool", "D. float"],
  "answer": "A"
},
{
  "question": "What will type(3.14) return?",
  "options": ["A. int", "B. float", "C. str", "D. bool"],
  "answer": "B"
},
{
  "question": "What is the data type of the result of 5 // 2?",
  "options": ["A. float", "B. int", "C. bool", "D. str"],
  "answer": "B"
},
{
  "question": "Which of the following is a boolean value?",
  "options": ["A. 'True'", "B. Yes", "C. 1", "D. True"],
  "answer": "D"
},
{
  "question": "What will be the result of type('123')?",
  "options": ["A. int", "B. float", "C. str", "D. list"],
  "answer": "C"
},
{
  "question": "Which of these is a floating-point number?",
  "options": ["A. '2.5'", "B. 2", "C. 2.0", "D. True"],
  "answer": "C"
},
{
  "question": "What is the result of bool(0)?",
  "options": ["A. True", "B. False", "C. 0", "D. Error"],
  "answer": "B"
},
{
  "question": "Which function converts a string to an integer?",
  "options": ["A. str()", "B. int()", "C. bool()", "D. float()"],
  "answer": "B"
},
{
  "question": "What does type(10.0) return?",
  "options": ["A. <class 'float'>", "B. <class 'int'>", "C. float", "D. decimal"],
  "answer": "A"
},
{
  "question": "Which of the following expressions evaluates to False?",
  "options": ["A. bool(1)", "B. bool('abc')", "C. bool(0)", "D. bool([1,2])"],
  "answer": "C"
},
{
  "question": "What will be the output of: print(type(False))?",
  "options": ["A. bool", "B. str", "C. int", "D. None"],
  "answer": "A"
},
{
  "question": "Which of these types is immutable?",
  "options": ["A. list", "B. dict", "C. str", "D. set"],
  "answer": "C"
},
{
  "question": "What will type([1, 2, 3]) return?",
  "options": ["A. tuple", "B. list", "C. set", "D. dict"],
  "answer": "B"
},
{
  "question": "Which keyword represents absence of a value?",
  "options": ["A. null", "B. none", "C. None", "D. empty"],
  "answer": "C"
},
{
  "question": "What is the type of {'a': 1, 'b': 2}?",
  "options": ["A. list", "B. tuple", "C. dict", "D. set"],
  "answer": "C"
},
{
  "question": "Which data type supports key-value pairs?",
  "options": ["A. list", "B. tuple", "C. dict", "D. set"],
  "answer": "C"
},
{
  "question": "Which function converts a number to a string?",
  "options": ["A. toString()", "B. str()", "C. string()", "D. chr()"],
  "answer": "B"
},
{
  "question": "What is the result of float('5')?",
  "options": ["A. 5", "B. '5.0'", "C. 5.0", "D. Error"],
  "answer": "C"
},
{
  "question": "Which of the following can store duplicate values?",
  "options": ["A. set", "B. dict", "C. list", "D. frozenset"],
  "answer": "C"
},
{
  "question": "What is the type of the value returned by input()?",
  "options": ["A. int", "B. str", "C. bool", "D. float"],
  "answer": "B"
},
{
  "question": "Which value evaluates to False when converted to a boolean?",
  "options": ["A. 1", "B. 'False'", "C. []", "D. [0]"],
  "answer": "C"
},
{
  "question": "Which of the following is a mutable data type?",
  "options": ["A. str", "B. list", "C. tuple", "D. int"],
  "answer": "B"
},
{
  "question": "Which function will convert 3.75 to 3?",
  "options": ["A. float()", "B. int()", "C. str()", "D. round()"],
  "answer": "B"
},
{
  "question": "What is the result of int(True)?",
  "options": ["A. 1", "B. 0", "C. True", "D. Error"],
  "answer": "A"
},
{
  "question": "What is the result of: type((1, 2, 3))?",
  "options": ["A. list", "B. tuple", "C. set", "D. dict"],
  "answer": "B"
},
{
  "question": "Which of these is a correct boolean value?",
  "options": ["A. 'true'", "B. 0", "C. TRUE", "D. True"],
  "answer": "D"
},
{
  "question": "Which Python type allows you to store unique unordered elements?",
  "options": ["A. list", "B. dict", "C. tuple", "D. set"],
  "answer": "D"
},
{
  "question": "Which of the following represents a string?",
  "options": ["A. \"Hello\"", "B. 42", "C. True", "D. 3.14"],
  "answer": "A"
},
{
  "question": "What is the output of: bool('')?",
  "options": ["A. True", "B. False", "C. ''", "D. None"],
  "answer": "B"
},
{
  "question": "Which function would convert a boolean True to an integer?",
  "options": ["A. float()", "B. str()", "C. int()", "D. bool()"],
  "answer": "C"
},
{
  "question": "What will type(None) return?",
  "options": ["A. null", "B. NoneType", "C. None", "D. type"],
  "answer": "B"
},
{
  "question": "What is the result of: type([1, 2, 3]) == list?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which type will the expression 5 + 3.0 return?",
  "options": ["A. int", "B. str", "C. float", "D. None"],
  "answer": "C"
},
{
  "question": "Which of the following is an immutable type?",
  "options": ["A. list", "B. dict", "C. set", "D. tuple"],
  "answer": "D"
},
{
  "question": "What will type({'a', 'b'}) return?",
  "options": ["A. dict", "B. tuple", "C. set", "D. list"],
  "answer": "C"
},
{
  "question": "What is the boolean result of bool([])?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which type is returned by range()?",
  "options": ["A. list", "B. range", "C. tuple", "D. set"],
  "answer": "B"
},
{
  "question": "Which is the correct way to represent a float value?",
  "options": ["A. 5", "B. 5.0", "C. '5'", "D. True"],
  "answer": "B"
},
{
  "question": "What is the result of: type(0) == int?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "What will be the output of: type('True')?",
  "options": ["A. bool", "B. str", "C. int", "D. list"],
  "answer": "B"
},
{
  "question": "Which type allows nested data structures like dictionaries inside lists?",
  "options": ["A. str", "B. list", "C. float", "D. int"],
  "answer": "B"
},
{
  "question": "Which of the following creates a dictionary?",
  "options": ["A. {'a':1, 'b':2}", "B. ['a', 'b']", "C. ('a', 'b')", "D. {'a', 'b'}"],
  "answer": "A"
},
{
  "question": "What will be the output of: int('5')?",
  "options": ["A. 5", "B. '5'", "C. Error", "D. 5.0"],
  "answer": "A"
},
{
  "question": "Which type represents true or false values?",
  "options": ["A. int", "B. str", "C. bool", "D. float"],
  "answer": "C"
},
{
  "question": "Which of these is not a valid Python type?",
  "options": ["A. double", "B. list", "C. set", "D. str"],
  "answer": "A"
},
{
  "question": "Which function can convert an integer to a float?",
  "options": ["A. int()", "B. bool()", "C. float()", "D. str()"],
  "answer": "C"
},
{
  "question": "What is the result of: bool('False')?",
  "options": ["A. False", "B. True", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which of these data types is not mutable?",
  "options": ["A. list", "B. dict", "C. set", "D. str"],
  "answer": "D"
},
{
  "question": "What is returned by type({})?",
  "options": ["A. dict", "B. set", "C. list", "D. tuple"],
  "answer": "A"
},
{
  "question": "Which of the following expressions creates an empty list?",
  "options": ["A. []", "B. {}", "C. ()", "D. set()"],
  "answer": "A"
},
{
  "question": "What is the result of len('Python')?",
  "options": ["A. 5", "B. 6", "C. 7", "D. Error"],
  "answer": "B"
},
{
  "question": "Which of the following types is unordered?",
  "options": ["A. list", "B. tuple", "C. set", "D. str"],
  "answer": "C"
},
{
  "question": "Which data type would be best for a yes/no question?",
  "options": ["A. str", "B. bool", "C. int", "D. float"],
  "answer": "B"
},
{
  "question": "What is the result of: 10 / 3?",
  "options": ["A. 3", "B. 3.3", "C. 3.3333333333333335", "D. 3.0"],
  "answer": "C"
},
{
  "question": "What does the type() function return?",
  "options": ["A. The size of a variable", "B. The name of a function", "C. The data type of a value", "D. The memory location"],
  "answer": "C"
},
{
  "question": "Which of the following is used to create a float?",
  "options": ["A. 5.0", "B. float(5)", "C. Both A and B", "D. Neither A nor B"],
  "answer": "C"
},
{
  "question": "Which of these values evaluates to True?",
  "options": ["A. 0", "B. None", "C. ''", "D. ' '"],
  "answer": "D"
},
{
  "question": "What is the output of type(True)?",
  "options": ["A. <class 'bool'>", "B. <class 'int'>", "C. <class 'str'>", "D. <class 'float'>"],
  "answer": "A"
},
{
  "question": "Which of these is not a scalar type?",
  "options": ["A. int", "B. float", "C. bool", "D. list"],
  "answer": "D"
},
{
  "question": "Which data type is best suited for storing multiple items in order?",
  "options": ["A. set", "B. dict", "C. list", "D. bool"],
  "answer": "C"
},
{
  "question": "What will be the result of type((5,))?",
  "options": ["A. int", "B. tuple", "C. list", "D. float"],
  "answer": "B"
},
{
  "question": "Which function is used to convert a string to a float?",
  "options": ["A. float()", "B. str()", "C. int()", "D. eval()"],
  "answer": "A"
},
{
  "question": "Which type is returned by the expression {'a', 'b', 'c'}?",
  "options": ["A. list", "B. tuple", "C. set", "D. dict"],
  "answer": "C"
},
{
  "question": "Which of the following is used to store key-value pairs?",
  "options": ["A. list", "B. dict", "C. tuple", "D. set"],
  "answer": "B"
},
{
  "question": "Which function can be used to get the length of a list?",
  "options": ["A. size()", "B. length()", "C. len()", "D. count()"],
  "answer": "C"
},
{
  "question": "What is the output of bool(1)?",
  "options": ["A. True", "B. False", "C. 1", "D. None"],
  "answer": "A"
},
{
  "question": "What will type('1234') return?",
  "options": ["A. int", "B. str", "C. float", "D. list"],
  "answer": "B"
},
{
  "question": "Which of these is a composite data type?",
  "options": ["A. int", "B. bool", "C. list", "D. float"],
  "answer": "C"
},
{
  "question": "What does float('7.8') return?",
  "options": ["A. 7", "B. '7.8'", "C. 7.8", "D. Error"],
  "answer": "C"
},
{
  "question": "Which of these is used to define a tuple?",
  "options": ["A. {}", "B. []", "C. ()", "D. <>"],
  "answer": "C"
},
{
  "question": "Which data type is best for counting items?",
  "options": ["A. bool", "B. str", "C. int", "D. None"],
  "answer": "C"
},
{
  "question": "What is the result of: int('10') + float('5.5')?",
  "options": ["A. 15.5", "B. 105.5", "C. Error", "D. 10.5"],
  "answer": "A"
},
{
  "question": "Which of these evaluates to False?",
  "options": ["A. bool('False')", "B. bool('0')", "C. bool('')", "D. bool('None')"],
  "answer": "C"
},
{
  "question": "What is the output of type([])?",
  "options": ["A. list", "B. tuple", "C. set", "D. dict"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct way to declare a set?",
  "options": ["A. {1, 2, 3}", "B. (1, 2, 3)", "C. [1, 2, 3]", "D. {'a': 1}"],
  "answer": "A"
},
{
  "question": "Which Python data type is best for storing an ordered collection of elements that can change?",
  "options": ["A. tuple", "B. list", "C. set", "D. frozenset"],
  "answer": "B"
},
{
  "question": "What type is returned by type(3.14)?",
  "options": ["A. int", "B. float", "C. decimal", "D. str"],
  "answer": "B"
},
{
  "question": "What is the boolean value of the number 0?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which of the following is not a valid type conversion?",
  "options": ["A. int('10')", "B. float('3.14')", "C. str(100)", "D. int('abc')"],
  "answer": "D"
},
{
  "question": "Which function returns the data type of a value?",
  "options": ["A. kind()", "B. datatype()", "C. type()", "D. format()"],
  "answer": "C"
},
{
  "question": "Which of the following is the correct syntax for a dictionary?",
  "options": ["A. ['a':1]", "B. {'a':1}", "C. ('a':1)", "D. {'a',1}"],
  "answer": "B"
},
{
  "question": "Which data type cannot contain duplicate values?",
  "options": ["A. list", "B. tuple", "C. set", "D. str"],
  "answer": "C"
},
{
  "question": "What is the result of len({'x': 1, 'y': 2})?",
  "options": ["A. 2", "B. 1", "C. 0", "D. Error"],
  "answer": "A"
},
{
  "question": "What type is returned by the expression type({'a', 'b', 'c'})?",
  "options": ["A. dict", "B. set", "C. list", "D. tuple"],
  "answer": "B"
},
{
  "question": "What does the expression type((1,)) return?",
  "options": ["A. int", "B. list", "C. tuple", "D. set"],
  "answer": "C"
},
{
  "question": "Which of these values will result in False when passed to bool()?",
  "options": ["A. 1", "B. 'False'", "C. []", "D. '0'"],
  "answer": "C"
},
{
  "question": "What is the result of: type(True + 1)?",
  "options": ["A. bool", "B. str", "C. int", "D. float"],
  "answer": "C"
},
{
  "question": "Which of these is an example of a mutable type?",
  "options": ["A. tuple", "B. str", "C. int", "D. list"],
  "answer": "D"
},
{
  "question": "Which of the following values is not considered False in Python?",
  "options": ["A. 0", "B. []", "C. '0'", "D. None"],
  "answer": "C"
},
{
  "question": "What is the result of: float(5) + int(2.5)?",
  "options": ["A. 7.5", "B. 7", "C. 6", "D. Error"],
  "answer": "B"
},
{
  "question": "What will be the result of str(3.14)?",
  "options": ["A. 3.14", "B. '3.14'", "C. Error", "D. 314"],
  "answer": "B"
},
{
  "question": "Which type allows both indexing and slicing?",
  "options": ["A. list", "B. set", "C. dict", "D. bool"],
  "answer": "A"
},
{
  "question": "What is the result of bool(None)?",
  "options": ["A. True", "B. False", "C. None", "D. Error"],
  "answer": "B"
},
{
  "question": "Which of the following is immutable?",
  "options": ["A. list", "B. set", "C. tuple", "D. dict"],
  "answer": "C"
},
{
  "question": "What is the default return type of input() in Python?",
  "options": ["A. str", "B. int", "C. float", "D. bool"],
  "answer": "A"
},
{
  "question": "Which of the following types is used to store text data?",
  "options": ["A. list", "B. str", "C. set", "D. bool"],
  "answer": "B"
},
{
  "question": "What is the correct way to convert a string '123' to integer?",
  "options": ["A. toInt('123')", "B. parseInt('123')", "C. int('123')", "D. str('123')"],
  "answer": "C"
},
{
  "question": "Which of the following types supports key-value pair structure?",
  "options": ["A. list", "B. tuple", "C. dict", "D. set"],
  "answer": "C"
},
{
  "question": "Which type represents an absence of value in Python?",
  "options": ["A. 0", "B. False", "C. None", "D. Null"],
  "answer": "C"
},
{
  "question": "What is the result of 5 + 3?",
  "options": ["A. 5", "B. 8", "C. 3", "D. 53"],
  "answer": "B"
},
{
  "question": "Which of the following is a valid Python assignment operator?",
  "options": ["A. ==", "B. !=", "C. =", "D. :="],
  "answer": "C"
},
{
  "question": "Which of the following is the correct way to write an if condition?",
  "options": ["A. if x > 5 then:", "B. if x > 5:", "C. if(x > 5){}", "D. if x > 5 do:"],
  "answer": "B"
},
{
  "question": "Which of these operators is used for exponentiation in Python?",
  "options": ["A. ^", "B. **", "C. **=", "D. ^="],
  "answer": "B"
},
{
  "question": "Which of the following is used to check equality?",
  "options": ["A. ==", "B. !=", "C. >", "D. <"],
  "answer": "A"
},
{
  "question": "Which of the following operators is used for logical NOT?",
  "options": ["A. !", "B. ~", "C. not", "D. and"],
  "answer": "C"
},
{
  "question": "What will the following code return: 10 % 3?",
  "options": ["A. 3", "B. 0", "C. 1", "D. 10"],
  "answer": "C"
},
{
  "question": "What is the result of: 5 == 5.0?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "What is the output of: 3 * 'Hello'?",
  "options": ["A. HelloHelloHello", "B. Hello3", "C. Error", "D. HelloHello"],
  "answer": "A"
},
{
  "question": "Which of the following is used to comment a single line in Python?",
  "options": ["A. //", "B. /* */", "C. #", "D. <!-- -->"],
  "answer": "C"
},
{
  "question": "Which operator is used for floor division in Python?",
  "options": ["A. /", "B. //", "C. %", "D. **"],
  "answer": "B"
},
{
  "question": "What is the result of 10 // 3?",
  "options": ["A. 3", "B. 3.0", "C. 0", "D. 1"],
  "answer": "A"
},
{
  "question": "Which of the following is a Python keyword?",
  "options": ["A. def", "B. int", "C. float", "D. string"],
  "answer": "A"
},
{
  "question": "Which operator is used to assign a value to a variable?",
  "options": ["A. :", "B. =", "C. ==", "D. := "],
  "answer": "B"
},
{
  "question": "Which of the following is used to concatenate strings in Python?",
  "options": ["A. +", "B. &", "C. *", "D. -"],
  "answer": "A"
},
{
  "question": "What is the correct syntax for defining a variable in Python?",
  "options": ["A. var x = 5", "B. x: int = 5", "C. x = 5", "D. int x = 5"],
  "answer": "C"
},
{
  "question": "Which of these is a correct comparison operator?",
  "options": ["A. >", "B. ?=", "C. <<", "D. ->"],
  "answer": "A"
},
{
  "question": "Which keyword is used to define a function in Python?",
  "options": ["A. function", "B. define", "C. def", "D. func"],
  "answer": "C"
},
{
  "question": "What does the 'not' keyword do in Python?",
  "options": ["A. Negates a condition", "B. Checks for equality", "C. Assigns a value", "D. Loops through a list"],
  "answer": "A"
},
{
  "question": "Which of these is used to get the remainder of a division?",
  "options": ["A. /", "B. %", "C. //", "D. **"],
  "answer": "B"
},
{
  "question": "Which of the following is used to define a constant variable in Python?",
  "options": ["A. const", "B. final", "C. constant", "D. Python does not have constant variables"],
  "answer": "D"
},
{
  "question": "Which of the following is the correct way to import a module in Python?",
  "options": ["A. import math", "B. #include math", "C. import.math", "D. require math"],
  "answer": "A"
},
{
  "question": "Which of the following will return False?",
  "options": ["A. 5 > 3", "B. 10 == 10", "C. 5 != 3", "D. 3 > 5"],
  "answer": "D"
},
{
  "question": "Which keyword is used to exit a loop in Python?",
  "options": ["A. break", "B. exit", "C. stop", "D. quit"],
  "answer": "A"
},
{
  "question": "What is the result of the following expression: 5 * 2 + 3?",
  "options": ["A. 13", "B. 16", "C. 8", "D. 10"],
  "answer": "A"
},
{
  "question": "What is the correct syntax for an if-else statement in Python?",
  "options": ["A. if x > 5 { } else { }", "B. if x > 5: else:", "C. if x > 5: else:", "D. if x > 5 {} else {}"],
  "answer": "C"
},
{
  "question": "Which of these is the correct way to compare two variables for inequality?",
  "options": ["A. x != y", "B. x <!= y", "C. x = y", "D. x not y"],
  "answer": "A"
},
{
  "question": "What will be the result of: 3 == 2?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which of the following will raise a syntax error?",
  "options": ["A. x = 5", "B. 5 = x", "C. x + 5", "D. x == 5"],
  "answer": "B"
},
{
  "question": "What is the result of 3 > 2 > 1?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which operator is used to check if two values are not equal?",
  "options": ["A. !=", "B. =!", "C. ><", "D. !=="],
  "answer": "A"
},
{
  "question": "What is the result of: 7 // 3?",
  "options": ["A. 2", "B. 3", "C. 1", "D. 2.33"],
  "answer": "A"
},
{
  "question": "What is the result of: 3 + 4 * 2?",
  "options": ["A. 14", "B. 11", "C. 10", "D. 7"],
  "answer": "B"
},
{
  "question": "Which operator is used to assign a value to a variable?",
  "options": ["A. :=", "B. ==", "C. =", "D. :"],
  "answer": "C"
},
{
  "question": "What is the purpose of the 'and' keyword in Python?",
  "options": ["A. Checks if two conditions are True", "B. Joins two strings", "C. Assigns a value", "D. Checks if two variables are equal"],
  "answer": "A"
},
{
  "question": "Which of the following is used to raise an exception in Python?",
  "options": ["A. throw", "B. raise", "C. error", "D. exception"],
  "answer": "B"
},
{
  "question": "What does the keyword 'elif' stand for?",
  "options": ["A. Else if", "B. Else only", "C. Else for", "D. Eliminate if"],
  "answer": "A"
},
{
  "question": "Which of these is used to negate a condition in Python?",
  "options": ["A. not", "B. !", "C. ~", "D. negate"],
  "answer": "A"
},
{
  "question": "Which operator is used for 'bitwise OR' in Python?",
  "options": ["A. &", "B. |", "C. ^", "D. ~"],
  "answer": "B"
},
{
  "question": "What is the correct syntax for a 'while' loop in Python?",
  "options": ["A. while x > 5: do", "B. while x > 5", "C. while x > 5 {}", "D. while x > 5:"],
  "answer": "D"
},
{
  "question": "What is the purpose of the 'or' operator?",
  "options": ["A. Checks if at least one condition is True", "B. Joins two strings", "C. Checks if both conditions are True", "D. None of the above"],
  "answer": "A"
},
{
  "question": "Which of the following operators has the highest precedence?",
  "options": ["A. +", "B. -", "C. *", "D. /"],
  "answer": "C"
},
{
  "question": "Which of the following is used to test membership in a sequence in Python?",
  "options": ["A. is", "B. in", "C. not", "D. include"],
  "answer": "B"
},
{
  "question": "What is the result of the expression 'a' + 1?",
  "options": ["A. 'a1'", "B. 'a'+1", "C. Error", "D. 1a"],
  "answer": "C"
},
{
  "question": "What does the 'is' keyword check for in Python?",
  "options": ["A. Equality of values", "B. Identity of objects", "C. Type of object", "D. Membership in a sequence"],
  "answer": "B"
},
{
  "question": "What is the result of the following expression: 5 != 5?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which of these is used to handle exceptions in Python?",
  "options": ["A. if-else", "B. try-except", "C. for-in", "D. with-as"],
  "answer": "B"
},
{
  "question": "What is the output of the following: 3 > 2 > 1?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "What is the result of 'abc' * 2?",
  "options": ["A. abcabc", "B. 'abc'2", "C. 2abc", "D. Error"],
  "answer": "A"
},
{
  "question": "Which operator is used for logical AND in Python?",
  "options": ["A. &&", "B. and", "C. &", "D. &and"],
  "answer": "B"
},
{
  "question": "Which of these expressions will raise a TypeError?",
  "options": ["A. 5 + 3", "B. 'hello' + 2", "C. 5 * 2", "D. 'abc' + 'def'"],
  "answer": "B"
},
{
  "question": "Which keyword is used to define a class in Python?",
  "options": ["A. class", "B. def", "C. function", "D. object"],
  "answer": "A"
},
{
  "question": "What is the result of the expression 10 % 2?",
  "options": ["A. 2", "B. 1", "C. 0", "D. 10"],
  "answer": "C"
},
{
  "question": "Which of the following represents an invalid variable name in Python?",
  "options": ["A. variable_1", "B. 1variable", "C. variable123", "D. var_1"],
  "answer": "B"
},
{
  "question": "Which of the following will return True?",
  "options": ["A. 5 == 5.0", "B. 5 > 5", "C. 3 < 1", "D. 10 != 5"],
  "answer": "A"
},
{
  "question": "Which of the following will return a boolean value?",
  "options": ["A. is", "B. in", "C. and", "D. True"],
  "answer": "C"
},
{
  "question": "Which of the following can be used to comment multiple lines in Python?",
  "options": ["A. #", "B. ''' '''", "C. //", "D. /* */"],
  "answer": "B"
},
{
  "question": "What is the output of 10 ** 2?",
  "options": ["A. 10", "B. 100", "C. 20", "D. 1000"],
  "answer": "B"
},
{
  "question": "Which of these can be used for floating-point division in Python?",
  "options": ["A. /", "B. //", "C. %", "D. **"],
  "answer": "A"
},
{
  "question": "What does the following code return: 4 + 2 * 3?",
  "options": ["A. 18", "B. 10", "C. 12", "D. 14"],
  "answer": "B"
},
{
  "question": "Which of these is the correct way to define a function?",
  "options": ["A. def function_name()", "B. function def name()", "C. function() def", "D. def function_name[]"],
  "answer": "A"
},
{
  "question": "What is the purpose of the 'continue' keyword?",
  "options": ["A. Exit a loop", "B. Skip the current iteration of a loop", "C. Pause the loop", "D. Terminate the program"],
  "answer": "B"
},
{
  "question": "Which of these is used to divide two numbers and return the quotient in Python?",
  "options": ["A. /", "B. //", "C. %", "D. **"],
  "answer": "A"
},
{
  "question": "Which operator is used for logical OR in Python?",
  "options": ["A. ||", "B. or", "C. |", "D. or="],
  "answer": "B"
},
{
  "question": "What is the result of: True and False?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "Which of the following operators is used to perform bitwise XOR?",
  "options": ["A. &", "B. |", "C. ^", "D. ~"],
  "answer": "C"
},
{
  "question": "What is the result of 9 // 4?",
  "options": ["A. 4", "B. 2", "C. 2.25", "D. 3"],
  "answer": "B"
},
{
  "question": "Which of the following will throw an exception in Python?",
  "options": ["A. 'hello' + 5", "B. 10 / 2", "C. 'hello' * 2", "D. 4 % 2"],
  "answer": "A"
},
{
  "question": "Which of the following is not a valid variable name?",
  "options": ["A. my_var", "B. 2my_var", "C. myVar", "D. my_var_1"],
  "answer": "B"
},
{
  "question": "Which operator is used to perform bitwise AND in Python?",
  "options": ["A. &", "B. |", "C. ^", "D. ~"],
  "answer": "A"
},
{
  "question": "Which of these is a correct expression for logical NOT?",
  "options": ["A. !x", "B. x not", "C. not x", "D. x not!"],
  "answer": "C"
},
{
  "question": "What is the result of the expression 'abc' * 0?",
  "options": ["A. abc", "B. Error", "C. ''", "D. 0abc"],
  "answer": "C"
},
{
  "question": "Which of the following is used to raise a value to a power?",
  "options": ["A. **", "B. ^", "C. ++", "D. *"],
  "answer": "A"
},
{
  "question": "What will be the output of the following code: print(3 * 2 + 1)?",
  "options": ["A. 7", "B. 6", "C. 8", "D. 5"],
  "answer": "A"
},
{
  "question": "Which of these is used for integer division in Python?",
  "options": ["A. /", "B. //", "C. %", "D. **"],
  "answer": "B"
},
{
  "question": "Which of the following is a valid Python keyword?",
  "options": ["A. try", "B. function", "C. variable", "D. const"],
  "answer": "A"
},
{
  "question": "What is the output of the following code: print(3 != 2)?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "What does the 'break' keyword do in a loop?",
  "options": ["A. Continues the next iteration", "B. Exits the loop", "C. Skips the current iteration", "D. Exits the function"],
  "answer": "B"
},
{
  "question": "What is the correct syntax for an if-else condition in Python?",
  "options": ["A. if x > 5: else", "B. if x > 5 { else }", "C. if x > 5: else:", "D. if x > 5 { } else { }"],
  "answer": "C"
},
{
  "question": "Which of the following is used to perform a modulus operation in Python?",
  "options": ["A. /", "B. //", "C. %", "D. **"],
  "answer": "C"
},
{
  "question": "Which of these will return False?",
  "options": ["A. 2 == 2", "B. 3 != 2", "C. 1 > 2", "D. 4 <= 5"],
  "answer": "C"
},
{
  "question": "Which of these is used for conditional expression in Python?",
  "options": ["A. if", "B. loop", "C. elif", "D. else"],
  "answer": "A"
},
{
  "question": "Which keyword is used to start a function definition in Python?",
  "options": ["A. function", "B. def", "C. define", "D. fun"],
  "answer": "B"
},
{
  "question": "Which of the following can be used to check if a variable is of a certain type in Python?",
  "options": ["A. is", "B. type()", "C. == type", "D. check()"],
  "answer": "B"
},
{
  "question": "Which of these will not change the value of a variable?",
  "options": ["A. x = x + 5", "B. x += 5", "C. x = '5'", "D. x++"],
  "answer": "D"
},
{
  "question": "Which of the following is used to check membership in a list in Python?",
  "options": ["A. in", "B. includes", "C. member", "D. contains"],
  "answer": "A"
},
{
  "question": "What is the correct way to create a string in Python?",
  "options": ["A. 'Hello World'", "B. 'Hello World'", "C. \"Hello World\"", "D. Both A and C"],
  "answer": "D"
},
{
  "question": "What will be the result of the expression: 'Python' + '3'?",
  "options": ["A. 'Python3'", "B. 'Python 3'", "C. 'Python' + 3", "D. Error"],
  "answer": "A"
},
{
  "question": "Which of the following is used to access characters in a string?",
  "options": ["A. List indexing", "B. String slicing", "C. Both A and B", "D. None of the above"],
  "answer": "C"
},
{
  "question": "How do you access the first character of a string 'Hello'?",
  "options": ["A. 'Hello'[0]", "B. 'Hello'(0)", "C. 'Hello'.first()", "D. 'Hello'[1]"],
  "answer": "A"
},
{
  "question": "Which function can be used to get the length of a string?",
  "options": ["A. len()", "B. length()", "C. size()", "D. count()"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax for type casting in Python?",
  "options": ["A. int('123')", "B. str(123)", "C. float('123.45')", "D. All of the above"],
  "answer": "D"
},
{
  "question": "What is the result of the expression: str(100) + str(200)?",
  "options": ["A. 100200", "B. 300", "C. '100' '200'", "D. Error"],
  "answer": "A"
},
{
  "question": "Which of the following functions can be used to convert a string into a float?",
  "options": ["A. int()", "B. float()", "C. str()", "D. convert()"],
  "answer": "B"
},
{
  "question": "What is the output of 'hello'.upper()?",
  "options": ["A. 'HELLO'", "B. 'hello'", "C. 'Hello'", "D. Error"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to strip whitespace from the beginning and end of a string?",
  "options": ["A. strip()", "B. lstrip()", "C. rstrip()", "D. both A and B"],
  "answer": "A"
},
{
  "question": "Which of these methods is used to find a substring within a string?",
  "options": ["A. find()", "B. index()", "C. contains()", "D. Both A and B"],
  "answer": "D"
},
{
  "question": "What will be the output of 'hello'.replace('e', 'a')?",
  "options": ["A. hallo", "B. hella", "C. hello", "D. halla"],
  "answer": "A"
},
{
  "question": "What will the expression '123'.isdigit() return?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which method is used to convert a string to lowercase?",
  "options": ["A. lower()", "B. tolower()", "C. lowercase()", "D. down()"],
  "answer": "A"
},
{
  "question": "How do you concatenate two strings 'hello' and 'world'?",
  "options": ["A. 'hello' + 'world'", "B. 'hello'.append('world')", "C. 'hello'.concat('world')", "D. 'hello'.add('world')"],
  "answer": "A"
},
{
  "question": "What is the output of 'abc'.replace('a', 'd').replace('c', 'e')?",
  "options": ["A. 'dbd'", "B. 'abc'", "C. 'ade'", "D. 'dbc'"],
  "answer": "A"
},
{
  "question": "Which function can be used to check if a string contains a specific substring?",
  "options": ["A. contains()", "B. index()", "C. find()", "D. substring()"],
  "answer": "C"
},
{
  "question": "Which of these methods can be used to split a string into a list of substrings?",
  "options": ["A. split()", "B. join()", "C. partition()", "D. slice()"],
  "answer": "A"
},
{
  "question": "What is the result of the following: float('3.14')?",
  "options": ["A. 3.14", "B. '3.14'", "C. 3", "D. Error"],
  "answer": "A"
},
{
  "question": "What does the method 'str.isdigit()' return for the string '1234'?",
  "options": ["A. True", "B. False", "C. None", "D. Error"],
  "answer": "A"
},
{
  "question": "What is the output of 'abc'.join(['1', '2', '3'])?",
  "options": ["A. '1abc2abc3'", "B. 'abc123'", "C. '123abc'", "D. '1, 2, 3'"],
  "answer": "A"
},

    {
  "question": "What is the result of the expression '10' * 3?",
  "options": ["A. 10 10 10", "B. 101010", "C. 30", "D. '10'*3"],
  "answer": "B"
},
{
  "question": "Which of the following will return a string in uppercase?",
  "options": ["A. 'abc'.upper()", "B. 'abc'.toUpperCase()", "C. 'abc'.uppercase()", "D. 'abc'.up()"],
  "answer": "A"
},
{
  "question": "How can you check if a string 'hello' contains the substring 'ell'?",
  "options": ["A. 'hello'.contains('ell')", "B. 'hello'.index('ell')", "C. 'hello'.find('ell')", "D. 'hello' in 'ell'"],
  "answer": "C"
},
{
  "question": "What does the expression '123'.zfill(5) return?",
  "options": ["A. '01234'", "B. '12300'", "C. '12345'", "D. '00123'"],
  "answer": "D"
},
{
  "question": "Which of the following methods would you use to check if a string starts with a specific substring?",
  "options": ["A. startswith()", "B. begins()", "C. prefix()", "D. find()"],
  "answer": "A"
},
{
  "question": "What is the output of 'abc'.find('b')?",
  "options": ["A. 0", "B. 1", "C. 2", "D. -1"],
  "answer": "B"
},
{
  "question": "Which of the following would return True if the string contains only alphabetic characters?",
  "options": ["A. 'hello'.isalpha()", "B. 'hello'.isalphabet()", "C. 'hello'.isalnum()", "D. 'hello'.isstr()"],
  "answer": "A"
},
{
  "question": "Which function is used to convert a string into a boolean?",
  "options": ["A. bool()", "B. tobool()", "C. str2bool()", "D. convert()"],
  "answer": "A"
},
{
  "question": "What will be the result of 'Python'.replace('y', '')?",
  "options": ["A. 'Pthon'", "B. 'Python'", "C. 'Pton'", "D. 'Pyton'"],
  "answer": "A"
},
{
  "question": "What is the result of int('1010', 2)?",
  "options": ["A. 10", "B. 1010", "C. 2", "D. 20"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to convert a string to an integer?",
  "options": ["A. int()", "B. integer()", "C. float()", "D. str()"],
  "answer": "A"
},
{
  "question": "What will be the output of '10' == 10?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "What is the correct way to change the case of a string to lowercase?",
  "options": ["A. 'hello'.lower()", "B. 'hello'.down()", "C. 'hello'.convert() ", "D. 'hello'.tolower()"],
  "answer": "A"
},
{
  "question": "Which of the following methods can be used to convert a string into a list of characters?",
  "options": ["A. list()", "B. split()", "C. join()", "D. convert()"],
  "answer": "A"
},
{
  "question": "What will '123' + str(456) return?",
  "options": ["A. '123456'", "B. '579'", "C. '123456.0'", "D. '123'456'"],
  "answer": "A"
},
{
  "question": "What is the result of the expression 'hello'.count('l')?",
  "options": ["A. 2", "B. 3", "C. 4", "D. 1"],
  "answer": "A"
},
{
  "question": "Which method is used to remove whitespace from the beginning of a string?",
  "options": ["A. lstrip()", "B. strip()", "C. rstrip()", "D. trim()"],
  "answer": "A"
},
{
  "question": "What is the result of 'Python'[:3]?",
  "options": ["A. 'Pyt'", "B. 'P', 't'", "C. 'Pyth'", "D. 'Python'"],
  "answer": "A"
},
{
  "question": "Which of the following will return a string in reverse order?",
  "options": ["A. 'hello'[::-1]", "B. 'hello'.reverse()", "C. 'hello'.reversed()", "D. 'hello'.flip()"],
  "answer": "A"
},
{
  "question": "Which function can be used to convert a string into a list of words?",
  "options": ["A. split()", "B. join()", "C. list()", "D. convert()"],
  "answer": "A"
},
{
  "question": "What is the output of 'python'.startswith('p')?",
  "options": ["A. True", "B. False", "C. None", "D. Error"],
  "answer": "A"
},

    {
  "question": "What is the output of the expression 'python'.endswith('n')?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which function is used to concatenate a string to another string?",
  "options": ["A. concat()", "B. append()", "C. join()", "D. + operator"],
  "answer": "D"
},
{
  "question": "What is the result of '123'.isdigit()?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "What is the output of 'hello'.strip('l')?",
  "options": ["A. 'heo'", "B. 'hello'", "C. 'hel'", "D. 'hell'"],
  "answer": "A"
},
{
  "question": "Which method is used to check if a string contains any whitespace?",
  "options": ["A. isspace()", "B. iswhitespace()", "C. whitespace()", "D. checkspace()"],
  "answer": "A"
},
{
  "question": "What is the result of 'abcd'.join(['1', '2', '3'])?",
  "options": ["A. '1abcd2abcd3'", "B. 'abcd123'", "C. 'abcd1abcd2abcd3'", "D. '123'"],
  "answer": "A"
},
{
  "question": "How do you convert a string to a floating point number?",
  "options": ["A. float()", "B. int()", "C. str()", "D. decimal()"],
  "answer": "A"
},
{
  "question": "What will be the result of 'abc' * 2?",
  "options": ["A. 'abcabc'", "B. 'abc 2'", "C. 'abcabcabc'", "D. 'abc'"],
  "answer": "A"
},
{
  "question": "Which of the following methods returns a new string with all characters in uppercase?",
  "options": ["A. capitalize()", "B. upper()", "C. uppercase()", "D. upperstring()"],
  "answer": "B"
},
{
  "question": "Which of these functions can convert a float into a string?",
  "options": ["A. str()", "B. float()", "C. to_string()", "D. string()"],
  "answer": "A"
},
{
  "question": "What will be the result of '123'.replace('1', '4')?",
  "options": ["A. '423'", "B. '124'", "C. '143'", "D. '4234'"],
  "answer": "A"
},
{
  "question": "What is the result of the expression 'hello'.count('l')?",
  "options": ["A. 2", "B. 1", "C. 3", "D. 4"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax to remove the trailing whitespace from a string?",
  "options": ["A. strip()", "B. rstrip()", "C. lstrip()", "D. trim()"],
  "answer": "B"
},
{
  "question": "Which of the following is used to check if all characters in a string are digits?",
  "options": ["A. isdigit()", "B. isnumber()", "C. isdecimal()", "D. isnumeric()"],
  "answer": "A"
},
{
  "question": "What will be the result of the expression 'hello' + 5?",
  "options": ["A. 'hello5'", "B. 'hello' + 5", "C. 'hello5.0'", "D. Error"],
  "answer": "D"
},
{
  "question": "What is the output of 'python'.index('p')?",
  "options": ["A. 0", "B. 1", "C. 2", "D. -1"],
  "answer": "A"
},
{
  "question": "What will 'abcdef'.split('c') return?",
  "options": ["A. ['ab', 'def']", "B. ['abc', 'def']", "C. ['ab', 'cdef']", "D. ['a', 'bcdef']"],
  "answer": "A"
},
{
  "question": "What is the result of the expression 'hello'.replace('l', '')?",
  "options": ["A. 'heo'", "B. 'hello'", "C. 'hl'", "D. 'hell'"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to convert a string into a list?",
  "options": ["A. list()", "B. split()", "C. join()", "D. slice()"],
  "answer": "B"
},
{
  "question": "What does the method 'str.islower()' check for a string?",
  "options": ["A. If all characters are in lowercase", "B. If the string contains any lowercase letters", "C. If the string is lowercase", "D. If the string contains lowercase letters only"],
  "answer": "A"
},
{
  "question": "Which of the following functions can convert a string to an integer?",
  "options": ["A. int()", "B. float()", "C. string()", "D. convert()"],
  "answer": "A"
},
{
  "question": "What is the result of the expression '1234'.zfill(6)?",
  "options": ["A. '001234'", "B. '123400'", "C. '01234'", "D. '1234'"],
  "answer": "A"
},
{
  "question": "What is the output of 'hello'.upper().lower()?",
  "options": ["A. 'hello'", "B. 'HELLO'", "C. 'HeLlO'", "D. 'hELLO'"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to convert a string to a list of characters?",
  "options": ["A. list()", "B. split()", "C. join()", "D. slice()"],
  "answer": "A"
},
{
  "question": "What is the result of 'hello'.find('l')?",
  "options": ["A. 2", "B. 3", "C. 4", "D. -1"],
  "answer": "A"
},
{
  "question": "What does the expression 'hello'.rfind('l') return?",
  "options": ["A. 3", "B. 4", "C. 2", "D. -1"],
  "answer": "B"
},
{
  "question": "Which function can be used to remove all occurrences of a character from a string?",
  "options": ["A. replace()", "B. remove()", "C. strip()", "D. delete()"],
  "answer": "A"
},
{
  "question": "What is the result of 'abc'.center(6, '-')?",
  "options": ["A. '--abc--'", "B. '-abc--'", "C. 'abc----'", "D. 'abc-'"],
  "answer": "A"
},
{
  "question": "Which of the following will return True if a string contains a digit?",
  "options": ["A. 'hello123'.isdigit()", "B. 'hello123'.isalpha()", "C. 'hello123'.isalnum()", "D. 'hello123'.isnumeric()"],
  "answer": "C"
},
{
  "question": "What is the result of '123'.rjust(5, '0')?",
  "options": ["A. '00123'", "B. '12300'", "C. '0123'", "D. '12300'"],
  "answer": "A"
},
{
  "question": "What is the output of '10'.zfill(3)?",
  "options": ["A. '010'", "B. '100'", "C. '0010'", "D. '00010'"],
  "answer": "A"
},
{
  "question": "Which function is used to remove whitespace from both ends of a string?",
  "options": ["A. strip()", "B. rstrip()", "C. lstrip()", "D. trim()"],
  "answer": "A"
},
{
  "question": "What does the expression 'hello'.translate({ord('h'): ord('j')}) do?",
  "options": ["A. 'jello'", "B. 'hello'", "C. 'jellp'", "D. 'hjljo'"],
  "answer": "A"
},
{
  "question": "What is the result of '123'.isnumeric()?",
  "options": ["A. True", "B. False", "C. None", "D. Error"],
  "answer": "A"
},
{
  "question": "Which of the following functions returns True if all characters in the string are alphanumeric?",
  "options": ["A. isalnum()", "B. isalpha()", "C. isdigit()", "D. isnumeric()"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax to check if a string contains only numeric characters?",
  "options": ["A. '1234'.isnumeric()", "B. '1234'.isalpha()", "C. '1234'.isdigit()", "D. '1234'.isnum()"],
  "answer": "A"
},
{
  "question": "What is the output of 'hello'.casefold()?",
  "options": ["A. 'hello'", "B. 'HELLO'", "C. 'Hello'", "D. 'hello'"],
  "answer": "A"
},
{
  "question": "What is the result of '    hello    '.strip()?",
  "options": ["A. 'hello'", "B. ' hello '", "C. 'hello    '", "D. 'hello     '"],
  "answer": "A"
},
{
  "question": "What is the output of 'python'.replace('o', 'a', 1)?",
  "options": ["A. 'pythan'", "B. 'pythn'", "C. 'pytahan'", "D. 'python'"],
  "answer": "A"
},
{
  "question": "Which of the following will return the count of characters in the string?",
  "options": ["A. len()", "B. count()", "C. size()", "D. index()"],
  "answer": "A"
},
{
  "question": "What is the result of '100' + '200'?",
  "options": ["A. '100200'", "B. 300", "C. '100' + 200", "D. '300'"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to convert a string into a tuple?",
  "options": ["A. tuple()", "B. list()", "C. str()", "D. split()"],
  "answer": "A"
},
{
  "question": "What is the output of the expression 'hello'.find('z')?",
  "options": ["A. -1", "B. 0", "C. 1", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax for an if statement in Python?",
  "options": ["A. if condition: ", "B. if (condition) {", "C. if {condition}:", "D. if condition then:"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'if 5 > 3: print('Yes') else: print('No')'",
  "options": ["A. Yes", "B. No", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following keywords is used to end an if-else block in Python?",
  "options": ["A. end", "B. endif", "C. else", "D. None"],
  "answer": "D"
},
{
  "question": "What will be printed when the following code is executed: for i in range(3): print(i)",
  "options": ["A. 0 1 2", "B. 1 2 3", "C. 0 1", "D. 1 2 3 4"],
  "answer": "A"
},
{
  "question": "How many times will the following loop run? 'for i in range(1, 6): print(i)'",
  "options": ["A. 4", "B. 5", "C. 6", "D. 3"],
  "answer": "B"
},
{
  "question": "Which statement will break the current loop and resume execution after the loop?",
  "options": ["A. break", "B. continue", "C. exit", "D. pass"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'i = 0; while i < 3: print(i); i += 1'",
  "options": ["A. 0 1 2", "B. 1 2 3", "C. 0 1", "D. 1 2"],
  "answer": "A"
},
{
  "question": "Which of the following loops is guaranteed to run at least once?",
  "options": ["A. for loop", "B. while loop", "C. do-while loop", "D. None of the above"],
  "answer": "C"
},
{
  "question": "What is the result of the following code: 'if 10 > 5: print('True') elif 5 > 10: print('False')'",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following statements is used to skip the current iteration of a loop?",
  "options": ["A. pass", "B. break", "C. continue", "D. return"],
  "answer": "C"
},
{
  "question": "What will be the output of the following code? 'for i in range(0, 5, 2): print(i)'",
  "options": ["A. 0 2 4", "B. 1 3 5", "C. 0 1 2 3 4", "D. 1 3"],
  "answer": "A"
},
{
  "question": "What does the continue statement do inside a loop?",
  "options": ["A. It ends the loop", "B. It skips the rest of the current iteration and moves to the next iteration", "C. It returns the loop value", "D. None of the above"],
  "answer": "B"
},
{
  "question": "Which of the following statements can be used to test multiple conditions in an if statement?",
  "options": ["A. if condition1 and condition2", "B. if condition1 or condition2", "C. if condition1 else condition2", "D. Both A and B"],
  "answer": "D"
},
{
  "question": "What will be the output of the following code? 'for i in range(10, 1, -2): print(i)'",
  "options": ["A. 10 8 6 4 2", "B. 1 3 5 7 9", "C. 10 8 6 4 2 0", "D. 10 8 6"],
  "answer": "A"
},
{
  "question": "Which keyword is used to define a function in Python?",
  "options": ["A. def", "B. func", "C. function", "D. define"],
  "answer": "A"
},
{
  "question": "What is the output of the following code: 'for i in range(3): print(i); if i == 1: break'?",
  "options": ["A. 0 1", "B. 0 1 2", "C. 0 1 2 3", "D. 0 1 2 3 4"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'i = 0; while i < 2: print(i); i += 1'",
  "options": ["A. 0 1", "B. 1 2", "C. 0 1 2", "D. 1 2 3"],
  "answer": "A"
},
{
  "question": "What is the default step value for the range function?",
  "options": ["A. 1", "B. 2", "C. 0", "D. -1"],
  "answer": "A"
},
{
  "question": "What will be printed by the following code? 'if 10 < 20: print('Yes') elif 10 > 5: print('No')'",
  "options": ["A. Yes", "B. No", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "How would you write a while loop that never stops?",
  "options": ["A. while True:", "B. while False:", "C. while 1:", "D. both A and C"],
  "answer": "D"
},
{
  "question": "What is the correct way to check if a number is even in a while loop?",
  "options": ["A. if i % 2 == 0", "B. if i // 2 == 0", "C. if i / 2 == 0", "D. if i == 2"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to break out of a loop?",
  "options": ["A. exit", "B. break", "C. continue", "D. pass"],
  "answer": "B"
},
{
  "question": "What is the output of the following code? 'i = 5; while i > 0: print(i); i -= 1'",
  "options": ["A. 5 4 3 2 1", "B. 1 2 3 4 5", "C. 5 4 3", "D. 1 2 3"],
  "answer": "A"
},
{
  "question": "Which keyword is used to start a function definition in Python?",
  "options": ["A. func", "B. define", "C. def", "D. function"],
  "answer": "C"
},
{
  "question": "What will be the output of the following code? 'for i in range(5, 0, -1): print(i)'",
  "options": ["A. 5 4 3 2 1", "B. 5 4 3 2", "C. 0 1 2 3 4", "D. 1 2 3 4 5"],
  "answer": "A"
},
{
  "question": "What will be the output of the following code? 'x = 10; if x > 5: print('Greater'); else: print('Smaller')'",
  "options": ["A. Greater", "B. Smaller", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax to continue the next iteration in a loop?",
  "options": ["A. continue", "B. break", "C. pass", "D. stop"],
  "answer": "A"
},
{
  "question": "What does the following code do? 'for i in range(5): if i == 3: continue; print(i)'",
  "options": ["A. Prints 0, 1, 2, 3, 4", "B. Prints 0, 1, 2, 4", "C. Prints 1, 2, 3, 4", "D. None of the above"],
  "answer": "B"
},
{
  "question": "Which of the following operators checks for equality in Python?",
  "options": ["A. =", "B. =", "C. ==", "D. not equal"],
  "answer": "C"
},
{
  "question": "What is the output of the following code? 'i = 0; while i < 5: i += 1; print(i)'",
  "options": ["A. 0 1 2 3 4 5", "B. 0 1 2 3 4", "C. 1 2 3 4 5", "D. None"],
  "answer": "C"
},
{
  "question": "Which loop can be used to iterate over each item in a list?",
  "options": ["A. for loop", "B. while loop", "C. both A and B", "D. None of the above"],
  "answer": "A"
},
{
  "question": "What is the correct way to handle an exception in Python?",
  "options": ["A. catch exception", "B. try-except block", "C. raise exception", "D. error handling"],
  "answer": "B"
},
{
  "question": "What is the result of 'for i in range(1, 11, 3): print(i)'?",
  "options": ["A. 1 4 7 10", "B. 1 2 3 4 5", "C. 1 4 7", "D. 1 3 6 9"],
  "answer": "A"
},
{
  "question": "Which of the following will cause a SyntaxError?",
  "options": ["A. 'if 10 > 5:', 'print('True')'", "B. 'while 1 == 1: break'", "C. 'if 10 > 5 print('True')'", "D. None of the above"],
  "answer": "C"
},
{
  "question": "What will be the result of 'i = 0; while i < 5: print(i); i += 1'?",
  "options": ["A. 0 1 2 3 4", "B. 1 2 3 4 5", "C. 0 1 2", "D. None of the above"],
  "answer": "A"
},
{
  "question": "Which of the following loops are used for a fixed number of iterations?",
  "options": ["A. for loop", "B. while loop", "C. both A and B", "D. None of the above"],
  "answer": "A"
},
{
  "question": "What is the result of 'for i in range(0, 5, 2): print(i)'?",
  "options": ["A. 0 2 4", "B. 0 1 2 3 4", "C. 1 2 3", "D. 2 4"],
  "answer": "A"
},
{
  "question": "What will be printed when the following code is executed? 'for i in range(1, 6): if i == 3: break; print(i)'",
  "options": ["A. 1 2", "B. 1 2 3", "C. 1 2 3 4", "D. 1 2 3 4 5"],
  "answer": "A"
},
{
  "question": "Which of the following is not a valid loop structure in Python?",
  "options": ["A. for", "B. while", "C. until", "D. for-else"],
  "answer": "C"
},
{
  "question": "Which statement is used to exit the current function and return a value?",
  "options": ["A. break", "B. continue", "C. return", "D. pass"],
  "answer": "C"
},
{
  "question": "What is the correct syntax to check if a number is divisible by 3 in a while loop?",
  "options": ["A. if num % 3 == 0", "B. if num // 3 == 0", "C. if num == 3", "D. if num / 3 == 0"],
  "answer": "A"
},
{
  "question": "What is the result of the following code? 'for i in range(0, 5, 3): print(i)'",
  "options": ["A. 0 3", "B. 1 2", "C. 0 3 5", "D. 0 1 2"],
  "answer": "A"
},
{
  "question": "Which loop is best suited for iterating through a known number of items in Python?",
  "options": ["A. while loop", "B. for loop", "C. repeat loop", "D. None of the above"],
  "answer": "B"
},
{
  "question": "What is the correct way to use the range function to generate numbers from 1 to 5?",
  "options": ["A. range(1, 5)", "B. range(1, 6)", "C. range(0, 5)", "D. range(1, 5, 2)"],
  "answer": "B"
},
{
  "question": "What will the following code print? 'for i in range(5, 10): print(i)'",
  "options": ["A. 5 6 7 8 9", "B. 5 6 7 8", "C. 6 7 8 9", "D. 1 2 3 4 5 6 7 8 9"],
  "answer": "A"
},
{
  "question": "What is the output of this code? 'i = 10; if i == 10: print('Match')'",
  "options": ["A. Match", "B. Error", "C. None", "D. 10"],
  "answer": "A"
},
{
  "question": "How do you skip the current iteration of a loop without terminating the loop?",
  "options": ["A. pass", "B. break", "C. continue", "D. exit"],
  "answer": "C"
},
{
  "question": "Which of the following statements causes the loop to exit immediately?",
  "options": ["A. continue", "B. break", "C. return", "D. pass"],
  "answer": "B"
},
{
  "question": "What will the following code print? 'x = 5; while x < 10: print(x); x += 1'",
  "options": ["A. 5 6 7 8 9", "B. 6 7 8 9 10", "C. 5 6 7 8", "D. 10"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax for an if-elif-else chain?",
  "options": ["A. if condition1: elif condition2: else:", "B. if condition1 elif condition2 else:", "C. if condition1 else elif condition2:", "D. None of the above"],
  "answer": "A"
},
{
  "question": "What will be the output of this code? 'i = 2; while i < 5: i += 1; print(i)'",
  "options": ["A. 2 3 4", "B. 3 4 5", "C. 2 3 4 5", "D. 3 4"],
  "answer": "B"
},
{
  "question": "Which of the following constructs is used for error handling in Python?",
  "options": ["A. catch", "B. raise", "C. try-except", "D. fail"],
  "answer": "C"
},
{
  "question": "Which of the following loops is executed at least once?",
  "options": ["A. for", "B. while", "C. do-while", "D. repeat-until"],
  "answer": "C"
},
{
  "question": "Which of the following is not a valid loop condition in Python?",
  "options": ["A. i == 5", "B. i < 10", "C. i > 10", "D. None of the above"],
  "answer": "D"
},
{
  "question": "What will be the output of this code? 'i = 10; if i < 5: print('Small') else: print('Large')'",
  "options": ["A. Small", "B. Large", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "What will the following code output? 'for i in range(3): if i == 2: break; print(i)'",
  "options": ["A. 0 1", "B. 0 1 2", "C. 1 2", "D. None of the above"],
  "answer": "A"
},
{
  "question": "Which statement is used to return control from a function to the calling code?",
  "options": ["A. return", "B. exit", "C. break", "D. continue"],
  "answer": "A"
},
{
  "question": "What is the result of this code? 'for i in range(0, 5, 4): print(i)'",
  "options": ["A. 0 4", "B. 0 1", "C. 0 2", "D. 1 4"],
  "answer": "A"
},
{
  "question": "What will be printed by the following code? 'for i in range(2, 5): if i == 3: continue; print(i)'",
  "options": ["A. 2 3 4", "B. 2 4", "C. 3 4", "D. 3 5"],
  "answer": "B"
},
{
  "question": "What is the output of the following code? 'x = 3; if x == 3: print('Three') elif x == 2: print('Two') else: print('None')'",
  "options": ["A. Three", "B. Two", "C. None", "D. Error"],
  "answer": "A"
},
{
  "question": "What will the following code print? 'i = 0; while i < 3: print(i); i += 1'",
  "options": ["A. 0 1 2", "B. 0 1 2 3", "C. 1 2 3", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following options correctly defines the syntax for using an 'else' block after a loop?",
  "options": ["A. else: do_something", "B. for x in y: else", "C. while x: else", "D. all of the above"],
  "answer": "D"
},
{
  "question": "Which of the following loops allows you to iterate through a sequence of elements like a list or tuple?",
  "options": ["A. while loop", "B. for loop", "C. until loop", "D. do-while loop"],
  "answer": "B"
},
{
  "question": "What will be the output of this code? 'i = 0; while i < 3: print(i); i += 1'",
  "options": ["A. 0 1 2", "B. 1 2 3", "C. 0 1 2 3", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax for checking if an element is in a list?",
  "options": ["A. if element in list:", "B. if list in element:", "C. if element in list[]:", "D. if in list(element):"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'for i in range(1, 6): if i == 3: break; print(i)'",
  "options": ["A. 1 2 3", "B. 1 2", "C. 1 2 3 4", "D. 1 2 3 4 5"],
  "answer": "B"
},
{
  "question": "What does the 'continue' statement do in a loop?",
  "options": ["A. Exits the loop", "B. Skips the current iteration", "C. Restarts the loop from the beginning", "D. Terminates the function"],
  "answer": "B"
},
{
  "question": "What is the output of this code? 'i = 0; for i in range(3): print(i)'",
  "options": ["A. 0 1 2", "B. 1 2 3", "C. 0 1 2 3", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct way to define a function that accepts parameters in Python?",
  "options": ["A. function name(parameter):", "B. def function(parameter):", "C. def function_name(parameter)", "D. None of the above"],
  "answer": "B"
},
{
  "question": "What will be the result of the following code? 'for i in range(10): if i % 2 == 0: continue; print(i)'",
  "options": ["A. 1 3 5 7 9", "B. 0 2 4 6 8", "C. 1 3 5 7", "D. 1 3 5 7 9 10"],
  "answer": "A"
},
{
  "question": "What is the result of 'for i in range(0, 10, 5): print(i)'?",
  "options": ["A. 0 5", "B. 0 1 2 3 4", "C. 5 10", "D. 1 2 3 4 5"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'i = 0; while i < 5: if i == 3: break; print(i); i += 1'",
  "options": ["A. 0 1 2 3", "B. 0 1 2", "C. 1 2 3", "D. None of the above"],
  "answer": "B"
},
{
  "question": "What is the output of 'i = 3; while i < 6: print(i); i += 1'?",
  "options": ["A. 3 4 5 6", "B. 3 4 5", "C. 3 4", "D. 1 2 3 4"],
  "answer": "B"
},
{
  "question": "Which statement is used to stop the current iteration and move to the next iteration in a loop?",
  "options": ["A. break", "B. continue", "C. pass", "D. stop"],
  "answer": "B"
},
{
  "question": "What is the output of this code? 'x = 10; if x == 5: print('Five'); elif x == 10: print('Ten'); else: print('None')'",
  "options": ["A. Five", "B. Ten", "C. None", "D. Error"],
  "answer": "B"
},
{
  "question": "What is the purpose of the 'pass' statement in Python?",
  "options": ["A. To terminate a loop", "B. To continue the loop", "C. To create an empty block", "D. To raise an exception"],
  "answer": "C"
},
{
  "question": "What is the output of this code? 'for i in range(2, 8, 2): print(i)'",
  "options": ["A. 2 4 6", "B. 2 4 6 8", "C. 2 3 4 5 6", "D. 1 2 3 4 5 6 7"],
  "answer": "A"
},
{
  "question": "Which of the following will terminate a while loop in Python?",
  "options": ["A. break", "B. continue", "C. pass", "D. None of the above"],
  "answer": "A"
},
{
  "question": "What will be printed when the following code is executed? 'for i in range(3, 6): if i == 4: continue; print(i)'",
  "options": ["A. 3 4 5", "B. 3 5", "C. 4 5", "D. 3 4"],
  "answer": "B"
},
{
  "question": "What is the output of 'x = 10; if x != 5: print('Not Five') else: print('Five')'?",
  "options": ["A. Five", "B. Not Five", "C. Error", "D. None"],
  "answer": "B"
},
{
  "question": "What is the result of 'while 1 == 1: print('Looping')'?",
  "options": ["A. Infinite loop", "B. Error", "C. Loop stops after 1 iteration", "D. None"],
  "answer": "A"
},
{
  "question": "Which of the following can be used to loop over a string in Python?",
  "options": ["A. for loop", "B. while loop", "C. both A and B", "D. None of the above"],
  "answer": "C"
},
{
  "question": "Which of the following is an ordered collection of elements in Python?",
  "options": ["A. Set", "B. List", "C. Dictionary", "D. Tuple"],
  "answer": "B"
},
{
  "question": "Which of the following data types is immutable in Python?",
  "options": ["A. List", "B. Set", "C. Dictionary", "D. Tuple"],
  "answer": "D"
},
{
  "question": "How do you create an empty list in Python?",
  "options": ["A. []", "B. list()", "C. {}","D. Both A and B"],
  "answer": "D"
},
{
  "question": "Which of the following methods can be used to add an item to the end of a list?",
  "options": ["A. append()", "B. extend()", "C. insert()", "D. remove()"],
  "answer": "A"
},
{
  "question": "How do you remove the last item from a list in Python?",
  "options": ["A. pop()", "B. remove()", "C. delete()", "D. discard()"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to remove an item from a specific index in a list?",
  "options": ["A. remove()", "B. pop()", "C. delete()", "D. discard()"],
  "answer": "B"
},
{
  "question": "Which of the following is the correct way to access the first element of a list named 'my_list'?",
  "options": ["A. my_list[0]", "B. my_list(0)", "C. my_list{0}", "D. my_list[1]"],
  "answer": "A"
},
{
  "question": "What is the output of this code? 'my_list = [1, 2, 3]; my_list[1] = 10; print(my_list)'",
  "options": ["A. [1, 10, 3]", "B. [10, 2, 3]", "C. [1, 2, 3, 10]", "D. [1, 10]"],
  "answer": "A"
},
{
  "question": "What will the following code output? 'my_tuple = (1, 2, 3); my_tuple[1] = 5'",
  "options": ["A. (1, 5, 3)", "B. (1, 2, 3, 5)", "C. Error", "D. (1, 2, 5)"],
  "answer": "C"
},
{
  "question": "Which of the following functions is used to get the length of a list in Python?",
  "options": ["A. len()", "B. length()", "C. size()", "D. count()"],
  "answer": "A"
},
{
  "question": "Which of the following operations is used to concatenate two lists in Python?",
  "options": ["A. append()", "B. +", "C. extend()", "D. insert()"],
  "answer": "B"
},
{
  "question": "Which of the following is the correct way to create a dictionary in Python?",
  "options": ["A. {key1: value1, key2: value2}", "B. {key1 => value1, key2 => value2}", "C. (key1: value1, key2: value2)", "D. [key1: value1, key2: value2]"],
  "answer": "A"
},
{
  "question": "How do you access the value associated with 'key1' in the dictionary 'my_dict = {'key1': 100, 'key2': 200}'?",
  "options": ["A. my_dict['key1']", "B. my_dict.key1", "C. my_dict{key1}", "D. my_dict.get('key1')"],
  "answer": "A"
},
{
  "question": "How can you add a new key-value pair to a dictionary?",
  "options": ["A. my_dict.add('key', value)", "B. my_dict['key'] = value", "C. my_dict.add('key' => value)", "D. Both A and B"],
  "answer": "B"
},
{
  "question": "Which of the following methods can be used to get all the keys from a dictionary?",
  "options": ["A. keys()", "B. values()", "C. items()", "D. get()"],
  "answer": "A"
},
{
  "question": "What does the 'pop()' method do in a list?",
  "options": ["A. Removes an item from a list and returns it", "B. Removes the first item from the list", "C. Adds an item to the end of the list", "D. Replaces an item in the list"],
  "answer": "A"
},
{
  "question": "Which of the following methods removes an item by its value from a list?",
  "options": ["A. remove()", "B. pop()", "C. discard()", "D. del()"],
  "answer": "A"
},
{
  "question": "Which of the following will return True if the key 'age' exists in the dictionary?",
  "options": ["A. 'age' in my_dict", "B. my_dict['age']", "C. my_dict.contains('age')", "D. my_dict.exists('age')"],
  "answer": "A"
},
{
  "question": "What will the following code output? 'my_list = [1, 2, 3]; my_list.insert(1, 10); print(my_list)'",
  "options": ["A. [1, 10, 2, 3]", "B. [10, 1, 2, 3]", "C. [1, 2, 3, 10]", "D. [1, 2, 10, 3]"],
  "answer": "A"
},
{
  "question": "How do you sort a list in Python?",
  "options": ["A. my_list.sort()", "B. sort(my_list)", "C. list.sort()", "D. Both A and B"],
  "answer": "A"
},   
{
  "question": "Which of the following is the correct way to check if a key exists in a dictionary?",
  "options": ["A. key in my_dict", "B. my_dict.contains(key)", "C. my_dict.key() == True", "D. my_dict.exists(key)"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'my_dict = {'a': 1, 'b': 2}; print(my_dict.get('a'))'",
  "options": ["A. 1", "B. 'a'", "C. 2", "D. Error"],
  "answer": "A"
},
{
  "question": "Which method would you use to remove all elements from a list?",
  "options": ["A. clear()", "B. remove()", "C. delete()", "D. discard()"],
  "answer": "A"
},
{
  "question": "What does the 'extend()' method do to a list?",
  "options": ["A. Adds elements of another list to the current list", "B. Removes elements from the list", "C. Sorts the list", "D. None of the above"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'my_dict = {'a': 1, 'b': 2}; my_dict.pop('a'); print(my_dict)'",
  "options": ["A. {'b': 2}", "B. {'a': 1, 'b': 2}", "C. {'b': 1}", "D. Error"],
  "answer": "A"
},
{
  "question": "What type of data structure is a set in Python?",
  "options": ["A. Ordered", "B. Unordered", "C. Mutable", "D. Immutable"],
  "answer": "B"
},
{
  "question": "Which of the following can you not store in a set?",
  "options": ["A. Integer", "B. String", "C. List", "D. Float"],
  "answer": "C"
},
{
  "question": "How do you access the second item in a tuple named 'my_tuple'?",
  "options": ["A. my_tuple[2]", "B. my_tuple(1)", "C. my_tuple[1]", "D. my_tuple(2)"],
  "answer": "C"
},
{
  "question": "What will happen if you try to change an item in a tuple?",
  "options": ["A. Error", "B. Item will be replaced", "C. The tuple will shrink", "D. The tuple will expand"],
  "answer": "A"
},
{
  "question": "Which of the following methods can be used to join two lists?",
  "options": ["A. append()", "B. +", "C. insert()", "D. extend()"],
  "answer": "B"
},
{
  "question": "How can you create a tuple with one element?",
  "options": ["A. (1)", "B. (1,)", "C. (1, 2)", "D. tuple(1)"],
  "answer": "B"
},
{
  "question": "What is the output of this code? 'my_dict = {'a': 1, 'b': 2}; my_dict.update({'a': 3}); print(my_dict)'",
  "options": ["A. {'a': 3, 'b': 2}", "B. {'a': 1, 'b': 2}", "C. {'a': 3, 'b': 1}", "D. {'b': 2}"],
  "answer": "A"
},
{
  "question": "Which method is used to get the value associated with a specific key in a dictionary, or a default value if the key doesn't exist?",
  "options": ["A. get()", "B. fetch()", "C. find()", "D. search()"],
  "answer": "A"
},
{
  "question": "How do you reverse the order of items in a list?",
  "options": ["A. reverse()", "B. reverse_list()", "C. list.reverse()", "D. None of the above"],
  "answer": "A"
},
{
  "question": "What does the 'del' keyword do when used with a list?",
  "options": ["A. Deletes the entire list", "B. Deletes a specific item from the list", "C. Deletes a key-value pair from a dictionary", "D. Deletes an element from a tuple"],
  "answer": "B"
},
{
  "question": "What type of data structure is a dictionary in Python?",
  "options": ["A. Ordered and Mutable", "B. Unordered and Mutable", "C. Ordered and Immutable", "D. Unordered and Immutable"],
  "answer": "B"
},
{
  "question": "Which of the following methods is used to get all values in a dictionary?",
  "options": ["A. values()", "B. keys()", "C. items()", "D. get()"],
  "answer": "A"
},
{
  "question": "What is the output of the following code? 'my_list = [5, 6, 7]; print(len(my_list))'",
  "options": ["A. 3", "B. 6", "C. 5", "D. 7"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax to access a key 'age' from a dictionary 'person = {'age': 25}'?",
  "options": ["A. person['age']", "B. person.age", "C. person{age}", "D. person.get('age')"],
  "answer": "A"
},
{
  "question": "Which of the following is an incorrect operation on a tuple?",
  "options": ["A. Accessing an element", "B. Slicing the tuple", "C. Adding an item", "D. Iterating over the tuple"],
  "answer": "C"
},
{
  "question": "What does the 'clear()' method do to a dictionary?",
  "options": ["A. Removes all key-value pairs from the dictionary", "B. Clears the value of a single key", "C. Deletes the dictionary", "D. Removes the last added item"],
  "answer": "A"
},
{
  "question": "How do you find the index of an element in a list?",
  "options": ["A. find()", "B. index()", "C. locate()", "D. search()"],
  "answer": "B"
},
{
  "question": "What is the output of this code? 'my_tuple = (1, 2, 3); print(my_tuple[2])'",
  "options": ["A. 3", "B. 2", "C. 1", "D. Error"],
  "answer": "A"
},
{
  "question": "What happens when you try to modify a set?",
  "options": ["A. You can add or remove elements", "B. The set becomes mutable", "C. You get an error", "D. The set becomes ordered"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to get all the key-value pairs from a dictionary?",
  "options": ["A. items()", "B. keys()", "C. values()", "D. get()"],
  "answer": "A"
},
{
  "question": "What does the 'union()' method do in sets?",
  "options": ["A. Returns a set with all elements from both sets", "B. Returns the intersection of two sets", "C. Removes duplicate elements", "D. Adds an element to the set"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax to create a tuple with multiple items?",
  "options": ["A. ()", "B. [1, 2, 3]", "C. (1, 2, 3)", "D. {1, 2, 3}"],
  "answer": "C"
},
{
  "question": "How do you create a set in Python?",
  "options": ["A. set()", "B. []", "C. ()", "D. {}"],
  "answer": "A"
},
{
  "question": "Which of the following is an immutable data type in Python?",
  "options": ["A. List", "B. Set", "C. Tuple", "D. Dictionary"],
  "answer": "C"
},
{
  "question": "What will the following code output? 'my_set = {1, 2, 3}; my_set.add(4); print(my_set)'",
  "options": ["A. {1, 2, 3, 4}", "B. {4, 1, 2, 3}", "C. Error", "D. {1, 2, 3}"],
  "answer": "A"
},
{
  "question": "How do you remove an item from a set?",
  "options": ["A. discard()", "B. remove()", "C. pop()", "D. All of the above"],
  "answer": "D"
},
{
  "question": "What is the output of the following code? 'my_list = [10, 20, 30]; print(my_list[::-1])'",
  "options": ["A. [10, 20, 30]", "B. [30, 20, 10]", "C. Error", "D. [20, 30, 10]"],
  "answer": "B"
},
{
  "question": "How can you access the last item in a list?",
  "options": ["A. list[-1]", "B. list[-0]", "C. list[0]", "D. list[len(list)]"],
  "answer": "A"
},
{
  "question": "Which of the following methods is used to remove a specific element from a set?",
  "options": ["A. discard()", "B. remove()", "C. pop()", "D. All of the above"],
  "answer": "D"
},
{
  "question": "Which of the following will result in an error?",
  "options": ["A. tuple[0] = 5", "B. list[0] = 5", "C. set[0] = 5", "D. dictionary['key'] = 5"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct way to update an existing key in a dictionary?",
  "options": ["A. my_dict['key'] = new_value", "B. my_dict.update('key', new_value)", "C. my_dict.add('key', new_value)", "D. my_dict.update({'key': new_value})"],
  "answer": "A"
},
{
  "question": "How can you get the intersection of two sets in Python?",
  "options": ["A. set1.union(set2)", "B. set1 & set2", "C. set1 | set2", "D. set1.difference(set2)"],
  "answer": "B"
},
{
  "question": "Which of the following is the correct syntax for defining a dictionary with multiple key-value pairs?",
  "options": ["A. my_dict = {1: 'a', 2: 'b'}", "B. my_dict = (1: 'a', 2: 'b')", "C. my_dict = {'1'='a', '2'='b'}", "D. my_dict = {'1': a, '2': b}"],
  "answer": "A"
},
{
  "question": "What does the 'popitem()' method do in a dictionary?",
  "options": ["A. Removes a random key-value pair", "B. Removes the last key-value pair", "C. Adds a new key-value pair", "D. Retrieves a key-value pair"],
  "answer": "A"
},
{
  "question": "How can you get all the elements of a list in Python?",
  "options": ["A. list()", "B. list.all()", "C. list[:]","D. None of the above"],
  "answer": "C"
},
{
  "question": "What is the output of this code? 'my_list = [1, 2, 3]; my_list.append([4, 5]); print(my_list)'",
  "options": ["A. [1, 2, 3, 4, 5]", "B. [1, 2, 3, [4, 5]]", "C. [1, 2, 3, (4, 5)]", "D. Error"],
  "answer": "B"
},
{
  "question": "What is the result of this operation? 'len((1, 2, 3, 4))'",
  "options": ["A. 3", "B. 4", "C. 5", "D. Error"],
  "answer": "B"
},
{
  "question": "Which method returns the number of times a value appears in a list?",
  "options": ["A. index()", "B. count()", "C. find()", "D. search()"],
  "answer": "B"
},
{
  "question": "Which of the following best describes a dictionary?",
  "options": ["A. Unordered key-value pairs", "B. Ordered key-value pairs", "C. List of keys", "D. Set of values"],
  "answer": "A"
},
{
  "question": "What is the result of 'my_list = [1, 2]; my_list *= 2; print(my_list)'?",
  "options": ["A. [1, 2, 1, 2]", "B. [1, 2]", "C. [1, 1, 2, 2]", "D. Error"],
  "answer": "A"
},
{
  "question": "Which data structure maintains the order of insertion?",
  "options": ["A. Dictionary (Python 3.7+)", "B. Set", "C. Tuple", "D. Frozen set"],
  "answer": "A"
},
{
  "question": "Which of the following will raise an error when applied to a dictionary?",
  "options": ["A. my_dict[0]", "B. my_dict['key']", "C. my_dict.get('key')", "D. my_dict['missing']"],
  "answer": "D"
},
{
  "question": "What is the output of this code? 'my_tuple = ('a',); print(type(my_tuple))'",
  "options": ["A. <class 'str'>", "B. <class 'tuple'>", "C. <class 'list'>", "D. <class 'set'>"],
  "answer": "B"
},
{
  "question": "What method would you use to get a list of dictionary keys?",
  "options": ["A. keys()", "B. get_keys()", "C. all_keys()", "D. fetch_keys()"],
  "answer": "A"
},
{
  "question": "What will this code do? 'my_dict = dict(a=1, b=2); print(my_dict)'",
  "options": ["A. {'a': 1, 'b': 2}", "B. {a: 1, b: 2}", "C. {'dict': 'a=1, b=2'}", "D. Error"],
  "answer": "A"
},
{
  "question": "What is the correct way to copy a list?",
  "options": ["A. list.copy()", "B. list = original_list", "C. list.clone()", "D. list.duplicate()"],
  "answer": "A"
},
{
  "question": "What is the output of 'list('abc')'?",
  "options": ["A. ['abc']", "B. ['a', 'b', 'c']", "C. ['a b c']", "D. ('a', 'b', 'c')"],
  "answer": "B"
},
{
  "question": "How do you remove the last item from a list?",
  "options": ["A. pop()", "B. remove()", "C. delete()", "D. clear()"],
  "answer": "A"
},
{
  "question": "Which operator is used to join two lists?",
  "options": ["A. +", "B. &", "C. *", "D. %"],
  "answer": "A"
},
{
  "question": "How do you convert a list into a tuple?",
  "options": ["A. tuple(list_name)", "B. list.to_tuple()", "C. convert(list)", "D. tuple.list()"],
  "answer": "A"
},
{
  "question": "Which data structure is faster for membership testing?",
  "options": ["A. Set", "B. List", "C. Tuple", "D. Dictionary"],
  "answer": "A"
},
{
  "question": "What does the following code do? 'list1 = [1, 2]; list2 = list1; list1[0] = 99; print(list2)'",
  "options": ["A. [99, 2]", "B. [1, 2]", "C. [2, 1]", "D. [99]"],
  "answer": "A"
},
{
  "question": "Which function is used to create a list from a range of numbers?",
  "options": ["A. list(range(n))", "B. range.list(n)", "C. make_list(n)", "D. list.create(n)"],
  "answer": "A"
},
{
  "question": "Which of the following operations is not valid for a tuple?",
  "options": ["A. Indexing", "B. Slicing", "C. Modification", "D. Iteration"],
  "answer": "C"
},
{
  "question": "Which collection is best suited to store unique items?",
  "options": ["A. Set", "B. List", "C. Tuple", "D. Dictionary"],
  "answer": "A"
},
{
  "question": "What is the output of 'set([1, 2, 2, 3])'?",
  "options": ["A. {1, 2, 3}", "B. {1, 2, 2, 3}", "C. [1, 2, 3]", "D. (1, 2, 3)"],
  "answer": "A"
},
{
  "question": "Which of the following is used to access all items in a dictionary?",
  "options": ["A. items()", "B. keys()", "C. values()", "D. elements()"],
  "answer": "A"
},
{
  "question": "Which method removes a specific key-value pair from a dictionary?",
  "options": ["A. pop()", "B. delete()", "C. remove()", "D. discard()"],
  "answer": "A"
},
{
  "question": "What happens if you use 'del my_list[2]' on a list with less than 3 items?",
  "options": ["A. IndexError", "B. Deletes the last item", "C. Removes the second item", "D. Nothing happens"],
  "answer": "A"
},
{
  "question": "Which structure allows duplicate keys?",
  "options": ["A. Dictionary", "B. List", "C. Set", "D. None of the above"],
  "answer": "D"
},
{
  "question": "Which of the following is a correct way to create a set in Python?",
  "options": ["A. set1 = {1, 2, 3}", "B. set1 = (1, 2, 3)", "C. set1 = [1, 2, 3]", "D. set1 = <1, 2, 3>"],
  "answer": "A"
},
{
  "question": "Which of these is a characteristic of a set?",
  "options": ["A. Ordered and allows duplicates", "B. Unordered and allows duplicates", "C. Ordered and no duplicates", "D. Unordered and no duplicates"],
  "answer": "D"
},
{
  "question": "What will be the output of 'set([1, 2, 2, 3])'?",
  "options": ["A. {1, 2, 3}", "B. {1, 2, 2, 3}", "C. [1, 2, 3]", "D. (1, 2, 3)"],
  "answer": "A"
},
{
  "question": "How do you add an item to a set?",
  "options": ["A. add()", "B. append()", "C. insert()", "D. extend()"],
  "answer": "A"
},
{
  "question": "What will happen if you add a duplicate element to a set?",
  "options": ["A. Error", "B. It will be added", "C. It will replace the existing element", "D. It will be ignored"],
  "answer": "D"
},
{
  "question": "Which method removes an element from a set without raising an error if it does not exist?",
  "options": ["A. remove()", "B. discard()", "C. pop()", "D. delete()"],
  "answer": "B"
},
{
  "question": "What is the result of the following? 'a = {1, 2, 3}; a.pop()'",
  "options": ["A. Removes a random element", "B. Removes last element", "C. Removes first element", "D. Error"],
  "answer": "A"
},
{
  "question": "Which method combines two sets and removes duplicates?",
  "options": ["A. union()", "B. merge()", "C. combine()", "D. intersect()"],
  "answer": "A"
},
{
  "question": "Which operator can be used to find the intersection of two sets?",
  "options": ["A. &", "B. |", "C. ^", "D. -"],
  "answer": "A"
},
{
  "question": "What does the '^' operator do on sets?",
  "options": ["A. Intersection", "B. Union", "C. Symmetric difference", "D. Difference"],
  "answer": "C"
},
{
  "question": "Which set method checks if all elements of one set exist in another?",
  "options": ["A. issubset()", "B. subset()", "C. contains()", "D. ismember()"],
  "answer": "A"
},
{
  "question": "Which method returns elements common to both sets?",
  "options": ["A. intersect()", "B. intersection()", "C. common()", "D. overlap()"],
  "answer": "B"
},
{
  "question": "Which method removes all items from a set?",
  "options": ["A. delete()", "B. clear()", "C. remove_all()", "D. empty()"],
  "answer": "B"
},
{
  "question": "How is a frozenset different from a regular set?",
  "options": ["A. It's mutable", "B. It allows duplicates", "C. It's immutable", "D. It's ordered"],
  "answer": "C"
},
{
  "question": "Which of these is a valid frozenset declaration?",
  "options": ["A. frozenset([1, 2, 3])", "B. {1, 2, 3}", "C. frozenset{1, 2, 3}", "D. freeze([1, 2, 3])"],
  "answer": "A"
},
{
  "question": "Can you add items to a frozenset?",
  "options": ["A. Yes, using add()", "B. Yes, using append()", "C. No", "D. Only using update()"],
  "answer": "C"
},
{
  "question": "Which operation is valid on frozensets?",
  "options": ["A. Union", "B. Add", "C. Remove", "D. Discard"],
  "answer": "A"
},
{
  "question": "What is the output of 'len(set([1,2,2,3,4]))'?",
  "options": ["A. 5", "B. 4", "C. 3", "D. Error"],
  "answer": "B"
},
{
  "question": "Which keyword is used to check if an element exists in a set?",
  "options": ["A. inside", "B. has", "C. in", "D. contains"],
  "answer": "C"
},
{
  "question": "What happens if you try to access a set element by index like set1[0]?",
  "options": ["A. Returns the first element", "B. Error", "C. Returns any element", "D. None"],
  "answer": "B"
},
{
  "question": "Sets in Python are implemented using which data structure?",
  "options": ["A. List", "B. Hash table", "C. Tree", "D. Queue"],
  "answer": "B"
},
{
  "question": "What will be the result of: 'set1 = {1, 2}; set2 = {2, 3}; print(set1 & set2)'?",
  "options": ["A. {1, 2, 3}", "B. {2}", "C. {1}", "D. {1, 3}"],
  "answer": "B"
},
{
  "question": "Which method returns a new set with elements in either the set or the other but not both?",
  "options": ["A. symmetric_difference()", "B. difference()", "C. union()", "D. intersection()"],
  "answer": "A"
},
{
  "question": "What does 'set1.difference(set2)' return?",
  "options": ["A. Common elements", "B. All elements", "C. Elements in set1 not in set2", "D. Error"],
  "answer": "C"
},
{
  "question": "How do you clone a set?",
  "options": ["A. copy()", "B. clone()", "C. duplicate()", "D. = operator"],
  "answer": "A"
},
{
  "question": "What is the result of 'set([1,2,3]) == set([3,2,1])'?",
  "options": ["A. True", "B. False", "C. Error", "D. None"],
  "answer": "A"
},
{
  "question": "Which method is used to check if a set is a superset of another?",
  "options": ["A. issuperset()", "B. issubset()", "C. super()", "D. includes()"],
  "answer": "A"
},
{
  "question": "Which operator performs set difference?",
  "options": ["A. -", "B. &", "C. |", "D. ^"],
  "answer": "A"
},
{
  "question": "Which function converts a list to a set?",
  "options": ["A. list()", "B. tuple()", "C. set()", "D. dict()"],
  "answer": "C"
},
{
  "question": "Which method is used to update a set with multiple values?",
  "options": ["A. append()", "B. add()", "C. update()", "D. insert()"],
  "answer": "C"
},
{
  "question": "What does 'a = set(); a.add(5)' do?",
  "options": ["A. Adds 5 to the set", "B. Replaces all elements with 5", "C. Errors", "D. Does nothing"],
  "answer": "A"
},
{
  "question": "Which of the following will raise an error?",
  "options": ["A. {1, 2, 3}.remove(4)", "B. {1, 2, 3}.discard(4)", "C. {1, 2, 3}.clear()", "D. set([1, 2, 3])"],
  "answer": "A"
},
{
  "question": "Which is an immutable version of a set?",
  "options": ["A. frozen()", "B. lockedset", "C. frozenlist", "D. frozenset"],
  "answer": "D"
},
{
  "question": "Which of these types can be elements in a set?",
  "options": ["A. List", "B. Dictionary", "C. Tuple", "D. Set"],
  "answer": "C"
},
{
  "question": "What is the result of: 'len(set('banana'))'?",
  "options": ["A. 3", "B. 5", "C. 6", "D. 1"],
  "answer": "A"
},
{
  "question": "Can you store a set inside another set?",
  "options": ["A. Yes", "B. No", "C. Only if it's frozen", "D. Only if it's a list"],
  "answer": "C"
},
{
  "question": "Which method would you use to find items only in the first set?",
  "options": ["A. set1 - set2", "B. set1 + set2", "C. set1 & set2", "D. set1 | set2"],
  "answer": "A"
},
{
  "question": "How would you create an empty set?",
  "options": ["A. {}", "B. []", "C. set()", "D. empty()"],
  "answer": "C"
},
{
  "question": "What is the output of: 'bool(set())'?",
  "options": ["A. True", "B. False", "C. None", "D. Error"],
  "answer": "B"
},
{
  "question": "Which expression returns a new set without modifying the original?",
  "options": ["A. set1.difference(set2)", "B. set1.difference_update(set2)", "C. set1 -= set2", "D. set1.clear()"],
  "answer": "A"
},
{
  "question": "What happens when you use clear() on a set?",
  "options": ["A. Deletes one element", "B. Makes it empty", "C. Resets to default", "D. Removes duplicates"],
  "answer": "B"
},
{
  "question": "Which operator is used for union of sets?",
  "options": ["A. &", "B. ^", "C. |", "D. -"],
  "answer": "C"
},
{
  "question": "Which statement is false about sets?",
  "options": ["A. Sets are unordered", "B. Sets allow duplicates", "C. Sets are mutable", "D. Sets are iterable"],
  "answer": "B"
},
{
  "question": "Which of the following is not a method on sets?",
  "options": ["A. add()", "B. update()", "C. union()", "D. append()"],
  "answer": "D"
},
{
  "question": "What is returned by: 'set('hello')'?",
  "options": ["A. {'h', 'e', 'l', 'l', 'o'}", "B. ['h', 'e', 'l', 'o']", "C. {'h', 'e', 'l', 'o'}", "D. ['hello']"],
  "answer": "C"
},
{
  "question": "What happens if you try to modify a frozenset?",
  "options": ["A. It's updated", "B. It creates a copy", "C. Raises an error", "D. Nothing happens"],
  "answer": "C"
},
{
  "question": "Which of these can be used as a dictionary key?",
  "options": ["A. set", "B. frozenset", "C. list", "D. dict"],
  "answer": "B"
},
{
  "question": "Which function finds all unique characters in a string?",
  "options": ["A. set()", "B. list()", "C. dict()", "D. str()"],
  "answer": "A"
},
{
  "question": "Can frozensets be used in set operations like union or intersection?",
  "options": ["A. No", "B. Only union", "C. Only intersection", "D. Yes"],
  "answer": "D"
},
{
  "question": "What is the return type of set('abc')?",
  "options": ["A. list", "B. str", "C. set", "D. dict"],
  "answer": "C"
},
{
  "question": "What will be the result of: 'set1 = {1, 2}; set2 = {3, 4}; set1.update(set2); print(set1)'?",
  "options": ["A. {1, 2}", "B. {3, 4}", "C. {1, 2, 3, 4}", "D. Error"],
  "answer": "C"
},
{
  "question": "Which operation returns elements only in set2 but not in set1?",
  "options": ["A. set1 - set2", "B. set2 - set1", "C. set1 & set2", "D. set1 | set2"],
  "answer": "B"
},
{
  "question": "What is the result of this code? 'a = set(); print(len(a))'",
  "options": ["A. 0", "B. 1", "C. None", "D. Error"],
  "answer": "A"
},
{
  "question": "What is the output of: 'set([1, 2, 2, 3, 4, 4])'?",
  "options": ["A. {1, 2, 3, 4}", "B. [1, 2, 3, 4]", "C. {1, 2, 2, 3, 4, 4}", "D. Error"],
  "answer": "A"
},
{
  "question": "Which method returns a shallow copy of a set?",
  "options": ["A. clone()", "B. copy()", "C. duplicate()", "D. set()"],
  "answer": "B"
},
{
  "question": "Can you use the '+' operator with sets?",
  "options": ["A. Yes", "B. No", "C. Only with numbers", "D. Only with frozensets"],
  "answer": "B"
},
{
  "question": "Which of the following results in a KeyError?",
  "options": ["A. set.remove(non_existing)", "B. set.discard(non_existing)", "C. set.clear()", "D. set.copy()"],
  "answer": "A"
},
{
  "question": "How to find the number of elements in a set?",
  "options": ["A. count()", "B. size()", "C. len()", "D. total()"],
  "answer": "C"
},
{
  "question": "What is the data type of: 'type(set())'?",
  "options": ["A. dict", "B. list", "C. set", "D. frozenset"],
  "answer": "C"
},
{
  "question": "How do you find elements in either of two sets but not both?",
  "options": ["A. set1 ^ set2", "B. set1 & set2", "C. set1 | set2", "D. set1 - set2"],
  "answer": "A"
},
{
  "question": "Is set() mutable?",
  "options": ["A. Yes", "B. No", "C. Only once", "D. Only if declared global"],
  "answer": "A"
},
{
  "question": "Which is faster for membership testing?",
  "options": ["A. list", "B. set", "C. tuple", "D. dict"],
  "answer": "B"
},
{
  "question": "Which operation removes all common elements from the set?",
  "options": ["A. difference_update()", "B. intersection_update()", "C. clear()", "D. remove()"],
  "answer": "B"
},
{
  "question": "Which data structure doesn't allow mutable elements?",
  "options": ["A. list", "B. set", "C. frozenset", "D. dict"],
  "answer": "C"
},
{
  "question": "What is the default return of pop() if set is empty?",
  "options": ["A. 0", "B. None", "C. Error", "D. []"],
  "answer": "C"
},
{
  "question": "What is the output of: 'print(type(frozenset([1,2])))'?",
  "options": ["A. <class 'set'>", "B. <class 'frozenset'>", "C. <class 'dict'>", "D. <class 'list'>"],
  "answer": "B"
},
{
  "question": "What will be the output of 'frozenset('abc') | frozenset('cd')'?",
  "options": ["A. {'a', 'b', 'c', 'd'}", "B. {'c'}", "C. {'a', 'b', 'd'}", "D. {'a', 'b', 'c'}"],
  "answer": "A"
},
{
  "question": "What does 'frozenset('abc') & frozenset('bd')' return?",
  "options": ["A. {'b'}", "B. {'a'}", "C. {'c'}", "D. {'d'}"],
  "answer": "A"
},
{
  "question": "Can sets be nested directly?",
  "options": ["A. Yes", "B. No", "C. Only empty sets", "D. Only with the add() method"],
  "answer": "B"
},
{
  "question": "Which expression checks if two sets are disjoint?",
  "options": ["A. set1 | set2", "B. set1 & set2 == set()", "C. set1 == set2", "D. set1 in set2"],
  "answer": "B"
},
{
  "question": "What does 'set1.symmetric_difference(set2)' return?",
  "options": ["A. All elements in both sets", "B. Only common elements", "C. Elements in either but not both", "D. Error"],
  "answer": "C"
},
{
  "question": "What type of object is returned by 'set(range(3))'?",
  "options": ["A. list", "B. tuple", "C. set", "D. dict"],
  "answer": "C"
},
{
  "question": "Which is a valid way to initialize a set with values 1, 2, and 3?",
  "options": ["A. set(1,2,3)", "B. {1:2, 2:3}", "C. {1, 2, 3}", "D. set[1, 2, 3]"],
  "answer": "C"
},
{
  "question": "How can you check if set1 is a subset of set2?",
  "options": ["A. set1 in set2", "B. set1.issubset(set2)", "C. set2.subset(set1)", "D. set1 <= set2"],
  "answer": "B"
},
{
  "question": "What is returned by: 'type({})'?",
  "options": ["A. set", "B. list", "C. dict", "D. tuple"],
  "answer": "C"
},
{
  "question": "What is the result of 'len(frozenset('hello'))'?",
  "options": ["A. 4", "B. 5", "C. 1", "D. 6"],
  "answer": "A"
},
{
  "question": "Which is true about sets in Python?",
  "options": ["A. Sets are indexed", "B. Sets allow duplicates", "C. Sets are mutable", "D. Sets are ordered"],
  "answer": "C"
},
{
  "question": "What does 'frozenset([1, 2]) | {2, 3}' return?",
  "options": ["A. {1, 2, 3}", "B. frozenset({1, 2, 3})", "C. Error", "D. {2}"],
  "answer": "A"
},
{
  "question": "Which method removes a random element from a set?",
  "options": ["A. remove()", "B. discard()", "C. pop()", "D. del()"],
  "answer": "C"
},
{
  "question": "Which of these can you not use with sets?",
  "options": ["A. len()", "B. add()", "C. append()", "D. update()"],
  "answer": "C"
},
{
  "question": "What is the output of: 'print(2 in {1, 2, 3})'?",
  "options": ["A. True", "B. False", "C. None", "D. Error"],
  "answer": "A"
},
{
  "question": "How many elements are in 'set([1, 1, 2, 3])'?",
  "options": ["A. 3", "B. 4", "C. 2", "D. 1"],
  "answer": "A"
},
{
  "question": "What is the output of: 'set('aabbcc')'?",
  "options": ["A. {'a', 'b', 'c'}", "B. {'aa', 'bb', 'cc'}", "C. {'aabbcc'}", "D. Error"],
  "answer": "A"
},
{
  "question": "Which method is used to find the intersection of two sets?",
  "options": ["A. &", "B. union()", "C. intersection()", "D. difference()"],
  "answer": "C"
},
{
  "question": "Which operator checks if one set is subset of another?",
  "options": ["A. <", "B. >", "C. !=", "D. =="],
  "answer": "A"
},
{
  "question": "What will 'set1 |= set2' do?",
  "options": ["A. Assigns set2 to set1", "B. Updates set1 with union of set2", "C. Deletes set2", "D. Clears set1"],
  "answer": "B"
},
{
  "question": "Which method does not modify the original set?",
  "options": ["A. union()", "B. update()", "C. difference_update()", "D. discard()"],
  "answer": "A"
},
{
  "question": "Which method will not raise an error if item not found?",
  "options": ["A. remove()", "B. discard()", "C. pop()", "D. index()"],
  "answer": "B"
},
{
  "question": "What will 'set1 & set2' return?",
  "options": ["A. Union", "B. Symmetric difference", "C. Common elements", "D. Error"],
  "answer": "C"
},
{
  "question": "Which is true about frozenset?",
  "options": ["A. Mutable", "B. Hashable", "C. Ordered", "D. Supports append()"],
  "answer": "B"
},
{
  "question": "Which statement is true?",
  "options": ["A. set is immutable", "B. frozenset allows add()", "C. set is iterable", "D. frozenset is mutable"],
  "answer": "C"
},
{
  "question": "Which of the following can be added to a set?",
  "options": ["A. list", "B. dict", "C. frozenset", "D. set"],
  "answer": "C"
},
{
  "question": "Which method combines multiple sets without duplicates?",
  "options": ["A. union()", "B. extend()", "C. add()", "D. concat()"],
  "answer": "A"
},
{
  "question": "What is the result of: 'set((1,2,3,2,1))'?",
  "options": ["A. {1,2,3}", "B. [1,2,3]", "C. (1,2,3)", "D. Error"],
  "answer": "A"
},
{
  "question": "What does 'set1 ^= set2' do?",
  "options": ["A. Nothing", "B. Updates with common elements", "C. Updates with symmetric difference", "D. Error"],
  "answer": "C"
},
{
  "question": "How do you remove all elements from a set?",
  "options": ["A. remove()", "B. discard()", "C. clear()", "D. delete()"],
  "answer": "C"
},
{
  "question": "What is returned by: 'type(frozenset())'?",
  "options": ["A. <class 'set'>", "B. <class 'frozenset'>", "C. <class 'dict'>", "D. <class 'tuple'>"],
  "answer": "B"
},
{
  "question": "What is the result of: 'frozenset([1, 2]) & set([2, 3])'?",
  "options": ["A. {2}", "B. frozenset({2})", "C. [2]", "D. Error"],
  "answer": "B"
},
{
  "question": "Which operation is not supported by frozensets?",
  "options": ["A. union()", "B. intersection()", "C. add()", "D. difference()"],
  "answer": "C"
},
{
  "question": "Which Python type is unordered and immutable?",
  "options": ["A. list", "B. frozenset", "C. dict", "D. tuple"],
  "answer": "B"
},
{ "question": "Which keyword is used to define a function in Python?", "options": ["A. define", "B. function", "C. def", "D. func"], "answer": "C" }, { "question": "What is the purpose of the 'return' statement in a function?", "options": ["A. Print output", "B. Exit the program", "C. Send back a value", "D. Stop the interpreter"], "answer": "C" }, { "question": "How do you import a module in Python?", "options": ["A. include module", "B. import module", "C. load module", "D. attach module"], "answer": "B" }, { "question": "What is the output of: def add(x, y): return x + y; print(add(2, 3))?", "options": ["A. 23", "B. 5", "C. x + y", "D. Error"], "answer": "B" }, { "question": "Which file type is typically used for creating modules in Python?", "options": ["A. .txt", "B. .csv", "C. .py", "D. .mod"], "answer": "C" }, { "question": "What is a Python module?", "options": ["A. A class", "B. A file containing Python code", "C. A Python package", "D. A Python variable"], "answer": "B" }, { "question": "Which built-in function gives a list of attributes of an object/module?", "options": ["A. type()", "B. help()", "C. dir()", "D. attr()"], "answer": "C" }, { "question": "Which keyword allows importing specific items from a module?", "options": ["A. import", "B. from", "C. using", "D. module"], "answer": "B" }, { "question": "How can you give an alias to a module?", "options": ["A. module.alias()", "B. import module as alias", "C. alias module", "D. module = alias"], "answer": "B" }, { "question": "What does the 'math' module provide?", "options": ["A. File handling", "B. OS-level functions", "C. Mathematical functions", "D. Web operations"], "answer": "C" }, { "question": "What is the output of: def greet(): print('Hello'); greet()?", "options": ["A. Nothing", "B. Hello", "C. greet", "D. Error"], "answer": "B" }, { "question": "How can a function receive default values?", "options": ["A. By using return", "B. By using default keyword", "C. By assigning in parameter list", "D. By using const"], "answer": "C" }, { "question": "What does the statement 'if name == "main"' check?", "options": ["A. Module import", "B. Variable name", "C. Main program execution", "D. File name"], "answer": "C" }, { "question": "Which is a valid way to import the 'math' module?", "options": ["A. load math", "B. import math", "C. require math", "D. attach math"], "answer": "B" }, { "question": "What is the output of: def foo(x): return x2; print(foo(4))?", "options": ["A. 4", "B. 8", "C. x2", "D. Error"], "answer": "B" }, { "question": "Which function gets user input from the console?", "options": ["A. input()", "B. scan()", "C. get()", "D. enter()"], "answer": "A" }, { "question": "Which symbol is used to comment in Python?", "options": ["A. //", "B. /* */", "C. #", "D. <!-- -->"], "answer": "C" }, { "question": "Can a Python function return multiple values?", "options": ["A. No", "B. Only integers", "C. Yes, using tuple", "D. Yes, using return only one value"], "answer": "C" }, { "question": "What is a function parameter?", "options": ["A. Output from a function", "B. Argument passed to a function", "C. Code block", "D. Function result"], "answer": "B" }, { "question": "How do you define a function with no parameters?", "options": ["A. def func[]", "B. def func()", "C. define func()", "D. function func()"], "answer": "B" }, { "question": "What will 'import math; print(math.sqrt(16))' output?", "options": ["A. 8", "B. 256", "C. 4.0", "D. Error"], "answer": "C" }, { "question": "Which module helps to interact with the operating system?", "options": ["A. math", "B. os", "C. time", "D. sys"], "answer": "B" }, { "question": "What does 'import random' do?", "options": ["A. Creates randomness", "B. Imports system settings", "C. Creates GUI", "D. Handles text"], "answer": "A" }, { "question": "How do you install a third-party Python module?", "options": ["A. python install", "B. pip install", "C. setup install", "D. module install"], "answer": "B" }, { "question": "What is a return type of a function that does not return anything?", "options": ["A. 0", "B. void", "C. None", "D. False"], "answer": "C" },
{
  "question": "What does the 'random' module in Python help with?",
  "options": ["A. File handling", "B. Math operations", "C. Generating random values", "D. Date formatting"],
  "answer": "C"
}
{
  "question": "Which of the following defines a function named 'greet' that prints 'Hi'?",
  "options": ["A. def greet: print('Hi')", "B. def greet() print('Hi')", "C. def greet(): print('Hi')", "D. greet() = print('Hi')"],
  "answer": "C"
}
{
  "question": "What is the correct way to import only the sqrt function from the math module?",
  "options": ["A. from math import sqrt", "B. import math.sqrt", "C. import sqrt from math", "D. math import sqrt"],
  "answer": "A"
}
{
  "question": "How do you prevent a function from returning a value?",
  "options": ["A. Use break", "B. Use continue", "C. Do not use return", "D. Use return 0"],
  "answer": "C"
}
{
  "question": "What is a function that calls itself called?",
  "options": ["A. Static", "B. Lambda", "C. Recursive", "D. Self-calling"],
  "answer": "C"
}
{
  "question": "Which function can be used to get the current working directory?",
  "options": ["A. os.get()", "B. os.getcwd()", "C. path.cwd()", "D. os.directory()"],
  "answer": "B"
}
{
  "question": "What is the use of 'import os'?",
  "options": ["A. Math functions", "B. File reading", "C. Operating system interface", "D. GUI programming"],
  "answer": "C"
}
{
  "question": "What is the correct way to define a function with one parameter 'x'?",
  "options": ["A. def x(func):", "B. def func[x]:", "C. def func(x):", "D. function(x):"],
  "answer": "C"
}
{
  "question": "Which Python module is used for date and time operations?",
  "options": ["A. datetime", "B. math", "C. os", "D. timeos"],
  "answer": "A"
}
{
  "question": "What is a docstring in a Python function?",
  "options": ["A. Variable name", "B. A comment outside function", "C. A string to document the function", "D. None of these"],
  "answer": "C"
}
{
  "question": "What will 'type(math)' return after 'import math'?",
  "options": ["A. module", "B. str", "C. function", "D. int"],
  "answer": "A"
}
{
  "question": "Which function is used to pause program execution for some time?",
  "options": ["A. pause()", "B. sleep()", "C. delay()", "D. wait()"],
  "answer": "B"
}
{
  "question": "What is the result of 'math.pow(2, 3)'?",
  "options": ["A. 6", "B. 9", "C. 8.0", "D. 7"],
  "answer": "C"
}
{
  "question": "Which of the following is a built-in Python function?",
  "options": ["A. return()", "B. def()", "C. print()", "D. write()"],
  "answer": "C"
}
{
  "question": "What is the syntax for a function with default value of y=5?",
  "options": ["A. def func(y=5):", "B. func def y=5:", "C. def func(y: 5)", "D. function func(y=5):"],
  "answer": "A"
}
{
  "question": "How many arguments can a function have?",
  "options": ["A. 0", "B. 1", "C. 2", "D. Any number"],
  "answer": "D"
}
{
  "question": "Which keyword is used to define an anonymous function in Python?",
  "options": ["A. def", "B. return", "C. lambda", "D. function"],
  "answer": "C"
}
{
  "question": "How to print the value of Pi from math module?",
  "options": ["A. print(math.pi)", "B. print(pi)", "C. print(math.PI)", "D. print(Pi)"],
  "answer": "A"
}
{
  "question": "Which statement is used to stop a loop inside a function?",
  "options": ["A. continue", "B. exit", "C. stop", "D. break"],
  "answer": "D"
}
{
  "question": "What is the use of 'pass' in a function body?",
  "options": ["A. Skip error", "B. Do nothing", "C. Exit function", "D. Return result"],
  "answer": "B"
}
{
  "question": "What is a Python package?",
  "options": ["A. A single script", "B. A collection of modules", "C. A function", "D. A data file"],
  "answer": "B"
}
{
  "question": "What is the result of: def calc(a=2, b=3): return a + b; print(calc())?",
  "options": ["A. 5", "B. a + b", "C. Error", "D. 23"],
  "answer": "A"
}
{
  "question": "What will 'round(3.1415, 2)' return?",
  "options": ["A. 3.14", "B. 3.1", "C. 3.142", "D. 3.0"],
  "answer": "A"
}
{
  "question": "Which keyword makes a variable global inside a function?",
  "options": ["A. static", "B. var", "C. global", "D. globalize"],
  "answer": "C"
}
{
  "question": "Which function displays documentation for a module?",
  "options": ["A. doc()", "B. help()", "C. info()", "D. details()"],
  "answer": "B"
    },
    {
  "question": "What is the correct syntax to return a value from a function?",
  "options": ["A. return x", "B. return: x", "C. x return", "D. give x"],
  "answer": "A"
}
{
  "question": "Which module is used to interact with the operating system?",
  "options": ["A. math", "B. sys", "C. os", "D. random"],
  "answer": "C"
}
{
  "question": "Which Python module is used to generate random numbers?",
  "options": ["A. math", "B. os", "C. random", "D. datetime"],
  "answer": "C"
}
{
  "question": "What will the function 'len()' return?",
  "options": ["A. The memory address", "B. The last item", "C. The number of items", "D. The data type"],
  "answer": "C"
}
{
  "question": "What does the following code print? def foo(): return 2 + 3; print(foo())",
  "options": ["A. foo()", "B. 5", "C. 2 + 3", "D. None"],
  "answer": "B"
}
{
  "question": "What will happen if a function does not have a return statement?",
  "options": ["A. It will return 0", "B. It will return None", "C. It will throw an error", "D. It will return False"],
  "answer": "B"
}
{
  "question": "Which of the following can be passed to a function?",
  "options": ["A. Variables", "B. Lists", "C. Strings", "D. All of the above"],
  "answer": "D"
}
{
  "question": "What is the output of: def say(name): return f'Hello {name}'; print(say('Ali'))",
  "options": ["A. Hello Ali", "B. Ali", "C. say(Ali)", "D. f'Hello Ali'"],
  "answer": "A"
}
{
  "question": "What will print(type(os)) return after 'import os'?",
  "options": ["A. <class 'os'>", "B. <class 'module'>", "C. <module>", "D. <os>"],
  "answer": "B"
}
{
  "question": "Which of the following is NOT a valid function name?",
  "options": ["A. calculate", "B. sum1", "C. _total", "D. 1result"],
  "answer": "D"
}
{
  "question": "What happens when a function is called with more arguments than defined?",
  "options": ["A. Extra arguments are ignored", "B. Returns 0", "C. Raises TypeError", "D. Executes partially"],
  "answer": "C"
}
{
  "question": "What is the purpose of *args in a function?",
  "options": ["A. Handle any number of keyword arguments", "B. Handle any number of positional arguments", "C. Return multiple values", "D. Define default arguments"],
  "answer": "B"
}
{
  "question": "Which syntax correctly uses **kwargs?",
  "options": ["A. def func(**kwargs):", "B. def func(kwargs**):", "C. def func(*kwargs):", "D. def func(**):"],
  "answer": "A"
}
{
  "question": "Which of these is NOT part of a module?",
  "options": ["A. Functions", "B. Classes", "C. Loops", "D. Files"],
  "answer": "D"
}
{
  "question": "How do you call a function named 'display'?",
  "options": ["A. call display()", "B. run display", "C. display()", "D. start display()"],
  "answer": "C"
}
{
  "question": "What does a return statement do?",
  "options": ["A. Outputs a print message", "B. Sends back a value from function", "C. Exits Python", "D. Continues loop"],
  "answer": "B"
}
{
  "question": "What does this return: max(5, 10, 3)?",
  "options": ["A. 5", "B. 10", "C. 3", "D. Error"],
  "answer": "B"
}
{
  "question": "Which function can be used to import a module dynamically?",
  "options": ["A. import()", "B. __import__()", "C. dynamic_import()", "D. load_module()"],
  "answer": "B"
}
{
  "question": "Which operator is used to define a lambda function?",
  "options": ["A. =>", "B. :", "C. ->", "D. lambda"],
  "answer": "D"
}
{
  "question": "What will 'abs(-7)' return?",
  "options": ["A. -7", "B. 0", "C. 7", "D. Error"],
  "answer": "C"
}
{
  "question": "How do you import all functions from a module?",
  "options": ["A. import module.all", "B. from module import all", "C. import * from module", "D. from module import *"],
  "answer": "D"
}
{
  "question": "Which is a correct lambda function to add 5 to a number?",
  "options": ["A. lambda x: x + 5", "B. lambda x = x + 5", "C. lambda x(x + 5)", "D. def lambda x: x + 5"],
  "answer": "A"
}
{
  "question": "Which function returns the smallest number?",
  "options": ["A. min()", "B. low()", "C. small()", "D. sort()"],
  "answer": "A"
}
{
  "question": "What will print(len(\"hello\")) return?",
  "options": ["A. 5", "B. 6", "C. hello", "D. len"],
  "answer": "A"
}
{
  "question": "Which module helps in working with system-specific parameters?",
  "options": ["A. os", "B. sys", "C. platform", "D. subprocess"],
  "answer": "B"
},
{
  "question": "Which module is used for generating time delays in seconds?",
  "options": ["A. datetime", "B. time", "C. os", "D. delay"],
  "answer": "B"
}
{
  "question": "How do you define a function with no parameters?",
  "options": ["A. def func():", "B. def func[]:", "C. func def():", "D. function():"],
  "answer": "A"
}
{
  "question": "Which is the correct way to create a module in Python?",
  "options": ["A. Create a class", "B. Create a package", "C. Create a .py file", "D. Create a folder"],
  "answer": "C"
}
{
  "question": "Which function returns a list of attributes and methods of an object?",
  "options": ["A. type()", "B. list()", "C. dir()", "D. help()"],
  "answer": "C"
}
{
  "question": "What is the output of: sum([1, 2, 3])?",
  "options": ["A. 6", "B. [1, 2, 3]", "C. Error", "D. 123"],
  "answer": "A"
}
{
  "question": "What will be the output of this code: def f(x): return x * 2; print(f(3))?",
  "options": ["A. 3", "B. 6", "C. x * 2", "D. Error"],
  "answer": "B"
}
{
  "question": "What does 'math.floor(3.7)' return?",
  "options": ["A. 3", "B. 4", "C. 3.7", "D. Error"],
  "answer": "A"
}
{
  "question": "Which of these functions will convert a string to an integer?",
  "options": ["A. str()", "B. float()", "C. int()", "D. bool()"],
  "answer": "C"
}
{
  "question": "Which Python statement is used to skip a function’s code temporarily?",
  "options": ["A. stop", "B. continue", "C. pass", "D. return"],
  "answer": "C"
}
{
  "question": "How do you import the math module?",
  "options": ["A. import math", "B. include math", "C. using math", "D. load math"],
  "answer": "A"
}
{
  "question": "What does the keyword def do in Python?",
  "options": ["A. It returns a value", "B. It imports a module", "C. It defines a function", "D. It ends the function"],
  "answer": "C"
}
{
  "question": "Which method from the random module returns a float between 0 and 1?",
  "options": ["A. random()", "B. randint()", "C. choice()", "D. uniform(0, 1)"],
  "answer": "A"
}
{
  "question": "How do you import a module with an alias?",
  "options": ["A. import module = alias", "B. module as alias", "C. import module as alias", "D. alias import module"],
  "answer": "C"
}
{
  "question": "What is the output of 'round(4.5)'?",
  "options": ["A. 5", "B. 4", "C. 4.5", "D. Error"],
  "answer": "A"
}
{
  "question": "What is the role of 'return' in a function?",
  "options": ["A. To print result", "B. To end loop", "C. To pass control", "D. To send back value"],
  "answer": "D"
}
{
  "question": "What is the output of: min(3, 2, 5)?",
  "options": ["A. 2", "B. 3", "C. 5", "D. 0"],
  "answer": "A"
}
{
  "question": "Which of these can you import using import statement?",
  "options": ["A. Built-in module", "B. User-defined module", "C. Third-party module", "D. All of the above"],
  "answer": "D"
}
{
  "question": "What is the correct syntax to define a function with optional argument?",
  "options": ["A. def func(x=1):", "B. def func(x=):", "C. def func(x=1,):", "D. A and C"],
  "answer": "D"
}
{
  "question": "Which function converts other data types to string?",
  "options": ["A. str()", "B. string()", "C. toStr()", "D. convert()"],
  "answer": "A"
}
{
  "question": "What will 'bool(0)' return?",
  "options": ["A. True", "B. False", "C. 0", "D. None"],
  "answer": "B"
}
{
  "question": "What is the default return value of a function with no return statement?",
  "options": ["A. 0", "B. Empty string", "C. None", "D. False"],
  "answer": "C"
}
{
  "question": "Which keyword is used to exit a function early?",
  "options": ["A. exit", "B. return", "C. break", "D. stop"],
  "answer": "B"
}
{
  "question": "How can you prevent a script from running when imported as a module?",
  "options": ["A. if __main__ == '__name__'", "B. if __name__ == '__main__'", "C. main():", "D. stop()"],
  "answer": "B"
}
{
  "question": "How to use a function from another Python file?",
  "options": ["A. call filename.function()", "B. import filename", "C. include filename", "D. run filename"],
  "answer": "B"
}
{
  "question": "Which of the following statements about functions is false?",
  "options": ["A. Functions help avoid code repetition", "B. Functions can return multiple values", "C. Functions cannot call themselves", "D. Functions can take default arguments"],
  "answer": "C"
},
{
  "question": "What is the purpose of a try block in Python?",
  "options": ["A. To handle exceptions", "B. To return values", "C. To define a function", "D. To loop through items"],
  "answer": "A"
}
{
  "question": "What is the syntax for catching exceptions in Python?",
  "options": ["A. except Exception", "B. except Exception as e", "C. except e", "D. catch Exception as e"],
  "answer": "B"
}
{
  "question": "What is the result of the following code? try: 1/0 except ZeroDivisionError: print('Error')",
  "options": ["A. Error", "B. ZeroDivisionError", "C. 1", "D. Nothing"],
  "answer": "A"
}
{
  "question": "What is the keyword used to raise an exception in Python?",
  "options": ["A. raise", "B. throw", "C. error", "D. except"],
  "answer": "A"
}
{
  "question": "Which of the following is a built-in exception class?",
  "options": ["A. SyntaxError", "B. ValueError", "C. TypeError", "D. All of the above"],
  "answer": "D"
}
{
  "question": "What is the output of the following code? try: print(10/0) except ZeroDivisionError: pass",
  "options": ["A. Error", "B. Nothing", "C. ZeroDivisionError", "D. 10"],
  "answer": "B"
}
{
  "question": "What is the correct way to define a custom exception class?",
  "options": ["A. class MyException: pass", "B. def MyException(): pass", "C. exception MyException: pass", "D. raise MyException:"],
  "answer": "A"
}
{
  "question": "Which statement is used to handle a specific exception type?",
  "options": ["A. except ZeroDivisionError", "B. except ValueError", "C. except FileNotFoundError", "D. All of the above"],
  "answer": "D"
}
{
  "question": "What is the output of this code? try: x = 1/0 except ZeroDivisionError: x = 0 finally: print(x)",
  "options": ["A. 0", "B. 1", "C. None", "D. Error"],
  "answer": "A"
}
{
  "question": "Which of the following can be used to catch multiple exceptions in one block?",
  "options": ["A. except (TypeError, ValueError)", "B. except (ZeroDivisionError)", "C. except SyntaxError", "D. except Exception"],
  "answer": "A"
}
{
  "question": "What does the 'finally' block do in exception handling?",
  "options": ["A. It is executed only when there is an error", "B. It is executed only when there is no error", "C. It is always executed", "D. It never executes"],
  "answer": "C"
}
{
  "question": "How do you catch all exceptions in a try-except block?",
  "options": ["A. except *", "B. except Exception as e", "C. except Error", "D. except All"],
  "answer": "B"
}
{
  "question": "What does the following code do? try: raise ValueError except ValueError: print('Caught exception')",
  "options": ["A. Raises an error", "B. Catches and prints the exception", "C. Does nothing", "D. Prints 'ValueError'"],
  "answer": "B"
}
{
  "question": "Which of the following exceptions will be raised if you try to access a non-existent file?",
  "options": ["A. FileNotFoundError", "B. ValueError", "C. SyntaxError", "D. TypeError"],
  "answer": "A"
}
{
  "question": "What does 'else' do in a try-except block?",
  "options": ["A. Runs if an exception occurs", "B. Runs if no exception occurs", "C. Stops execution of the program", "D. Exits the try-except block"],
  "answer": "B"
}
{
  "question": "What happens if no exception is raised in the try block?",
  "options": ["A. The code in the except block is executed", "B. The code in the finally block is executed", "C. The program terminates", "D. The code in the else block is executed"],
  "answer": "D"
}
{
  "question": "Which of these can you raise manually in Python?",
  "options": ["A. Integer", "B. ValueError", "C. List", "D. File"],
  "answer": "B"
}
{
  "question": "What will the following code print? try: print('hello') finally: print('world')",
  "options": ["A. hello", "B. hello world", "C. world", "D. Error"],
  "answer": "B"
}
{
  "question": "Which of the following will not result in an exception?",
  "options": ["A. 1/0", "B. open('nonexistent_file')", "C. 'abc' + 1", "D. 'abc' + 'def'"],
  "answer": "D"
}
{
  "question": "What is the difference between 'raise' and 'throw' in Python?",
  "options": ["A. 'raise' is used in Python, 'throw' is used in other languages", "B. 'throw' is used in Python", "C. They are the same", "D. 'raise' is used for user-defined exceptions"],
  "answer": "A"
}
{
  "question": "What happens when an exception is raised in a function?",
  "options": ["A. The function stops executing", "B. The function continues execution", "C. The function skips the code inside the except block", "D. The function restarts"],
  "answer": "A"
}
{
  "question": "What is the default behavior when an exception is raised and not caught?",
  "options": ["A. Python handles the exception silently", "B. The program continues to execute", "C. The program terminates", "D. Python prints the exception message and exits"],
  "answer": "C"
}
{
  "question": "Which of the following will NOT be caught by an exception handler?",
  "options": ["A. SyntaxError", "B. ZeroDivisionError", "C. FileNotFoundError", "D. TypeError"],
  "answer": "A"
},
{
  "question": "Which function is used to open a file in Python?",
  "options": ["A. open_file()", "B. file_open()", "C. open()", "D. read_file()"],
  "answer": "C"
}
{
  "question": "Which of the following modes is used to read from a file?",
  "options": ["A. 'r'", "B. 'w'", "C. 'a'", "D. 'r+'"],
  "answer": "A"
}
{
  "question": "Which function reads the entire content of a file at once?",
  "options": ["A. read()", "B. readline()", "C. readlines()", "D. get_content()"],
  "answer": "A"
}
{
  "question": "What is the output of the following code? with open('test.txt', 'r') as file: print(file.read())",
  "options": ["A. Prints the content of the file", "B. Prints an error message", "C. Nothing", "D. Prints the file name"],
  "answer": "A"
}
{
  "question": "What mode would you use to write to a file, overwriting its content?",
  "options": ["A. 'r'", "B. 'w'", "C. 'a'", "D. 'x'"],
  "answer": "B"
}
{
  "question": "How do you add new content to an existing file without overwriting it?",
  "options": ["A. 'w' mode", "B. 'a' mode", "C. 'x' mode", "D. 'r' mode"],
  "answer": "B"
}
{
  "question": "Which of the following will automatically close the file after reading or writing?",
  "options": ["A. open() with 'r' mode", "B. open() with 'w' mode", "C. open() with 'a' mode", "D. open() using 'with' statement"],
  "answer": "D"
}
{
  "question": "What is the result of calling file.readlines()?",
  "options": ["A. It reads the file character by character", "B. It reads the file as a single string", "C. It reads the file line by line", "D. It writes the file"],
  "answer": "C"
}
{
  "question": "Which function is used to write a string to a file?",
  "options": ["A. write()", "B. append()", "C. print()", "D. save()"],
  "answer": "A"
}
{
  "question": "What is the correct way to open a file for both reading and writing?",
  "options": ["A. open('file.txt', 'rw')", "B. open('file.txt', 'r+')", "C. open('file.txt', 'rw+')", "D. open('file.txt', 'rw')"],
  "answer": "B"
}
{
  "question": "Which of these methods will allow you to write a list of strings to a file?",
  "options": ["A. file.write()", "B. file.writelines()", "C. file.append()", "D. file.writeall()"],
  "answer": "B"
}
{
  "question": "What happens if you try to read from a file that doesn't exist?",
  "options": ["A. Python will create the file", "B. Python will raise a FileNotFoundError", "C. Python will return None", "D. Python will ask for input"],
  "answer": "B"
}
{
  "question": "Which of the following would you use to ensure a file is properly closed after opening?",
  "options": ["A. open() with 'w' mode", "B. close() method", "C. with statement", "D. end() method"],
  "answer": "C"
}
{
  "question": "What does 'file.seek(0)' do?",
  "options": ["A. Reads the file", "B. Writes to the file", "C. Moves the file pointer to the beginning", "D. Closes the file"],
  "answer": "C"
}
{
  "question": "How do you read a file line by line in a loop?",
  "options": ["A. for line in file:", "B. file.read()", "C. file.readlines()", "D. file.write()"],
  "answer": "A"
}
{
  "question": "Which of these statements will throw an error?",
  "options": ["A. open('file.txt', 'r')", "B. open('file.txt', 'w')", "C. open('file.txt', 'x')", "D. open('file.txt', 'a')"],
  "answer": "C"
}
{
  "question": "Which mode would you use to open a file for exclusive creation (fails if the file already exists)?",
  "options": ["A. 'r+'", "B. 'x'", "C. 'w'", "D. 'a'"],
  "answer": "B"
}
{
  "question": "What happens if you attempt to write to a file that is opened in read-only mode?",
  "options": ["A. It writes data to the file", "B. It throws a TypeError", "C. It throws a ValueError", "D. It throws a PermissionError"],
  "answer": "D"
}
{
  "question": "Which of these is the proper way to write to a file using the 'with' statement?",
  "options": ["A. with open('file.txt', 'w') as file: file.write('Hello')", "B. with open('file.txt') as file: file.write('Hello')", "C. with open('file.txt', 'r') as file: file.write('Hello')", "D. open('file.txt', 'w') as file: file.write('Hello')"],
  "answer": "A"
}
{
  "question": "Which method is used to read a single line from a file?",
  "options": ["A. read()", "B. readline()", "C. readlines()", "D. get_line()"],
  "answer": "B"
}
{
  "question": "How do you append content to an existing file?",
  "options": ["A. 'a' mode", "B. 'w' mode", "C. 'r' mode", "D. 'x' mode"],
  "answer": "A"
}
{
  "question": "Which function is used to check if a file exists?",
  "options": ["A. exists()", "B. os.exists()", "C. file.exists()", "D. os.path.exists()"],
  "answer": "D"
}
{
  "question": "What is the behavior of 'file.write()' if you try to write an empty string?",
  "options": ["A. It raises an error", "B. It writes an empty line", "C. It writes the string 'None'", "D. It does nothing"],
  "answer": "D"
}
{
  "question": "How do you open a file for both reading and appending?",
  "options": ["A. open('file.txt', 'r+')", "B. open('file.txt', 'w+')", "C. open('file.txt', 'a+')", "D. open('file.txt', 'rw')"],
  "answer": "C"
},
{
  "question": "Which of the following modules is used for mathematical operations in Python?",
  "options": ["A. math", "B. datetime", "C. calendar", "D. random"],
  "answer": "A"
}
{
  "question": "Which function from the math module is used to get the square root of a number?",
  "options": ["A. sqrt()", "B. pow()", "C. root()", "D. square()"],
  "answer": "A"
}
{
  "question": "What is the value of math.pi in Python?",
  "options": ["A. 3.14159", "B. 3.14", "C. 3.15", "D. 3"],
  "answer": "A"
}
{
  "question": "Which function is used to find the greatest common divisor of two numbers?",
  "options": ["A. gcd()", "B. lcm()", "C. mod()", "D. hcf()"],
  "answer": "A"
}
{
  "question": "How do you get the current date and time in Python?",
  "options": ["A. datetime.datetime.now()", "B. time.time()", "C. date.today()", "D. datetime.current()"],
  "answer": "A"
}
{
  "question": "What is the correct format to represent the current time as 'HH:MM:SS'?",
  "options": ["A. '%H:%M:%S'", "B. '%d-%m-%Y'", "C. '%M:%S:%H'", "D. '%H:%d:%M'"],
  "answer": "A"
}
{
  "question": "Which method of datetime module is used to convert a string into a datetime object?",
  "options": ["A. strptime()", "B. datetime()", "C. parse()", "D. format()"],
  "answer": "A"
}
{
  "question": "Which function is used to calculate the factorial of a number in Python?",
  "options": ["A. factorial()", "B. fact()", "C. product()", "D. power()"],
  "answer": "A"
}
{
  "question": "What is the correct way to create a date object in Python?",
  "options": ["A. datetime.date(year, month, day)", "B. date(year, month, day)", "C. datetime(year, month, day)", "D. create_date(year, month, day)"],
  "answer": "A"
}
{
  "question": "How do you get the current weekday in Python?",
  "options": ["A. datetime.weekday()", "B. datetime.today().weekday()", "C. weekday()", "D. date.weekday()"],
  "answer": "B"
}
{
  "question": "Which of the following can be used to add a time period to a datetime object?",
  "options": ["A. timedelta", "B. time", "C. date", "D. period"],
  "answer": "A"
}
{
  "question": "What does the calendar.month() function return?",
  "options": ["A. A calendar for a specific month", "B. A list of all months", "C. The current month", "D. The total number of months in a year"],
  "answer": "A"
}
{
  "question": "How would you display the current date in the format 'Day-Month-Year'?",
  "options": ["A. '%d-%m-%Y'", "B. '%Y-%m-%d'", "C. '%m-%d-%Y'", "D. '%Y/%m/%d'"],
  "answer": "A"
}
{
  "question": "Which function is used to convert a datetime object to a string?",
  "options": ["A. strftime()", "B. format()", "C. string()", "D. date()"],
  "answer": "A"
}
{
  "question": "Which of the following methods returns the number of days in a month?",
  "options": ["A. calendar.monthrange(year, month)", "B. calendar.monthlength(year, month)", "C. calendar.get_days_in_month(year, month)", "D. calendar.month()"],
  "answer": "A"
}
{
  "question": "Which of the following is used to generate a random number?",
  "options": ["A. random()", "B. randint()", "C. math.random()", "D. generate()"],
  "answer": "B"
}
{
  "question": "Which of the following functions is used to find the smallest integer greater than or equal to a given number?",
  "options": ["A. ceil()", "B. floor()", "C. round()", "D. int()"],
  "answer": "A"
}
{
  "question": "Which function is used to find the largest integer less than or equal to a given number?",
  "options": ["A. floor()", "B. ceil()", "C. round()", "D. int()"],
  "answer": "A"
}
{
  "question": "How do you get the current time in seconds from the epoch?",
  "options": ["A. time.time()", "B. datetime.now()", "C. current_time()", "D. time.current()"],
  "answer": "A"
}
{
  "question": "Which of these methods returns the current local date?",
  "options": ["A. datetime.date.today()", "B. time.date.today()", "C. datetime.now()", "D. time.localtime()"],
  "answer": "A"
}
{
  "question": "What does the math.pow(x, y) function do?",
  "options": ["A. Returns x raised to the power y", "B. Returns the sum of x and y", "C. Returns x modulo y", "D. Returns x to the power of y modulo z"],
  "answer": "A"
}
{
  "question": "Which module provides functions for generating and manipulating dates and times?",
  "options": ["A. datetime", "B. calendar", "C. math", "D. random"],
  "answer": "A"
}
{
  "question": "Which function can be used to get the current date in Python?",
  "options": ["A. datetime.today()", "B. datetime.now()", "C. date.today()", "D. time.today()"],
  "answer": "C"
},
{
  "question": "Which of the following methods is used to get the week number of a given date in Python?",
  "options": ["A. isocalendar()", "B. weeknumber()", "C. get_week()", "D. calendar.week()"],
  "answer": "A"
}
{
  "question": "What does the function math.radians(x) do?",
  "options": ["A. Converts degrees to radians", "B. Converts radians to degrees", "C. Calculates the sine of x", "D. Returns the value of pi"],
  "answer": "A"
}
{
  "question": "Which of these methods returns the number of days in a month for a given year and month?",
  "options": ["A. calendar.monthrange()", "B. calendar.get_days()", "C. date.days_in_month()", "D. calendar.days_in_month()"],
  "answer": "A"
}
{
  "question": "Which of the following would you use to find if a year is a leap year?",
  "options": ["A. calendar.isleap()", "B. datetime.isleap()", "C. date.is_leap()", "D. math.is_leap()"],
  "answer": "A"
}
{
  "question": "Which method can be used to get the month name from a datetime object?",
  "options": ["A. datetime.strftime('%B')", "B. datetime.monthname()", "C. datetime.get_month()", "D. datetime.month_name()"],
  "answer": "A"
}
{
  "question": "How can you calculate the time difference between two datetime objects in Python?",
  "options": ["A. Subtract the two datetime objects", "B. Use the difference() method", "C. Use timedelta() function", "D. Use date_diff() function"],
  "answer": "A"
}
{
  "question": "What does the math.fmod(x, y) function return?",
  "options": ["A. The remainder of x divided by y", "B. The quotient of x divided by y", "C. The floor of x divided by y", "D. The square root of x"],
  "answer": "A"
}
{
  "question": "Which of the following functions is used to get the current time?",
  "options": ["A. time.localtime()", "B. datetime.now()", "C. datetime.today()", "D. time.time()"],
  "answer": "B"
}
{
  "question": "Which Python module provides the calendar functionality?",
  "options": ["A. calendar", "B. datetime", "C. time", "D. math"],
  "answer": "A"
}
{
  "question": "What is the output of math.ceil(3.7)?",
  "options": ["A. 4", "B. 3", "C. 3.7", "D. 5"],
  "answer": "A"
}
{
  "question": "How do you convert a string to a datetime object in Python?",
  "options": ["A. Use strptime()", "B. Use datetime.strptime()", "C. Use convert_date()", "D. Use string_to_datetime()"],
  "answer": "B"
}
{
  "question": "Which of the following functions from the math module returns the absolute value of a number?",
  "options": ["A. abs()", "B. fabs()", "C. floor()", "D. ceil()"],
  "answer": "B"
}
{
  "question": "Which method of the datetime module is used to get the current date?",
  "options": ["A. datetime.now()", "B. datetime.today()", "C. datetime.date.today()", "D. datetime.get_today()"],
  "answer": "C"
}
{
  "question": "What is the purpose of the calendar.monthcalendar() function?",
  "options": ["A. It returns a matrix representing the month's calendar", "B. It returns the number of days in a month", "C. It returns the name of the month", "D. It returns the first day of the week for a given month"],
  "answer": "A"
}
{
  "question": "How do you get the weekday number of a date (0 for Monday to 6 for Sunday)?",
  "options": ["A. Use weekday() method", "B. Use isocalendar() method", "C. Use calendar.weekday()", "D. Use dayofweek() method"],
  "answer": "A"
}
{
  "question": "Which module provides a function to get a random floating-point number between 0 and 1?",
  "options": ["A. random", "B. math", "C. datetime", "D. time"],
  "answer": "A"
}
{
  "question": "What does the function time.sleep() do?",
  "options": ["A. Pauses the program for the specified time", "B. Makes the program run faster", "C. Ends the program after a specified time", "D. Prints the time"],
  "answer": "A"
}
{
  "question": "Which method is used to check if a given year is a leap year?",
  "options": ["A. calendar.isleap(year)", "B. math.isleap(year)", "C. datetime.is_leap(year)", "D. year.isleap()"],
  "answer": "A"
}
{
  "question": "Which of these methods is used to calculate the difference between two datetime objects?",
  "options": ["A. timedelta()", "B. subtract()", "C. date_diff()", "D. time_difference()"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the trigonometric sine of a number?",
  "options": ["A. math.sin()", "B. math.cos()", "C. math.tan()", "D. math.asin()"],
  "answer": "A"
}
{
  "question": "How do you retrieve the current month in Python?",
  "options": ["A. datetime.now().month", "B. calendar.month()", "C. time.month()", "D. datetime.month()"],
  "answer": "A"
}
{
  "question": "What is the result of math.sqrt(25)?",
  "options": ["A. 5", "B. 25", "C. 10", "D. 0"],
  "answer": "A"
}
{
  "question": "Which function returns the first day of the week for a given year and month?",
  "options": ["A. calendar.monthrange()", "B. calendar.first_day()", "C. calendar.week_start()", "D. calendar.start_of_week()"],
  "answer": "A"
},
{
  "question": "Which function is used to calculate the power of a number in Python?",
  "options": ["A. math.pow()", "B. math.exponent()", "C. math.exponentiate()", "D. math.exponential()"],
  "answer": "A"
}
{
  "question": "What does the function calendar.isleap(year) return?",
  "options": ["A. True if the year is a leap year", "B. The number of days in the year", "C. The number of months in the year", "D. False if the year is a leap year"],
  "answer": "A"
}
{
  "question": "Which of the following methods returns the current year?",
  "options": ["A. datetime.now().year", "B. calendar.year()", "C. time.year()", "D. datetime.year()"],
  "answer": "A"
}
{
  "question": "Which function returns the current date and time in Python?",
  "options": ["A. datetime.now()", "B. datetime.current()", "C. time.date()", "D. time.now()"],
  "answer": "A"
}
{
  "question": "Which function can be used to convert a datetime object to a string format?",
  "options": ["A. strftime()", "B. stringformat()", "C. convert_datetime()", "D. datetime.format()"],
  "answer": "A"
}
{
  "question": "What is the correct way to get a list of all the weekdays in a month?",
  "options": ["A. calendar.monthcalendar()", "B. calendar.get_weekdays()", "C. calendar.weekdays_list()", "D. calendar.get_all_weekdays()"],
  "answer": "A"
}
{
  "question": "Which module in Python provides functions for working with dates and times?",
  "options": ["A. datetime", "B. time", "C. math", "D. calendar"],
  "answer": "A"
}
{
  "question": "Which method is used to get the current hour?",
  "options": ["A. datetime.now().hour", "B. time.hour()", "C. time.now().hour", "D. datetime.get_hour()"],
  "answer": "A"
}
{
  "question": "What will be the output of math.floor(4.8)?",
  "options": ["A. 4", "B. 5", "C. 4.8", "D. 3"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to get the number of seconds from the epoch in Python?",
  "options": ["A. time.time()", "B. time.seconds()", "C. datetime.timestamp()", "D. time.timestamp()"],
  "answer": "A"
}
{
  "question": "Which function is used to calculate the cosine of a number in Python?",
  "options": ["A. math.cos()", "B. math.sin()", "C. math.tan()", "D. math.asin()"],
  "answer": "A"
}
{
  "question": "Which of the following functions returns the current date in 'yyyy-mm-dd' format?",
  "options": ["A. datetime.today()", "B. datetime.date.today()", "C. date.today()", "D. datetime.now()"],
  "answer": "B"
}
{
  "question": "Which of these methods returns the month name from a datetime object?",
  "options": ["A. strftime('%B')", "B. get_month_name()", "C. datetime.month_name()", "D. datetime.strftime('%Month')"],
  "answer": "A"
}
{
  "question": "Which function returns the current year?",
  "options": ["A. datetime.today().year", "B. calendar.year()", "C. time.year()", "D. datetime.get_year()"],
  "answer": "A"
}
{
  "question": "What does the function math.trunc(x) do?",
  "options": ["A. Returns the integer part of a number", "B. Returns the smallest integer greater than or equal to x", "C. Returns the ceiling of x", "D. Returns the square root of x"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to get the current time in seconds?",
  "options": ["A. time.time()", "B. time.seconds()", "C. datetime.now().second", "D. time.current_time()"],
  "answer": "A"
}
{
  "question": "Which of these methods would you use to calculate the total number of days in a given year?",
  "options": ["A. calendar.isleap()", "B. calendar.monthrange()", "C. datetime.days_in_year()", "D. date.total_days()"],
  "answer": "A"
}
{
  "question": "Which function is used to return the factorial of a number in Python?",
  "options": ["A. math.factorial()", "B. math.prod()", "C. math.factor()", "D. math.comb()"],
  "answer": "A"
}
{
  "question": "Which of these methods returns the day of the week for a given date?",
  "options": ["A. datetime.weekday()", "B. calendar.get_weekday()", "C. time.get_weekday()", "D. date.get_day()"],
  "answer": "A"
}
{
  "question": "Which function from the math module is used to calculate the sine of an angle?",
  "options": ["A. math.sin()", "B. math.cos()", "C. math.tan()", "D. math.atan()"],
  "answer": "A"
}
{
  "question": "Which function in the datetime module returns the current time?",
  "options": ["A. datetime.now()", "B. datetime.now().time()", "C. time.now()", "D. time()"],
  "answer": "B"
},
{
  "question": "What does the function math.degrees(x) do?",
  "options": ["A. Converts radians to degrees", "B. Converts degrees to radians", "C. Returns the value of pi", "D. Returns the sine of x"],
  "answer": "A"
}
{
  "question": "Which of the following will give the weekday number for a given date (0 for Monday to 6 for Sunday)?",
  "options": ["A. datetime.weekday()", "B. calendar.weekday()", "C. date.weekday()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which function can be used to get the current time in seconds since the epoch?",
  "options": ["A. time.time()", "B. datetime.now().second", "C. time.seconds()", "D. datetime.timestamp()"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to get the first day of the month for a given year and month?",
  "options": ["A. calendar.monthrange()", "B. calendar.first_day_of_month()", "C. datetime.first_day()", "D. time.first_day()"],
  "answer": "A"
}
{
  "question": "How can you find the number of days in the current month?",
  "options": ["A. Use calendar.monthrange()", "B. Use datetime.now().days_in_month", "C. Use datetime.days_in_current_month()", "D. Use calendar.get_days()"],
  "answer": "A"
}
{
  "question": "Which method of the datetime module returns the current time?",
  "options": ["A. datetime.now()", "B. datetime.time()", "C. time.now()", "D. time.localtime()"],
  "answer": "A"
}
{
  "question": "How can you calculate the difference between two datetime objects?",
  "options": ["A. Use the - operator", "B. Use datetime.diff()", "C. Use date_diff() method", "D. Use timedelta() function"],
  "answer": "A"
}
{
  "question": "What is the function of math.exp(x)?",
  "options": ["A. Returns e raised to the power of x", "B. Returns the exponential of x", "C. Returns the sine of x", "D. Returns the square of x"],
  "answer": "A"
}
{
  "question": "Which of the following functions is used to get the current time zone in Python?",
  "options": ["A. time.tzname", "B. datetime.tzinfo", "C. datetime.now().timezone", "D. calendar.timezone()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module can be used to create a date object from year, month, and day?",
  "options": ["A. datetime.date()", "B. date.create()", "C. datetime.make_date()", "D. datetime.new()"],
  "answer": "A"
}
{
  "question": "What will be the output of math.fabs(-5)?",
  "options": ["A. 5.0", "B. -5.0", "C. 0", "D. 5"],
  "answer": "A"
}
{
  "question": "Which Python module provides support for working with dates and times?",
  "options": ["A. datetime", "B. math", "C. time", "D. calendar"],
  "answer": "A"
}
{
  "question": "Which of the following functions can be used to get the name of the day of the week for a given date?",
  "options": ["A. datetime.strftime('%A')", "B. datetime.day_name()", "C. calendar.day_name()", "D. datetime.get_weekday_name()"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to get the number of seconds between two datetime objects?",
  "options": ["A. (datetime2 - datetime1).total_seconds()", "B. datetime2.diff_seconds(datetime1)", "C. datetime2.total_seconds()", "D. (datetime1 - datetime2).seconds()"],
  "answer": "A"
}
{
  "question": "Which of the following returns the month name from a datetime object?",
  "options": ["A. datetime.strftime('%B')", "B. datetime.get_month_name()", "C. datetime.monthname()", "D. calendar.month_name()"],
  "answer": "A"
}
{
  "question": "Which of the following is used to calculate the factorial of a number?",
  "options": ["A. math.factorial()", "B. math.comb()", "C. math.prod()", "D. math.factor()"],
  "answer": "A"
}
{
  "question": "Which of the following will give the current year?",
  "options": ["A. datetime.now().year", "B. time.get_current_year()", "C. calendar.current_year()", "D. datetime.current_year()"],
  "answer": "A"
}
{
  "question": "Which function can be used to get the current month in Python?",
  "options": ["A. datetime.now().month", "B. datetime.month()", "C. calendar.get_month()", "D. time.month()"],
  "answer": "A"
}
{
  "question": "Which method from the math module returns the square root of a number?",
  "options": ["A. math.sqrt()", "B. math.pow()", "C. math.exponentiate()", "D. math.square()"],
  "answer": "A"
}
{
  "question": "Which of these functions can be used to calculate the number of days between two dates?",
  "options": ["A. (date2 - date1).days", "B. datetime.days_diff()", "C. date_diff()", "D. (date2 - date1).total_days()"],
  "answer": "A"
}
{
  "question": "Which of the following is used to determine the number of days in a given month?",
  "options": ["A. calendar.monthrange()", "B. datetime.get_month_days()", "C. calendar.month_days()", "D. time.month_days()"],
  "answer": "A"
},
{
  "question": "Which method from the datetime module returns the current time as a string?",
  "options": ["A. datetime.now().strftime('%H:%M:%S')", "B. datetime.now().time()", "C. datetime.current_time()", "D. time.now().strftime('%H:%M:%S')"],
  "answer": "A"
}
{
  "question": "Which of these methods returns the name of the day of the week in full form?",
  "options": ["A. datetime.strftime('%A')", "B. datetime.get_day_name()", "C. calendar.day_name()", "D. time.get_day_name()"],
  "answer": "A"
}
{
  "question": "What does the math.radians() function do?",
  "options": ["A. Converts degrees to radians", "B. Converts radians to degrees", "C. Returns the square root of x", "D. Returns the value of pi"],
  "answer": "A"
}
{
  "question": "How do you find the day of the week for a specific date in Python?",
  "options": ["A. Use datetime.weekday()", "B. Use calendar.weekday()", "C. Use time.weekday()", "D. All of the above"],
  "answer": "D"
}
{
  "question": "Which of these functions returns a list of all the weekdays for a given month?",
  "options": ["A. calendar.monthcalendar()", "B. calendar.get_weekdays()", "C. datetime.weekdays_in_month()", "D. datetime.month_weekdays()"],
  "answer": "A"
}
{
  "question": "Which function can be used to calculate the cosine of an angle in Python?",
  "options": ["A. math.cos()", "B. math.sin()", "C. math.tan()", "D. math.radians()"],
  "answer": "A"
}
{
  "question": "Which function is used to calculate the floor value of a number?",
  "options": ["A. math.floor()", "B. math.ceil()", "C. math.trunc()", "D. math.abs()"],
  "answer": "A"
}
{
  "question": "What will the function math.ceil(2.3) return?",
  "options": ["A. 3", "B. 2", "C. 2.3", "D. 4"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the logarithm of a number to a given base?",
  "options": ["A. math.log()", "B. math.exp()", "C. math.sqrt()", "D. math.factorial()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module can be used to get the current month?",
  "options": ["A. datetime.now().month", "B. datetime.get_month()", "C. calendar.month()", "D. time.month()"],
  "answer": "A"
}
{
  "question": "What will be the result of calling math.sqrt(16)?",
  "options": ["A. 4.0", "B. 8.0", "C. 16", "D. 4"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the absolute value of a number?",
  "options": ["A. math.fabs()", "B. math.abs()", "C. math.trunc()", "D. math.floor()"],
  "answer": "A"
}
{
  "question": "Which method from the time module is used to get the current time in seconds?",
  "options": ["A. time.time()", "B. time.now()", "C. time.get_time()", "D. time.seconds()"],
  "answer": "A"
}
{
  "question": "Which function is used to return the current date and time as a formatted string?",
  "options": ["A. datetime.now().strftime('%Y-%m-%d %H:%M:%S')", "B. datetime.now().date()", "C. datetime.today().strftime('%d/%m/%Y')", "D. time.format_datetime()"],
  "answer": "A"
}
{
  "question": "Which of the following modules provides functionality for working with time?",
  "options": ["A. time", "B. datetime", "C. calendar", "D. all of the above"],
  "answer": "D"
}
{
  "question": "What will be the output of math.sqrt(25)?",
  "options": ["A. 5.0", "B. 5", "C. 25", "D. 0"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the greatest integer less than or equal to a number?",
  "options": ["A. math.floor()", "B. math.ceil()", "C. math.trunc()", "D. math.abs()"],
  "answer": "A"
}
{
  "question": "Which method returns the number of days in a given year?",
  "options": ["A. calendar.isleap()", "B. datetime.days_in_year()", "C. calendar.get_year_days()", "D. time.days_in_year()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module returns the current date?",
  "options": ["A. datetime.today().date()", "B. datetime.now().date()", "C. time.date()", "D. datetime.date.today()"],
  "answer": "A"
}
{
  "question": "What will be the output of math.pi?",
  "options": ["A. 3.14159", "B. 3.14", "C. 3", "D. 3.1416"],
  "answer": "A"
}
{
  "question": "Which function from the time module returns the number of seconds since the epoch?",
  "options": ["A. time.time()", "B. time.seconds()", "C. datetime.timestamp()", "D. datetime.get_seconds()"],
  "answer": "A"
},
{
  "question": "Which of the following functions can be used to find the absolute value of a number?",
  "options": ["A. math.fabs()", "B. abs()", "C. math.abs()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "What will be the output of math.cos(0)?",
  "options": ["A. 1", "B. 0", "C. -1", "D. Undefined"],
  "answer": "A"
}
{
  "question": "Which of the following methods can be used to find the last day of a month?",
  "options": ["A. calendar.monthrange(year, month)[1]", "B. datetime.get_last_day_of_month()", "C. calendar.get_last_day()", "D. time.get_last_day()"],
  "answer": "A"
}
{
  "question": "Which method returns the number of days in a given year in Python?",
  "options": ["A. calendar.isleap()", "B. datetime.get_days_in_year()", "C. calendar.get_year_days()", "D. calendar.year_days()"],
  "answer": "A"
}
{
  "question": "Which method is used to add a specified number of days to a datetime object?",
  "options": ["A. datetime.timedelta()", "B. datetime.add_days()", "C. time.add_days()", "D. datetime.add()"],
  "answer": "A"
}
{
  "question": "Which function from the math module is used to calculate the sine of an angle?",
  "options": ["A. math.sin()", "B. math.cos()", "C. math.tan()", "D. math.exp()"],
  "answer": "A"
}
{
  "question": "What will be the result of math.log(100, 10)?",
  "options": ["A. 2", "B. 3", "C. 1", "D. 10"],
  "answer": "A"
}
{
  "question": "What does the function math.pow(2, 3) do?",
  "options": ["A. Returns 8", "B. Returns 6", "C. Returns 3", "D. Returns 5"],
  "answer": "A"
}
{
  "question": "Which of the following methods will give the number of seconds between two datetime objects?",
  "options": ["A. (datetime2 - datetime1).total_seconds()", "B. (datetime2 - datetime1).seconds()", "C. datetime2.diff(datetime1)", "D. datetime2.seconds_since(datetime1)"],
  "answer": "A"
}
{
  "question": "What does the datetime.now().minute method return?",
  "options": ["A. The current minute", "B. The current second", "C. The current hour", "D. The current day"],
  "answer": "A"
}
{
  "question": "Which method is used to determine if a given year is a leap year?",
  "options": ["A. calendar.isleap(year)", "B. datetime.is_leap_year()", "C. time.isleap()", "D. calendar.get_leap_year()"],
  "answer": "A"
}
{
  "question": "Which function from the math module calculates the absolute value of a number?",
  "options": ["A. math.fabs()", "B. abs()", "C. math.abs()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which of the following methods will return the current date and time?",
  "options": ["A. datetime.now()", "B. datetime.today()", "C. time.now()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which of the following is used to convert radians to degrees in Python?",
  "options": ["A. math.degrees()", "B. math.radians()", "C. math.to_degrees()", "D. math.convert()"],
  "answer": "A"
}
{
  "question": "What does the datetime module provide in Python?",
  "options": ["A. Classes for manipulating dates and times", "B. Functions to calculate time", "C. Methods to format date strings", "D. All of the above"],
  "answer": "D"
}
{
  "question": "Which of these is a function that returns a tuple with the weekday and the number of days in a given month?",
  "options": ["A. calendar.monthrange()", "B. datetime.month_info()", "C. time.month_details()", "D. datetime.get_month_info()"],
  "answer": "A"
}
{
  "question": "What will be the output of math.factorial(5)?",
  "options": ["A. 120", "B. 24", "C. 25", "D. 5"],
  "answer": "A"
}
{
  "question": "What does the function math.comb(n, r) return?",
  "options": ["A. The number of ways to choose r items from n", "B. The total number of permutations", "C. The factorial of n", "D. The sum of n and r"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the value of pi?",
  "options": ["A. math.pi", "B. math.get_pi()", "C. math.constant('pi')", "D. math.radians()"],
  "answer": "A"
}
{
  "question": "Which method is used to calculate the day of the week for a given date in Python?",
  "options": ["A. datetime.weekday()", "B. calendar.weekday()", "C. time.weekday()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "What is the correct way to get the current date and time in the format 'YYYY-MM-DD HH:MM:SS'?",
  "options": ["A. datetime.now().strftime('%Y-%m-%d %H:%M:%S')", "B. datetime.now().date()", "C. time.localtime()", "D. time.get_current_time()"],
  "answer": "A"
},
{
  "question": "Which method returns the number of days in a month for a given year?",
  "options": ["A. calendar.monthrange(year, month)[1]", "B. calendar.get_days_in_month()", "C. datetime.get_days_in_month()", "D. time.get_days_in_month()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module can be used to convert a string into a datetime object?",
  "options": ["A. datetime.strptime()", "B. datetime.parse()", "C. datetime.convert()", "D. time.parse()"],
  "answer": "A"
}
{
  "question": "What will be the result of math.exp(1)?",
  "options": ["A. 2.71828", "B. 1", "C. 0", "D. 3.14159"],
  "answer": "A"
}
{
  "question": "Which method returns the day of the month for a given date object?",
  "options": ["A. datetime.day", "B. datetime.get_day()", "C. time.get_day()", "D. calendar.get_day()"],
  "answer": "A"
}
{
  "question": "Which function returns the number of seconds in a day?",
  "options": ["A. 24 * 60 * 60", "B. datetime.seconds_in_day()", "C. time.seconds_in_day()", "D. 24 * 60"],
  "answer": "A"
}
{
  "question": "Which of the following functions is used to get the current time in a structured format?",
  "options": ["A. time.localtime()", "B. datetime.now()", "C. datetime.time()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which method is used to get the current year in Python?",
  "options": ["A. datetime.now().year", "B. datetime.current_year()", "C. time.year()", "D. calendar.get_current_year()"],
  "answer": "A"
}
{
  "question": "What does the math.tan() function calculate?",
  "options": ["A. The tangent of an angle", "B. The sine of an angle", "C. The cosine of an angle", "D. The absolute value of a number"],
  "answer": "A"
}
{
  "question": "Which function can be used to get the number of days between two dates?",
  "options": ["A. (date2 - date1).days", "B. datetime.difference(date1, date2)", "C. calendar.days_between(date1, date2)", "D. time.days_between(date1, date2)"],
  "answer": "A"
}
{
  "question": "Which of the following is a valid format string to display the current year in four digits?",
  "options": ["A. '%Y'", "B. '%y'", "C. '%m'", "D. '%d'"],
  "answer": "A"
}
{
  "question": "Which method will return the day of the week for a given date object?",
  "options": ["A. datetime.weekday()", "B. time.day_of_week()", "C. calendar.weekday()", "D. datetime.get_weekday()"],
  "answer": "A"
}
{
  "question": "What is the output of math.log10(100)?",
  "options": ["A. 2", "B. 100", "C. 10", "D. 1"],
  "answer": "A"
}
{
  "question": "Which function returns the number of days in the current month?",
  "options": ["A. calendar.monthrange(year, month)[1]", "B. time.month_days()", "C. datetime.month_days()", "D. calendar.get_month_days()"],
  "answer": "A"
}
{
  "question": "What does the math.factorial() function do?",
  "options": ["A. Returns the factorial of a number", "B. Returns the number raised to the power of 2", "C. Returns the value of pi", "D. Returns the absolute value of a number"],
  "answer": "A"
}
{
  "question": "What will be the output of math.degrees(math.pi)?",
  "options": ["A. 180", "B. 90", "C. 360", "D. 1"],
  "answer": "A"
}
{
  "question": "Which function returns the current date and time in Python?",
  "options": ["A. datetime.now()", "B. datetime.today()", "C. datetime.current()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which of the following functions is used to add a specified number of months to a date object?",
  "options": ["A. dateutil.relativedelta.relativedelta(months=+1)", "B. datetime.add_months()", "C. time.add_months()", "D. calendar.add_months()"],
  "answer": "A"
}
{
  "question": "Which function from the datetime module returns the current time?",
  "options": ["A. datetime.now()", "B. time.time()", "C. datetime.today()", "D. time.get_time()"],
  "answer": "A"
}
{
  "question": "Which method from the math module returns the natural logarithm of a number?",
  "options": ["A. math.log()", "B. math.ln()", "C. math.log10()", "D. math.exp()"],
  "answer": "A"
}
{
  "question": "What will be the result of calling math.ceil(5.4)?",
  "options": ["A. 6", "B. 5", "C. 5.4", "D. 4"],
  "answer": "A"
}
{
  "question": "Which of the following methods can be used to check if a year is a leap year?",
  "options": ["A. calendar.isleap(year)", "B. datetime.is_leap_year(year)", "C. time.isleap(year)", "D. all of the above"],
  "answer": "A"
}
{
  "question": "Which of the following methods returns the number of days in the current year?",
  "options": ["A. calendar.isleap()", "B. datetime.year_days()", "C. calendar.get_year_days()", "D. time.get_days_in_year()"],
  "answer": "A"
},
{
  "question": "What will be the result of math.sqrt(16)?",
  "options": ["A. 4", "B. 16", "C. 8", "D. 2"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to format a date as a string in Python?",
  "options": ["A. datetime.strftime()", "B. datetime.format()", "C. time.format()", "D. datetime.to_string()"],
  "answer": "A"
}
{
  "question": "Which method from the math module calculates the cosine of an angle?",
  "options": ["A. math.cos()", "B. math.sin()", "C. math.tan()", "D. math.radians()"],
  "answer": "A"
}
{
  "question": "What will be the output of calendar.month(2025, 5)?",
  "options": ["A. A string representation of May 2025", "B. The number 2025", "C. A string representation of month 5", "D. An error message"],
  "answer": "A"
}
{
  "question": "Which of the following is used to get the number of days between two dates?",
  "options": ["A. (date2 - date1).days", "B. datetime.difference(date1, date2)", "C. calendar.diff(date1, date2)", "D. time.days_between()"],
  "answer": "A"
}
{
  "question": "Which of the following methods will return the current date and time in the format 'YYYY-MM-DD'?",
  "options": ["A. datetime.now().strftime('%Y-%m-%d')", "B. datetime.today().strftime('%Y-%m-%d')", "C. datetime.date()", "D. time.get_current_date()"],
  "answer": "A"
}
{
  "question": "Which function from the math module is used to calculate the natural logarithm of a number?",
  "options": ["A. math.log()", "B. math.ln()", "C. math.exp()", "D. math.log10()"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to determine if a year is a leap year?",
  "options": ["A. calendar.isleap(year)", "B. datetime.is_leap_year(year)", "C. time.isleap(year)", "D. all of the above"],
  "answer": "A"
}
{
  "question": "What will be the output of datetime.datetime(2025, 5, 3).weekday()?",
  "options": ["A. 6", "B. 5", "C. 3", "D. 1"],
  "answer": "B"
}
{
  "question": "Which of the following functions returns the current day of the week?",
  "options": ["A. datetime.weekday()", "B. time.weekday()", "C. datetime.today().weekday()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which function from the math module returns the smallest integer greater than or equal to a given number?",
  "options": ["A. math.ceil()", "B. math.floor()", "C. math.sqrt()", "D. math.abs()"],
  "answer": "A"
}
{
  "question": "What is the result of calling math.fmod(5, 2)?",
  "options": ["A. 1", "B. 2", "C. 5", "D. 3"],
  "answer": "A"
}
{
  "question": "What is the result of math.factorial(0)?",
  "options": ["A. 1", "B. 0", "C. Undefined", "D. 2"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to get the current year in Python?",
  "options": ["A. datetime.now().year", "B. datetime.get_year()", "C. time.year()", "D. calendar.get_current_year()"],
  "answer": "A"
}
{
  "question": "Which function can be used to find the greatest common divisor (GCD) of two numbers?",
  "options": ["A. math.gcd()", "B. math.lcm()", "C. math.greatest()", "D. math.max()"],
  "answer": "A"
}
{
  "question": "What will be the output of math.pow(2, 3)?",
  "options": ["A. 8", "B. 6", "C. 4", "D. 16"],
  "answer": "A"
}
{
  "question": "Which of the following will return the current time in hours, minutes, and seconds?",
  "options": ["A. datetime.now().time()", "B. datetime.today().time()", "C. time.now()", "D. datetime.time()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module allows you to find the number of days between two date objects?",
  "options": ["A. (date2 - date1).days", "B. datetime.days_between(date1, date2)", "C. time.days_between(date1, date2)", "D. datetime.diff()"],
  "answer": "A"
}
{
  "question": "Which function from the math module calculates the tangent of an angle?",
  "options": ["A. math.tan()", "B. math.cos()", "C. math.sin()", "D. math.pow()"],
  "answer": "A"
}
{
  "question": "Which of the following functions is used to convert degrees to radians?",
  "options": ["A. math.radians()", "B. math.degrees()", "C. math.convert()", "D. math.to_radians()"],
  "answer": "A"
}
{
  "question": "Which function will return the number of days in a specific month?",
  "options": ["A. calendar.monthrange(year, month)[1]", "B. datetime.month_days()", "C. time.get_month_days()", "D. all of the above"],
  "answer": "A"
},
{
  "question": "Which of the following methods can be used to convert a string to a date object?",
  "options": ["A. datetime.strptime()", "B. datetime.to_date()", "C. calendar.strptime()", "D. time.to_date()"],
  "answer": "A"
}
{
  "question": "What will be the result of calling math.floor(5.7)?",
  "options": ["A. 5", "B. 6", "C. 5.7", "D. 4"],
  "answer": "A"
}
{
  "question": "Which function from the math module calculates the absolute value of a number?",
  "options": ["A. math.abs()", "B. math.fabs()", "C. math.absolute()", "D. math.mod()"],
  "answer": "B"
}
{
  "question": "Which function from the datetime module allows you to find the current date?",
  "options": ["A. datetime.date.today()", "B. datetime.today()", "C. datetime.date.now()", "D. all of the above"],
  "answer": "A"
}
{
  "question": "What is the result of calling math.modf(5.7)?",
  "options": ["A. (0.7, 5.0)", "B. (5.7, 0)", "C. (5.0, 0.7)", "D. (5.0, 5.7)"],
  "answer": "A"
}
{
  "question": "What will be the output of math.sin(math.radians(90))?",
  "options": ["A. 1", "B. 0", "C. 0.5", "D. Undefined"],
  "answer": "A"
}
{
  "question": "Which method from the math module returns the value of pi?",
  "options": ["A. math.pi", "B. math.pi_value()", "C. math.get_pi()", "D. math.value_of_pi()"],
  "answer": "A"
}
{
  "question": "Which method is used to get the weekday of a specific date in Python?",
  "options": ["A. datetime.weekday()", "B. calendar.weekday()", "C. datetime.get_weekday()", "D. time.weekday()"],
  "answer": "A"
}
{
  "question": "What will be the result of calling datetime.datetime(2025, 5, 3).isoformat()?",
  "options": ["A. '2025-05-03T00:00:00'", "B. '2025-05-03'", "C. '03-05-2025'", "D. '2025/05/03'"],
  "answer": "A"
}
{
  "question": "Which method from the math module returns the largest integer less than or equal to the given number?",
  "options": ["A. math.floor()", "B. math.ceil()", "C. math.trunc()", "D. math.abs()"],
  "answer": "A"
}
{
  "question": "Which method is used to get the current day of the month?",
  "options": ["A. datetime.now().day", "B. datetime.today().day", "C. time.day()", "D. calendar.current_day()"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the power of a number raised to an exponent?",
  "options": ["A. math.pow()", "B. math.exponent()", "C. math.power()", "D. math.square()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module returns the current month?",
  "options": ["A. datetime.now().month", "B. datetime.month()", "C. time.month()", "D. calendar.get_current_month()"],
  "answer": "A"
}
{
  "question": "What does the math.radians() function do?",
  "options": ["A. Converts degrees to radians", "B. Converts radians to degrees", "C. Returns the number pi", "D. Calculates the cosine of an angle"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the logarithm of a number to a given base?",
  "options": ["A. math.log(x, base)", "B. math.log10()", "C. math.exponential()", "D. math.logarithm()"],
  "answer": "A"
}
{
  "question": "Which method is used to get the current time in seconds since the Unix epoch?",
  "options": ["A. time.time()", "B. datetime.timestamp()", "C. time.get_time()", "D. datetime.now()"],
  "answer": "A"
}
{
  "question": "What will be the result of calling math.degrees(math.pi)?",
  "options": ["A. 180", "B. 360", "C. 90", "D. 2"],
  "answer": "A"
}
{
  "question": "Which of the following methods returns the last day of the current month?",
  "options": ["A. calendar.monthrange(year, month)[1]", "B. datetime.last_day_of_month()", "C. time.get_last_day_of_month()", "D. all of the above"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the largest integer in a sequence of numbers?",
  "options": ["A. math.fsum()", "B. math.max()", "C. math.argmax()", "D. math.greatest()"],
  "answer": "B"
}
{
  "question": "Which of the following is used to calculate the area of a circle given the radius?",
  "options": ["A. math.pi * radius**2", "B. math.area(radius)", "C. math.circle_area(radius)", "D. math.radius_area()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module returns the number of seconds in a given year?",
  "options": ["A. 365 * 24 * 60 * 60", "B. datetime.year_seconds()", "C. time.get_seconds_in_year()", "D. calendar.get_seconds_in_year()"],
  "answer": "A"
},
{
  "question": "Which function from the math module calculates the square root of a number?",
  "options": ["A. math.sqrt()", "B. math.pow()", "C. math.sqroot()", "D. math.expo()"],
  "answer": "A"
}
{
  "question": "What is the purpose of the time.sleep() function?",
  "options": ["A. Pause the execution of a program for a specified time", "B. Get the current system time", "C. Put the program into sleep mode", "D. Pause the system for a specified time"],
  "answer": "A"
}
{
  "question": "Which of the following methods will return the first weekday of the month?",
  "options": ["A. calendar.monthrange(year, month)[0]", "B. datetime.first_weekday(month)", "C. time.get_first_weekday()", "D. calendar.get_first_weekday()"],
  "answer": "A"
}
{
  "question": "What will be the result of calling datetime.datetime(2025, 5, 3).isoformat()?",
  "options": ["A. '2025-05-03T00:00:00'", "B. '2025-05-03'", "C. '03-05-2025'", "D. '2025/05/03'"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the smallest integer greater than or equal to a given number?",
  "options": ["A. math.ceil()", "B. math.floor()", "C. math.trunc()", "D. math.abs()"],
  "answer": "A"
}
{
  "question": "Which of the following functions is used to determine if a number is odd or even?",
  "options": ["A. n % 2 == 0", "B. math.is_even(n)", "C. math.is_odd(n)", "D. all of the above"],
  "answer": "A"
}
{
  "question": "Which method in the datetime module is used to get the current timestamp?",
  "options": ["A. datetime.timestamp()", "B. datetime.get_timestamp()", "C. time.timestamp()", "D. calendar.timestamp()"],
  "answer": "A"
}
{
  "question": "What does the math.radians() function do?",
  "options": ["A. Converts degrees to radians", "B. Converts radians to degrees", "C. Returns the number pi", "D. Calculates the cosine of an angle"],
  "answer": "A"
}
{
  "question": "Which method is used to get the month of a specific date in Python?",
  "options": ["A. datetime.month", "B. datetime.get_month()", "C. time.get_month()", "D. calendar.month()"],
  "answer": "A"
}
{
  "question": "Which function is used to calculate the greatest common divisor (GCD) of two numbers?",
  "options": ["A. math.gcd()", "B. math.lcm()", "C. math.greatest()", "D. math.max()"],
  "answer": "A"
}
{
  "question": "What is the correct syntax for importing the math module?",
  "options": ["A. import math", "B. from math import *", "C. import math as m", "D. all of the above"],
  "answer": "D"
}
{
  "question": "What will be the output of math.exp(1)?",
  "options": ["A. 2.71828", "B. 1", "C. 3.14159", "D. 1.0"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to convert a string to a date object?",
  "options": ["A. datetime.strptime()", "B. datetime.to_date()", "C. time.to_date()", "D. calendar.strptime()"],
  "answer": "A"
}
{
  "question": "What does the math.factorial() function return?",
  "options": ["A. The factorial of a number", "B. The sum of a number", "C. The square root of a number", "D. The logarithm of a number"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the value of pi?",
  "options": ["A. math.pi", "B. math.pi_value()", "C. math.get_pi()", "D. math.value_of_pi()"],
  "answer": "A"
}
{
  "question": "What will be the result of math.pow(2, 3)?",
  "options": ["A. 8", "B. 6", "C. 4", "D. 16"],
  "answer": "A"
}
{
  "question": "Which of the following functions will return the current day of the week?",
  "options": ["A. datetime.weekday()", "B. time.weekday()", "C. datetime.today().weekday()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which method is used to get the first day of the week in Python?",
  "options": ["A. calendar.firstweekday()", "B. datetime.get_first_day_of_week()", "C. time.first_day_of_week()", "D. datetime.firstweekday()"],
  "answer": "A"
}
{
  "question": "What is the correct syntax to check if a number is positive in Python?",
  "options": ["A. n > 0", "B. n == 0", "C. n != 0", "D. n >= 0"],
  "answer": "A"
}
{
  "question": "Which function from the math module calculates the sine of an angle?",
  "options": ["A. math.sin()", "B. math.cos()", "C. math.tan()", "D. math.factorial()"],
  "answer": "A"
}
{
  "question": "Which method from the math module is used to calculate the absolute value of a number?",
  "options": ["A. math.fabs()", "B. math.abs()", "C. math.absolute()", "D. math.mod()"],
  "answer": "A"
}
{
  "question": "Which method in the datetime module is used to get the current time?",
  "options": ["A. datetime.now()", "B. datetime.get_current_time()", "C. time.now()", "D. time.get_time()"],
  "answer": "A"
},
{
  "question": "Which method is used to get the number of days in a specific month?",
  "options": ["A. calendar.monthrange()", "B. datetime.monthrange()", "C. time.get_days_in_month()", "D. all of the above"],
  "answer": "A"
}
{
  "question": "What will be the result of math.sqrt(16)?",
  "options": ["A. 4", "B. 16", "C. 2", "D. 8"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module can be used to compare two dates?",
  "options": ["A. datetime.compare()", "B. datetime.is_before()", "C. datetime.__eq__()", "D. datetime.equals()"],
  "answer": "C"
}
{
  "question": "Which function from the math module returns the ceiling of a number?",
  "options": ["A. math.ceil()", "B. math.floor()", "C. math.trunc()", "D. math.round()"],
  "answer": "A"
}
{
  "question": "Which method from the calendar module returns a month's calendar as a multi-line string?",
  "options": ["A. calendar.month()", "B. calendar.monthcalendar()", "C. calendar.get_month()", "D. calendar.print_month()"],
  "answer": "A"
}
{
  "question": "What is the result of calling math.trunc(9.99)?",
  "options": ["A. 9", "B. 9.99", "C. 10", "D. 9.0"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module allows us to add or subtract days from a given date?",
  "options": ["A. datetime.timedelta()", "B. datetime.add_days()", "C. datetime.add()", "D. datetime.subtract_days()"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct way to get the current year using the datetime module?",
  "options": ["A. datetime.datetime.now().year", "B. datetime.today().year", "C. datetime.year()", "D. both A and B"],
  "answer": "D"
}
{
  "question": "Which function from the math module returns the sine of an angle?",
  "options": ["A. math.sin()", "B. math.cos()", "C. math.tan()", "D. math.sqrt()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module returns the current month as a number?",
  "options": ["A. datetime.now().month", "B. datetime.get_current_month()", "C. time.month()", "D. calendar.get_month()"],
  "answer": "A"
}
{
  "question": "What does the math.isqrt() function do?",
  "options": ["A. Returns the integer square root of a number", "B. Returns the square root of a number", "C. Returns the sine of a number", "D. Returns the logarithm of a number"],
  "answer": "A"
}
{
  "question": "Which method in the datetime module returns the current hour?",
  "options": ["A. datetime.now().hour", "B. datetime.get_current_hour()", "C. time.get_hour()", "D. calendar.get_current_hour()"],
  "answer": "A"
}
{
  "question": "What does the math.degrees() function do?",
  "options": ["A. Converts radians to degrees", "B. Converts degrees to radians", "C. Returns the number pi", "D. Returns the tangent of an angle"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to get the day of the year in Python?",
  "options": ["A. datetime.today().timetuple().tm_yday", "B. datetime.get_day_of_year()", "C. time.get_day_of_year()", "D. calendar.get_day_of_year()"],
  "answer": "A"
}
{
  "question": "What is the correct syntax to round a number to 2 decimal places in Python?",
  "options": ["A. round(5.456, 2)", "B. math.round(5.456, 2)", "C. round(5.456)", "D. math.round(5.456)"],
  "answer": "A"
}
{
  "question": "Which function from the math module returns the natural logarithm of a number?",
  "options": ["A. math.log()", "B. math.log10()", "C. math.exp()", "D. math.ln()"],
  "answer": "A"
}
{
  "question": "Which of the following is used to calculate the area of a circle given the radius?",
  "options": ["A. math.pi * radius**2", "B. math.circle_area(radius)", "C. math.area(radius)", "D. math.radius_area()"],
  "answer": "A"
}
{
  "question": "Which function in the math module calculates the cosine of an angle?",
  "options": ["A. math.cos()", "B. math.sin()", "C. math.tan()", "D. math.sqrt()"],
  "answer": "A"
}
{
  "question": "What is the purpose of the math.ceil() function?",
  "options": ["A. Rounds a number up to the nearest integer", "B. Rounds a number down to the nearest integer", "C. Calculates the square root of a number", "D. Returns the absolute value of a number"],
  "answer": "A"
}
{
  "question": "Which method from the math module returns the logarithm of a number to base 10?",
  "options": ["A. math.log10()", "B. math.log()", "C. math.exponential()", "D. math.logarithm()"],
  "answer": "A"
}
{
  "question": "What is the correct way to create a date object in Python?",
  "options": ["A. datetime.date(2025, 5, 3)", "B. datetime.create_date(2025, 5, 3)", "C. date(2025, 5, 3)", "D. all of the above"],
  "answer": "A"
},
{
  "question": "Which method from the datetime module returns the current date?",
  "options": ["A. datetime.now().date()", "B. datetime.today().date()", "C. datetime.get_current_date()", "D. both A and B"],
  "answer": "D"
}
{
  "question": "What is the correct syntax to get the day of the week from a date object?",
  "options": ["A. datetime.weekday()", "B. datetime.get_day_of_week()", "C. time.day_of_week()", "D. calendar.day_of_week()"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module is used to find the number of days between two dates?",
  "options": ["A. datetime.timedelta()", "B. datetime.diff()", "C. datetime.days_between()", "D. datetime.subtract()"],
  "answer": "A"
}
{
  "question": "What is the correct function to get the current timestamp?",
  "options": ["A. time.time()", "B. datetime.timestamp()", "C. datetime.now().timestamp()", "D. all of the above"],
  "answer": "D"
}
{
  "question": "Which of the following methods returns the day of the month from a date object?",
  "options": ["A. datetime.day", "B. datetime.get_day()", "C. time.get_day_of_month()", "D. calendar.day_of_month()"],
  "answer": "A"
}
{
  "question": "Which method in the calendar module returns a list of the weekday names?",
  "options": ["A. calendar.weekday_name()", "B. calendar.weekday()", "C. calendar.day_name()", "D. calendar.get_weekdays()"],
  "answer": "C"
}
{
  "question": "What is the output of math.factorial(5)?",
  "options": ["A. 120", "B. 24", "C. 60", "D. 5"],
  "answer": "A"
}
{
  "question": "Which method from the datetime module returns a formatted string representing a date object?",
  "options": ["A. datetime.strftime()", "B. datetime.to_string()", "C. datetime.date_format()", "D. datetime.get_formatted_string()"],
  "answer": "A"
}
{
  "question": "What is the correct function to find the month name from a date object?",
  "options": ["A. datetime.strftime('%B')", "B. datetime.get_month_name()", "C. time.get_month_name()", "D. calendar.get_month()"],
  "answer": "A"
}
{
  "question": "Which method from the math module returns the largest integer less than or equal to a number?",
  "options": ["A. math.floor()", "B. math.ceil()", "C. math.trunc()", "D. math.round()"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to check if a date is in the past?",
  "options": ["A. datetime.is_past()", "B. datetime.before_today()", "C. datetime.now() > datetime.date()", "D. datetime.isbefore()"],
  "answer": "C"
}
{
  "question": "Which function from the math module returns the absolute value of a number?",
  "options": ["A. math.fabs()", "B. math.abs()", "C. math.absolute()", "D. math.abs_value()"],
  "answer": "B"
}
{
  "question": "Which method from the datetime module returns the current minute?",
  "options": ["A. datetime.now().minute", "B. time.get_current_minute()", "C. datetime.get_minute()", "D. time.get_minute()"],
  "answer": "A"
}
{
  "question": "What will be the result of calling math.pow(2, -1)?",
  "options": ["A. 0.5", "B. 1", "C. 2", "D. 4"],
  "answer": "A"
}
{
  "question": "Which function from the datetime module returns the current second?",
  "options": ["A. datetime.now().second", "B. time.now().second", "C. datetime.get_second()", "D. time.get_second()"],
  "answer": "A"
}
{
  "question": "What is the result of calling math.isclose(0.1 + 0.2, 0.3)?",
  "options": ["A. True", "B. False", "C. 0.1", "D. Error"],
  "answer": "A"
}
{
  "question": "Which method from the math module returns the smallest integer greater than or equal to a given number?",
  "options": ["A. math.ceil()", "B. math.floor()", "C. math.trunc()", "D. math.abs()"],
  "answer": "A"
}
{
  "question": "Which function is used to convert a time object into a string representation?",
  "options": ["A. time.strftime()", "B. time.to_string()", "C. time.convert()", "D. time.get_string()"],
  "answer": "A"
}
{
  "question": "What is the correct way to calculate the number of seconds between two dates in Python?",
  "options": ["A. (date2 - date1).total_seconds()", "B. (date2 - date1).seconds()", "C. time.get_seconds_between(date1, date2)", "D. all of the above"],
  "answer": "A"
}
{
  "question": "What is the output of math.log10(100)?",
  "options": ["A. 2", "B. 10", "C. 5", "D. 100"],
  "answer": "A"
}
{
  "question": "Which function from the datetime module is used to get the current week number of the year?",
  "options": ["A. datetime.isocalendar()[1]", "B. datetime.get_week_number()", "C. calendar.get_week_number()", "D. time.get_week_number()"],
  "answer": "A"
},
{
  "question": "What does OOP stand for?",
  "options": ["A. Object-Oriented Programming", "B. Object-Oriented Procedure", "C. Object-Oriented Practice", "D. None of the above"],
  "answer": "A"
}
{
  "question": "In Python, which of the following is used to define a class?",
  "options": ["A. class", "B. def", "C. object", "D. method"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct syntax to create an instance of a class?",
  "options": ["A. class_name()", "B. new class_name()", "C. instance(class_name)", "D. create class_name()"],
  "answer": "A"
}
{
  "question": "Which of the following is used to define a method inside a class in Python?",
  "options": ["A. def", "B. class", "C. function", "D. method"],
  "answer": "A"
}
{
  "question": "What is a constructor in Python?",
  "options": ["A. A method that is automatically called when an instance of a class is created", "B. A function that is used to build objects", "C. A variable within a class", "D. None of the above"],
  "answer": "A"
}
{
  "question": "Which of the following is used to refer to the instance of a class in its method?",
  "options": ["A. self", "B. this", "C. object", "D. instance"],
  "answer": "A"
}
{
  "question": "What is inheritance in OOP?",
  "options": ["A. The ability of a class to derive properties and behaviors from another class", "B. A function to store class data", "C. A method that modifies class behaviors", "D. A mechanism to create new classes from existing classes"],
  "answer": "A"
}
{
  "question": "What does the 'super()' function do in Python?",
  "options": ["A. It calls a method from the parent class", "B. It initializes the object", "C. It creates a new class", "D. It returns the instance of the class"],
  "answer": "A"
}
{
  "question": "What is polymorphism in OOP?",
  "options": ["A. The ability of a class to define methods that have the same name but different implementations", "B. The process of creating new methods", "C. The ability to modify existing classes", "D. The process of destroying an object"],
  "answer": "A"
}
{
  "question": "What is encapsulation in OOP?",
  "options": ["A. The technique of restricting access to some of an object's components", "B. The inheritance mechanism", "C. The abstraction process", "D. The ability to combine methods into a single method"],
  "answer": "A"
}
{
  "question": "Which method is used to destroy an object in Python?",
  "options": ["A. __del__", "B. delete()", "C. __exit__", "D. __destroy__"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct way to call a method of an object in Python?",
  "options": ["A. object.method()", "B. object->method()", "C. method.object()", "D. object::method()"],
  "answer": "A"
}
{
  "question": "What is an abstract class?",
  "options": ["A. A class that cannot be instantiated, but can be subclassed", "B. A class with no methods", "C. A class that can have instances", "D. A class that contains only one method"],
  "answer": "A"
}
{
  "question": "In Python, which keyword is used to define a class?",
  "options": ["A. class", "B. object", "C. def", "D. method"],
  "answer": "A"
}
{
  "question": "What does the 'isinstance()' function do in Python?",
  "options": ["A. It checks if an object is an instance of a specified class", "B. It checks if a class is an instance of an object", "C. It checks if an object has a method", "D. It checks if a class is callable"],
  "answer": "A"
}
{
  "question": "What is the purpose of the '__init__()' method in Python?",
  "options": ["A. It initializes a newly created object", "B. It defines a method", "C. It destroys an object", "D. It imports a module"],
  "answer": "A"
}
{
  "question": "Which of the following statements about multiple inheritance in Python is true?",
  "options": ["A. Python supports multiple inheritance", "B. Python does not support multiple inheritance", "C. Only classes of the same type can be inherited", "D. Multiple inheritance is not possible in Python"],
  "answer": "A"
}
{
  "question": "What is the purpose of 'self' in Python?",
  "options": ["A. It refers to the instance of the class", "B. It is used to access global variables", "C. It refers to a class", "D. It defines a method in a class"],
  "answer": "A"
}
{
  "question": "What is the use of the __str__ method in Python?",
  "options": ["A. It returns a string representation of the object", "B. It defines the class name", "C. It is used to compare objects", "D. It is used to delete an object"],
  "answer": "A"
}
{
  "question": "Which of the following can be used to create an object in Python?",
  "options": ["A. By calling a class", "B. By defining an object in the class", "C. By creating an instance of the class", "D. All of the above"],
  "answer": "D"
}
{
  "question": "What is an instance variable?",
  "options": ["A. A variable that belongs to an object", "B. A variable shared by all objects of a class", "C. A variable defined inside a method", "D. A method that manipulates class data"],
  "answer": "A"
}
{
  "question": "What does the term 'overriding' mean in the context of OOP?",
  "options": ["A. The process of redefining a method in a child class", "B. The process of creating new methods", "C. The process of defining a method in a parent class", "D. The process of deleting a method"],
  "answer": "A"
}
{
  "question": "What is the role of 'abstract methods' in OOP?",
  "options": ["A. They must be implemented by subclasses", "B. They are optional in subclasses", "C. They can be ignored", "D. They provide default behavior"],
  "answer": "A"
}
{
  "question": "What will be the output of calling 'obj.__dict__' in Python?",
  "options": ["A. It returns a dictionary of the object's attributes", "B. It returns a list of the object's methods", "C. It returns the class of the object", "D. It returns the instance of the object"],
  "answer": "A"
}
{
  "question": "Which of the following statements about class variables is true?",
  "options": ["A. Class variables are shared by all instances of a class", "B. Class variables are unique to each instance", "C. Class variables are defined inside methods", "D. Class variables cannot be modified"],
  "answer": "A"
}
{
  "question": "What does the term 'method resolution order' (MRO) refer to in OOP?",
  "options": ["A. The order in which methods are inherited in multiple inheritance", "B. The order in which methods are called in a class", "C. The order in which classes are defined", "D. The order in which classes are destroyed"],
  "answer": "A"
}
{
  "question": "In Python, how can you access the parent class method from a child class?",
  "options": ["A. Using super()", "B. Using this()", "C. Using parent()", "D. Using super_class()"],
  "answer": "A"
}
{
  "question": "Which of the following is used to call a method of a parent class in Python?",
  "options": ["A. super().method_name()", "B. parent().method_name()", "C. class().method_name()", "D. base().method_name()"],
  "answer": "A"
}
{
  "question": "What is the purpose of the 'del' statement in Python?",
  "options": ["A. It deletes an object or an attribute of an object", "B. It deletes a variable", "C. It deletes a class", "D. It deletes the method of a class"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the Python 'property' function?",
  "options": ["A. It is used to define getter and setter methods for a class attribute", "B. It is used to create a private method", "C. It is used to declare a class", "D. It is used to delete a class attribute"],
  "answer": "A"
}
{
  "question": "Which of the following is true about OOP in Python?",
  "options": ["A. Python is a multi-paradigm language that supports OOP", "B. Python does not support OOP", "C. Python supports only functional programming", "D. Python uses object-oriented syntax only"],
  "answer": "A"
},
{
  "question": "Which of the following is the correct syntax for defining a class method in Python?",
  "options": ["A. def method_name(cls):", "B. def method_name(self):", "C. def method_name():", "D. def method_name(object):"],
  "answer": "A"
}
{
  "question": "What is the main difference between a class variable and an instance variable?",
  "options": ["A. Class variables are shared across instances, while instance variables are unique to each object", "B. Instance variables are shared across instances, while class variables are unique to each object", "C. There is no difference", "D. Instance variables are defined within methods, class variables are not"],
  "answer": "A"
}
{
  "question": "Which of the following methods can be used to add a class to an instance in Python?",
  "options": ["A. __new__", "B. __init__", "C. __add__", "D. __setattr__"],
  "answer": "B"
}
{
  "question": "Which of the following is NOT a principle of Object-Oriented Programming?",
  "options": ["A. Abstraction", "B. Inheritance", "C. Polymorphism", "D. Iteration"],
  "answer": "D"
}
{
  "question": "Which of the following is an example of a class in Python?",
  "options": ["A. class MyClass:", "B. MyClass:", "C. class = MyClass", "D. object MyClass"],
  "answer": "A"
}
{
  "question": "What will be the output of calling 'type(obj)' in Python, where obj is an object?",
  "options": ["A. It returns the class of the object", "B. It returns the method of the object", "C. It returns the variable of the object", "D. It returns the instance of the class"],
  "answer": "A"
}
{
  "question": "Which of the following is true about 'self' in Python?",
  "options": ["A. It refers to the current instance of the class", "B. It refers to the parent class", "C. It is optional in method definitions", "D. It is used to define a class method"],
  "answer": "A"
}
{
  "question": "What is an example of abstraction in OOP?",
  "options": ["A. Hiding the implementation details and showing only the functionality", "B. Creating objects from a class", "C. Reusing code from the base class", "D. Changing the behavior of a class in a child class"],
  "answer": "A"
}
{
  "question": "Which of the following operators is used for inheritance in Python?",
  "options": ["A. (class1, class2)", "B. (class1, class2):", "C. class2(class1):", "D. class1.class2"],
  "answer": "C"
}
{
  "question": "Which of the following is used to define a class method that can be called on the class itself, rather than on instances?",
  "options": ["A. @classmethod", "B. @staticmethod", "C. @method", "D. @classmethod"],
  "answer": "A"
}
{
  "question": "In Python, which of the following is used to access the attributes and methods of a parent class?",
  "options": ["A. super()", "B. this()", "C. parent()", "D. base()"],
  "answer": "A"
}
{
  "question": "Which of the following statements correctly describes 'method overriding'?",
  "options": ["A. It occurs when a method in a child class has the same name and signature as a method in the parent class", "B. It occurs when a method in a parent class has the same name as a method in the child class", "C. It refers to modifying a class's constructor", "D. It refers to calling a method from the parent class"],
  "answer": "A"
}
{
  "question": "What will be the output if you try to access an attribute that doesn't exist in an object?",
  "options": ["A. AttributeError", "B. KeyError", "C. ValueError", "D. None"],
  "answer": "A"
}
{
  "question": "In Python, which function is used to create a new object from a class?",
  "options": ["A. __new__", "B. __init__", "C. __create__", "D. __generate__"],
  "answer": "A"
}
{
  "question": "What is a mixin class in Python?",
  "options": ["A. A class that provides a small set of methods to be inherited by other classes", "B. A class used to initialize objects", "C. A class that combines different inheritance techniques", "D. A class that defines abstract methods"],
  "answer": "A"
}
{
  "question": "Which of the following is used to check whether an object is an instance of a specific class?",
  "options": ["A. isinstance()", "B. type()", "C. check_instance()", "D. class_of()"],
  "answer": "A"
}
{
  "question": "What is the purpose of 'staticmethod' in Python?",
  "options": ["A. It defines a method that does not require an instance or class to be called", "B. It defines a method that can only be called by an instance", "C. It defines a method that is used for class initialization", "D. It defines a method that is only used by the parent class"],
  "answer": "A"
}
{
  "question": "In Python, what happens when an object goes out of scope?",
  "options": ["A. It is destroyed and memory is freed", "B. It is marked for garbage collection", "C. It is still accessible", "D. It becomes a global object"],
  "answer": "B"
}
{
  "question": "What does the term 'overloading' mean in OOP?",
  "options": ["A. Defining multiple methods with the same name but different parameters", "B. Creating new classes from existing ones", "C. Changing the access modifiers of a method", "D. Deleting a method from a class"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct syntax for creating a property in a class?",
  "options": ["A. @property def method_name(self):", "B. def @property method_name(self):", "C. @method_property def method_name(self):", "D. @getter def method_name(self):"],
  "answer": "A"
}
{
  "question": "What does the term 'class method' mean in Python?",
  "options": ["A. A method that takes the class as the first argument", "B. A method that is called by instances of the class", "C. A method that can be called without creating an object", "D. A method that defines class-level variables"],
  "answer": "A"
}
{
  "question": "What will happen if you attempt to instantiate an abstract class directly?",
  "options": ["A. It will raise a TypeError", "B. It will create an instance", "C. It will invoke the constructor", "D. It will throw an AttributeError"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct way to create an object of a class?",
  "options": ["A. object = MyClass()", "B. MyClass = object()", "C. object = create(MyClass)", "D. new_object = MyClass"],
  "answer": "A"
}
{
  "question": "In Python, which method is automatically called when an object is destroyed?",
  "options": ["A. __del__", "B. __destroy__", "C. __exit__", "D. __remove__"],
  "answer": "A"
}
{
  "question": "Which of the following statements about object-oriented inheritance is true?",
  "options": ["A. Inheritance allows a class to inherit properties and methods from a parent class", "B. Inheritance restricts a class from accessing methods of its parent", "C. Inheritance allows a class to use only one method", "D. Inheritance disables the use of constructors in child classes"],
  "answer": "A"
}
{
  "question": "Which method is used to access an attribute of an object in Python?",
  "options": ["A. object.attribute", "B. object::attribute", "C. object.get(attribute)", "D. object.get_attribute()"],
  "answer": "A"
}
{
  "question": "What will be the output of calling '__str__' method in Python?",
  "options": ["A. A string representation of the object", "B. A dictionary of the object's attributes", "C. The memory address of the object", "D. The instance type of the object"],
  "answer": "A"
}
{
  "question": "Which of the following is NOT a type of inheritance in Python?",
  "options": ["A. Single Inheritance", "B. Multiple Inheritance", "C. Multilevel Inheritance", "D. Mixed Inheritance"],
  "answer": "D"
}
{
  "question": "Which of the following is used to define an abstract method in Python?",
  "options": ["A. @abstractmethod", "B. @method", "C. @staticmethod", "D. @classmethod"],
  "answer": "A"
},
    {
  "question": "Which of the following is a key benefit of inheritance in OOP?",
  "options": ["A. Code reuse", "B. Encapsulation", "C. Multiple instantiations", "D. Exception handling"],
  "answer": "A"
}
{
  "question": "Which of the following correctly represents polymorphism in Python?",
  "options": ["A. The ability to define multiple methods with the same name but different behavior", "B. Creating multiple classes from a single class", "C. Inheriting from multiple parent classes", "D. Declaring variables in the class"],
  "answer": "A"
}
{
  "question": "What will be the result of calling a method in a class without passing the self parameter?",
  "options": ["A. It will raise a TypeError", "B. It will call the method correctly", "C. It will execute a default method", "D. The method will not be recognized"],
  "answer": "A"
}
{
  "question": "Which of the following statements about abstract classes in Python is true?",
  "options": ["A. Abstract classes cannot be instantiated directly", "B. Abstract classes can be instantiated", "C. Abstract classes cannot have methods", "D. Abstract classes are used only for utility functions"],
  "answer": "A"
}
{
  "question": "Which of the following is used to define an abstract class in Python?",
  "options": ["A. from abc import ABC, abstractmethod", "B. from abc import abstractclass", "C. class ABC", "D. class abstractmethod"],
  "answer": "A"
}
{
  "question": "Which of the following keywords is used to inherit from a parent class?",
  "options": ["A. inherit", "B. extends", "C. class", "D. super"],
  "answer": "C"
}
{
  "question": "What does the term 'method resolution order' (MRO) refer to in Python?",
  "options": ["A. The order in which methods are inherited from multiple classes", "B. The order in which methods are executed in a class", "C. The order in which methods are defined", "D. The order in which classes are declared"],
  "answer": "A"
}
{
  "question": "What will be the output if a method in a child class does not call the parent method using 'super()'?",
  "options": ["A. The parent method will not be executed", "B. The parent method will be executed automatically", "C. It will raise an error", "D. The child method will overwrite the parent method"],
  "answer": "A"
}
{
  "question": "Which of the following is true about a constructor in Python?",
  "options": ["A. A constructor initializes the attributes of an object", "B. A constructor is used to define methods", "C. A constructor is not required in Python", "D. A constructor is used to inherit classes"],
  "answer": "A"
}
{
  "question": "Which of the following is NOT a feature of encapsulation?",
  "options": ["A. Hiding implementation details", "B. Using private methods", "C. Preventing direct access to class data", "D. Inheriting methods from other classes"],
  "answer": "D"
}
{
  "question": "Which of the following represents the correct way to call a method from a parent class in Python?",
  "options": ["A. super().method_name()", "B. parent.method_name()", "C. self.parent.method_name()", "D. parent_class.method_name()"],
  "answer": "A"
}
{
  "question": "What does 'self' refer to in the context of an object-oriented class?",
  "options": ["A. It refers to the current instance of the class", "B. It refers to the class itself", "C. It is used to define class methods", "D. It refers to the parent class"],
  "answer": "A"
}
{
  "question": "What is the difference between a class method and an instance method?",
  "options": ["A. A class method takes a class as the first argument, an instance method takes an object", "B. A class method can access instance attributes, while an instance method cannot", "C. A class method can be called from an object, but an instance method cannot", "D. There is no difference between them"],
  "answer": "A"
}
{
  "question": "Which of the following is an example of method overloading?",
  "options": ["A. Defining multiple methods with the same name but different parameters", "B. Overriding methods in child classes", "C. Defining a method with the same name as an attribute", "D. Using the same method for different classes"],
  "answer": "A"
}
{
  "question": "Which of the following statements about the 'super' function is true?",
  "options": ["A. It is used to call a method from the parent class", "B. It is used to call the current class method", "C. It is used to define a new method", "D. It is used to call an object method"],
  "answer": "A"
}
{
  "question": "Which of the following will raise an AttributeError in Python?",
  "options": ["A. Trying to access an attribute that doesn't exist", "B. Calling a method without parentheses", "C. Defining an object within a class", "D. Creating an object from an abstract class"],
  "answer": "A"
}
{
  "question": "What will happen if you define an attribute with the same name in both the parent and child class?",
  "options": ["A. The child class will override the parent class attribute", "B. The parent class will override the child class attribute", "C. Both attributes will coexist", "D. It will raise an error"],
  "answer": "A"
}
{
  "question": "What is the purpose of 'abstractmethod' in Python?",
  "options": ["A. To declare a method that must be implemented by subclasses", "B. To define a method that will never be implemented", "C. To override a method from the parent class", "D. To create a method that is inherited by all classes"],
  "answer": "A"
}
{
  "question": "Which of the following is used to declare a method that will not be inherited in Python?",
  "options": ["A. @staticmethod", "B. @final", "C. @abstractmethod", "D. @classmethod"],
  "answer": "B"
}
{
  "question": "What does the 'self' parameter represent in a method definition?",
  "options": ["A. The instance of the class", "B. The parent class", "C. The class itself", "D. The method's parameters"],
  "answer": "A"
}
{
  "question": "What happens if you do not define a constructor in a class?",
  "options": ["A. A default constructor is used", "B. An error occurs", "C. The class cannot be instantiated", "D. The constructor is inherited from the parent class"],
  "answer": "A"
}
{
  "question": "Which of the following concepts allows classes to share methods and properties with other classes?",
  "options": ["A. Inheritance", "B. Abstraction", "C. Polymorphism", "D. Encapsulation"],
  "answer": "A"
}
{
  "question": "Which of the following is used to prevent direct modification of class attributes?",
  "options": ["A. Encapsulation", "B. Inheritance", "C. Polymorphism", "D. Abstraction"],
  "answer": "A"
}
{
  "question": "Which of the following would you use to define a property for an attribute in Python?",
  "options": ["A. @property", "B. @getter", "C. @method", "D. @attribute"],
  "answer": "A"
}
{
  "question": "What does it mean when a class is said to be 'abstract' in Python?",
  "options": ["A. It cannot be instantiated", "B. It can be instantiated but only with specific parameters", "C. It only contains method declarations", "D. It cannot inherit from other classes"],
  "answer": "A"
}
{
  "question": "Which of the following is the main advantage of polymorphism?",
  "options": ["A. The ability to use a method in different ways", "B. The ability to create multiple methods with the same name", "C. The ability to inherit from multiple classes", "D. The ability to protect class data"],
  "answer": "A"
}
{
  "question": "What is the purpose of using 'super()' in Python?",
  "options": ["A. To call the method from the parent class", "B. To create an object from a parent class", "C. To prevent method overriding", "D. To create a new method"],
  "answer": "A"
}
{
  "question": "What does the 'classmethod' decorator do in Python?",
  "options": ["A. It defines a method that takes the class itself as the first argument", "B. It defines a method that can only be called by an instance", "C. It defines a method that can be called by both an instance and a class", "D. It defines a method that does not take any arguments"],
  "answer": "A"
}
{
  "question": "What is the purpose of an 'init' method in a class?",
  "options": ["A. It initializes the attributes of the class", "B. It defines the methods of the class", "C. It creates instances of the class", "D. It handles errors in the class"],
  "answer": "A"
}
{
  "question": "Which of the following represents a scenario where multiple inheritance might be used?",
  "options": ["A. When a class needs to inherit features from more than one parent class", "B. When a class should only inherit from a single class", "C. When classes need to share attributes", "D. When you need to avoid method overriding"],
  "answer": "A"
}
{
  "question": "Which of the following does NOT describe polymorphism?",
  "options": ["A. It allows the same method to be used with different object types", "B. It allows the same name for different methods in different classes", "C. It allows a child class to inherit methods from a parent class", "D. It allows a method to behave differently based on the object type"],
  "answer": "C"
}
{
  "question": "What is the purpose of the 'del' keyword in Python?",
  "options": ["A. To delete an object", "B. To delete a method", "C. To delete a class", "D. To delete an attribute"],
  "answer": "A"
},
{
  "question": "What is the primary purpose of abstraction in object-oriented programming?",
  "options": ["A. To hide implementation details", "B. To prevent inheritance", "C. To make data accessible", "D. To reduce the number of classes"],
  "answer": "A"
}
{
  "question": "Which of the following is true about multiple inheritance in Python?",
  "options": ["A. Python supports multiple inheritance", "B. Python does not support multiple inheritance", "C. Multiple inheritance is not recommended in Python", "D. Python only allows single inheritance in a class"],
  "answer": "A"
}
{
  "question": "What is the purpose of a 'destructor' in Python?",
  "options": ["A. To clean up resources when an object is deleted", "B. To initialize class attributes", "C. To define default values for attributes", "D. To create an instance of a class"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the __init__ method in Python?",
  "options": ["A. It is used to initialize an object when the class is instantiated", "B. It is used to delete the object", "C. It is used to define a class method", "D. It is used to define a class variable"],
  "answer": "A"
}
{
  "question": "What will happen if a method is defined in both the parent and child class in Python?",
  "options": ["A. The child class method will override the parent class method", "B. The parent class method will override the child class method", "C. Both methods will coexist without any conflict", "D. The program will throw an error"],
  "answer": "A"
}
{
  "question": "Which of the following is used to modify an instance attribute in Python?",
  "options": ["A. self.attribute", "B. class.attribute", "C. self.set_attribute", "D. object.get_attribute"],
  "answer": "A"
}
{
  "question": "What is the correct way to create an object of a class in Python?",
  "options": ["A. object = ClassName()", "B. object = new ClassName()", "C. object = ClassName.new()", "D. object = create ClassName()"],
  "answer": "A"
}
{
  "question": "Which of the following statements is true about class variables?",
  "options": ["A. They are shared among all instances of a class", "B. They are specific to each instance", "C. They are used to store instance data", "D. They can only be accessed by the class method"],
  "answer": "A"
}
{
  "question": "What is the primary purpose of using the 'super()' function in Python?",
  "options": ["A. To call methods from the parent class", "B. To access private variables", "C. To define a new class", "D. To check the method order in inheritance"],
  "answer": "A"
}
{
  "question": "What does the __str__ method define in a Python class?",
  "options": ["A. The string representation of an object", "B. The method to initialize the class", "C. The method for comparison", "D. The method for object deletion"],
  "answer": "A"
}
{
  "question": "What does the __del__ method do in Python?",
  "options": ["A. It is called when an object is destroyed", "B. It initializes a new instance of the class", "C. It defines a method for instance attributes", "D. It defines the string representation of the class"],
  "answer": "A"
}
{
  "question": "Which of the following is NOT a feature of object-oriented programming?",
  "options": ["A. Abstraction", "B. Encapsulation", "C. Compilation", "D. Inheritance"],
  "answer": "C"
}
{
  "question": "Which of the following is an example of a polymorphic behavior in Python?",
  "options": ["A. A method that behaves differently based on the object type", "B. A method that changes the name depending on the class", "C. A class that inherits from multiple classes", "D. A class that is abstract"],
  "answer": "A"
}
{
  "question": "What happens if a class method calls 'super()' without passing any arguments?",
  "options": ["A. It calls the parent class method", "B. It raises an error", "C. It will be ignored", "D. It calls the method of the current class"],
  "answer": "A"
}
{
  "question": "Which of the following defines a static method in Python?",
  "options": ["A. @staticmethod", "B. @classmethod", "C. @abstractmethod", "D. @property"],
  "answer": "A"
}
{
  "question": "Which of the following statements is true about the __new__ method in Python?",
  "options": ["A. It is used to create a new instance of the class", "B. It is used to initialize the attributes of an object", "C. It is used to delete an object", "D. It is used to define class methods"],
  "answer": "A"
}
{
  "question": "What does a 'getter' method do in object-oriented programming?",
  "options": ["A. It retrieves the value of an instance variable", "B. It sets the value of an instance variable", "C. It defines a method for class variables", "D. It initializes a new instance of the class"],
  "answer": "A"
}
{
  "question": "Which of the following is used to prevent an attribute from being modified directly in Python?",
  "options": ["A. @property", "B. @setter", "C. @classmethod", "D. @abstractmethod"],
  "answer": "A"
}
{
  "question": "Which of the following is a correct way to define a class in Python?",
  "options": ["A. class ClassName:", "B. create class ClassName:", "C. def ClassName():", "D. class = ClassName:"],
  "answer": "A"
}
{
  "question": "Which of the following is true about instance methods?",
  "options": ["A. They require an instance of the class to be called", "B. They do not require an instance of the class", "C. They can only be accessed from other methods", "D. They are not allowed to access instance attributes"],
  "answer": "A"
}
{
  "question": "What is the output when you define a class method with the @classmethod decorator?",
  "options": ["A. The method takes the class as the first argument", "B. The method behaves like an instance method", "C. The method behaves like a static method", "D. The method can only be accessed by an instance"],
  "answer": "A"
}
{
  "question": "Which of the following is true about private variables in Python?",
  "options": ["A. They cannot be accessed outside the class directly", "B. They can be accessed outside the class directly", "C. They are not allowed in Python", "D. They are used to define class methods"],
  "answer": "A"
}
{
  "question": "What does the @property decorator do in Python?",
  "options": ["A. It allows a method to be accessed as if it were an attribute", "B. It defines a getter method", "C. It defines a setter method", "D. It defines a class method"],
  "answer": "A"
}
{
  "question": "Which of the following is true about method overriding in Python?",
  "options": ["A. It allows a child class to modify a method inherited from the parent class", "B. It is not allowed in Python", "C. It makes the child class inherit methods from the parent class", "D. It prevents access to parent class methods"],
  "answer": "A"
}
{
  "question": "What is the output of calling 'super().method_name()' in a subclass?",
  "options": ["A. It calls the method of the parent class", "B. It raises a TypeError", "C. It calls the method of the subclass", "D. It calls the method from the same class"],
  "answer": "A"
}
{
  "question": "What is the key advantage of using a class method in Python?",
  "options": ["A. It can be called on the class itself, not just instances", "B. It behaves like an instance method", "C. It can only be called from an instance", "D. It is used to define instance variables"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct way to define a class variable in Python?",
  "options": ["A. class_variable = value", "B. self.class_variable = value", "C. def class_variable(value):", "D. object.class_variable = value"],
  "answer": "A"
}
{
  "question": "Which of the following represents the correct method for deleting an attribute from an object?",
  "options": ["A. del object.attribute", "B. object.del(attribute)", "C. delete object.attribute", "D. object.remove(attribute)"],
  "answer": "A"
}
{
  "question": "Which of the following would be the result of trying to instantiate an abstract class directly in Python?",
  "options": ["A. It will raise a TypeError", "B. It will instantiate the abstract class successfully", "C. The class will inherit from another class", "D. It will create an empty object"],
  "answer": "A"
},
{
  "question": "Which of the following is true about the 'self' keyword in Python?",
  "options": ["A. It refers to the current instance of the class", "B. It refers to the class itself", "C. It is not required in Python", "D. It is used to define class variables"],
  "answer": "A"
}
{
  "question": "What is the output of the following code?\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n    def greet(self):\n        print(f'Hello, {self.name}')\np = Person('John')\np.greet()",
  "options": ["A. Hello, John", "B. Error", "C. John", "D. Hello, self.name"],
  "answer": "A"
}
{
  "question": "What is the purpose of using a constructor method in Python?",
  "options": ["A. To initialize object attributes when the object is created", "B. To define the class variables", "C. To define class methods", "D. To delete an instance of the class"],
  "answer": "A"
}
{
  "question": "Which of the following is true about an abstract class?",
  "options": ["A. It cannot be instantiated directly", "B. It can be instantiated if all methods are defined", "C. It is a class with no methods", "D. It does not have any attributes"],
  "answer": "A"
}
{
  "question": "Which of the following is used to create a new instance of a class in Python?",
  "options": ["A. class_name()", "B. new class_name()", "C. create class_name()", "D. instance_of(class_name)"],
  "answer": "A"
}
{
  "question": "Which of the following is true about a class variable in Python?",
  "options": ["A. It is shared by all instances of the class", "B. It is unique for each instance", "C. It can only be accessed by instance methods", "D. It can be defined inside an instance method"],
  "answer": "A"
}
{
  "question": "Which of the following is used to define a class method in Python?",
  "options": ["A. @classmethod", "B. @staticmethod", "C. @abstractmethod", "D. @property"],
  "answer": "A"
}
{
  "question": "What will be the output of the following code?\n\nclass Car:\n    def __init__(self, model):\n        self.model = model\n    def display_model(self):\n        print(f'Car model: {self.model}')\ncar = Car('Toyota')\ncar.display_model()",
  "options": ["A. Car model: Toyota", "B. Car model", "C. Error", "D. Toyota"],
  "answer": "A"
}
{
  "question": "Which of the following is true about method overloading in Python?",
  "options": ["A. Python does not support method overloading directly", "B. Method overloading is done by using default arguments", "C. Python does not allow multiple methods with the same name", "D. Method overloading is not needed in Python"],
  "answer": "A"
}
{
  "question": "Which of the following statements is true about inheritance in Python?",
  "options": ["A. A child class can inherit methods and attributes from the parent class", "B. A child class cannot inherit any methods or attributes", "C. Inheritance is not allowed in Python", "D. A child class must define its own methods and cannot use the parent class methods"],
  "answer": "A"
}
{
  "question": "What is the result of using the 'super()' function in Python?",
  "options": ["A. It calls the method from the parent class", "B. It creates a new instance of the class", "C. It deletes the parent class", "D. It inherits all methods from the parent class"],
  "answer": "A"
}
{
  "question": "Which of the following is used to define an abstract method in Python?",
  "options": ["A. @abstractmethod", "B. @staticmethod", "C. @classmethod", "D. @property"],
  "answer": "A"
}
{
  "question": "What will the following code output?\n\nclass Animal:\n    def sound(self):\n        print('Animal sound')\nclass Dog(Animal):\n    def sound(self):\n        print('Bark')\nd = Dog()\nd.sound()",
  "options": ["A. Bark", "B. Animal sound", "C. Error", "D. Animal"],
  "answer": "A"
}
{
  "question": "What is the output of the following code?\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f'Name: {self.name}'\np = Person('John')\nprint(p)",
  "options": ["A. Name: John", "B. <__main__.Person object at 0x...>", "C. John", "D. Error"],
  "answer": "A"
}
{
  "question": "Which of the following describes a 'getter' method?",
  "options": ["A. A method that retrieves the value of an instance variable", "B. A method that sets the value of an instance variable", "C. A method that prints a class variable", "D. A method that initializes the class"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the 'private' attributes in Python?",
  "options": ["A. They can be accessed only inside the class", "B. They can be accessed by any instance", "C. They are automatically encrypted", "D. They can be inherited by child classes"],
  "answer": "A"
}
{
  "question": "Which of the following will raise an AttributeError?",
  "options": ["A. Accessing an undefined instance attribute", "B. Calling an existing class method", "C. Accessing a public variable", "D. Using a private method"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the 'classmethod' decorator in Python?",
  "options": ["A. It modifies a method so that it takes the class as its first argument", "B. It modifies a method to take an instance as the first argument", "C. It modifies a method to take an instance of a subclass as the first argument", "D. It defines a class method that does not take arguments"],
  "answer": "A"
}
{
  "question": "Which of the following can be used to implement multiple inheritance in Python?",
  "options": ["A. By inheriting from multiple classes", "B. By using 'super()' multiple times", "C. By defining multiple classes inside a single class", "D. By calling multiple constructors in the __init__ method"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct way to define a private method in Python?",
  "options": ["A. def __private_method(self):", "B. def private_method(self):", "C. def private(self):", "D. def _private_method(self):"],
  "answer": "A"
}
{
  "question": "What does the 'super()' function return in Python?",
  "options": ["A. The parent class", "B. The current instance", "C. The child class", "D. A list of parent classes"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the '__del__' method?",
  "options": ["A. It is used to delete an object", "B. It is used to initialize object attributes", "C. It is used to define a class method", "D. It is used to compare two objects"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the 'is' operator in Python?",
  "options": ["A. It checks whether two variables refer to the same object", "B. It checks whether two variables have the same value", "C. It checks whether two variables are instances of the same class", "D. It checks whether two variables are instances of the same data type"],
  "answer": "A"
}
{
  "question": "Which of the following statements is correct about the '__init__' method in Python?",
  "options": ["A. It is used to initialize object attributes when an object is created", "B. It is used to delete an object", "C. It is used to define a class method", "D. It is used to define a class variable"],
  "answer": "A"
}
{
  "question": "Which of the following defines a property in Python?",
  "options": ["A. @property", "B. @classmethod", "C. @staticmethod", "D. @abstractmethod"],
  "answer": "A"
}
{
  "question": "What is the purpose of the 'pass' keyword in Python?",
  "options": ["A. It is used to define an empty method or class", "B. It is used to skip over the current iteration in a loop", "C. It is used to terminate a program", "D. It is used to raise an exception"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the '__call__' method in Python?",
  "options": ["A. It allows an object to be called as if it were a function", "B. It is used to convert a method to a static method", "C. It allows the method to be called from a parent class", "D. It defines a private method"],
  "answer": "A"
},
{
  "question": "What is the output of the following code?\n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f'Person: {self.name}'\n    def __repr__(self):\n        return f'Person({self.name})'\np = Person('Alice')\nprint(p)",
  "options": ["A. Person: Alice", "B. Person(Alice)", "C. Alice", "D. Error"],
  "answer": "A"
}
{
  "question": "Which of the following is true about polymorphism in Python?",
  "options": ["A. It allows objects of different types to be treated as objects of a common super type", "B. It prevents a method from being overridden in subclasses", "C. It allows multiple classes to have the same method name but different behavior", "D. It is a form of inheritance in Python"],
  "answer": "A"
}
{
  "question": "Which of the following methods is used to compare two objects in Python?",
  "options": ["A. __eq__", "B. __cmp__", "C. __compare__", "D. __equal__"],
  "answer": "A"
}
{
  "question": "Which of the following is true about an interface in object-oriented programming?",
  "options": ["A. An interface defines a contract that a class must implement", "B. An interface is a type of inheritance", "C. An interface is a class with abstract methods", "D. An interface cannot be used in Python"],
  "answer": "A"
}
{
  "question": "Which of the following is used to define a static method in Python?",
  "options": ["A. @staticmethod", "B. @classmethod", "C. @abstractmethod", "D. @property"],
  "answer": "A"
}
{
  "question": "What is the purpose of the 'isinstance()' function in Python?",
  "options": ["A. To check if an object is an instance of a given class or subclass", "B. To compare two objects for equality", "C. To check the type of an object", "D. To create an instance of a class"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the 'staticmethod' decorator?",
  "options": ["A. It defines a method that does not take the instance as the first argument", "B. It defines a method that can access and modify instance variables", "C. It allows the method to be called on the class rather than the instance", "D. It defines a method that only works with class attributes"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the 'super()' function when used in multiple inheritance?",
  "options": ["A. It calls the next class in the method resolution order (MRO)", "B. It calls the first class in the method resolution order (MRO)", "C. It can only call methods from the parent class", "D. It cannot be used in multiple inheritance"],
  "answer": "A"
}
{
  "question": "What is the purpose of using an 'abstract class' in Python?",
  "options": ["A. To define a common interface for its subclasses", "B. To prevent subclassing", "C. To provide implementation for all methods", "D. To define default methods that cannot be overridden"],
  "answer": "A"
}
{
  "question": "Which of the following will you use to call the parent class constructor in Python?",
  "options": ["A. super().__init__()", "B. parent_class.__init__()", "C. class_name.__init__()", "D. call_parent()"],
  "answer": "A"
}
{
  "question": "Which of the following describes the method resolution order (MRO) in Python?",
  "options": ["A. It defines the order in which methods are inherited from multiple classes", "B. It determines the order in which a method is executed in a class", "C. It defines the order in which methods are overridden", "D. It controls the access level of methods in multiple inheritance"],
  "answer": "A"
}
{
  "question": "Which of the following is true about the '__str__' method in Python?",
  "options": ["A. It is used to return a string representation of the object", "B. It is used to compare two objects", "C. It is used to define a class constructor", "D. It is used to represent private methods"],
  "answer": "A"
}
{
  "question": "What is the output of the following code?\n\nclass Animal:\n    def speak(self):\n        print('Animal speaks')\nclass Dog(Animal):\n    def speak(self):\n        print('Bark')\n    def sound(self):\n        print('Woof')\nd = Dog()\nd.speak()",
  "options": ["A. Bark", "B. Animal speaks", "C. Woof", "D. Error"],
  "answer": "A"
}
{
  "question": "Which of the following terms refers to the concept where a subclass overrides the methods of the superclass?",
  "options": ["A. Method overriding", "B. Method overloading", "C. Inheritance", "D. Encapsulation"],
  "answer": "A"
}
{
  "question": "Which of the following is used to define a property method in Python?",
  "options": ["A. @property", "B. @staticmethod", "C. @classmethod", "D. @abstractmethod"],
  "answer": "A"
}
{
  "question": "What will be the output of the following code?\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\nr = Rectangle(4, 5)\nprint(r.area())",
  "options": ["A. 20", "B. 9", "C. 25", "D. Error"],
  "answer": "A"
}
{
  "question": "Which of the following is the correct way to define a class variable in Python?",
  "options": ["A. class_variable = value", "B. def class_variable():", "C. self.class_variable = value", "D. class_variable(self) = value"],
  "answer": "A"
}
{
  "question": "Which of the following methods can be used to access a private attribute in Python?",
  "options": ["A. By using a getter method", "B. By directly accessing the attribute", "C. By using 'self' keyword", "D. By using a class method"],
  "answer": "A"
}
{
  "question": "Which of the following is true about class inheritance in Python?",
  "options": ["A. The subclass inherits methods and attributes of the parent class", "B. The parent class inherits methods and attributes of the subclass", "C. Inheritance is not supported in Python", "D. Subclass methods cannot be overridden"],
  "answer": "A"
}
{
  "question": "Which of the following statements is true about a constructor method in Python?",
  "options": ["A. It is used to initialize an object's state", "B. It defines a method that can be called later", "C. It can be called multiple times", "D. It is used to terminate an object"],
  "answer": "A"
}
{
  "question": "Which of the following is used to declare an abstract method in Python?",
  "options": ["A. @abstractmethod", "B. @staticmethod", "C. @property", "D. @classmethod"],
  "answer": "A"
}
{
  "question": "What is the output of the following code?\n\nclass Car:\n    def __init__(self, model):\n        self.model = model\n    def display_model(self):\n        print(f'Car model: {self.model}')\ncar = Car('BMW')\ncar.display_model()",
  "options": ["A. Car model: BMW", "B. BMW", "C. Error", "D. Car model"],
  "answer": "A"
}
{
  "question": "Which of the following is true about encapsulation in Python?",
  "options": ["A. It restricts access to certain attributes and methods", "B. It allows multiple classes to be defined in a single file", "C. It defines the relationship between objects", "D. It allows objects to share data with each other"],
  "answer": "A"
}
{
  "question": "What does the '__call__' method do in Python?",
  "options": ["A. It allows an instance to be called as a function", "B. It is used to compare two objects", "C. It is used to define a class method", "D. It is used to define an abstract method"],
  "answer": "A"
},
    
]







